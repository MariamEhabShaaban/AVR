
INTERRUPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  000035a0  00003634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080009c  0080009c  00003670  2**0
                  ALLOC
  3 .stab         00002e2c  00000000  00000000  00003670  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000de5  00000000  00000000  0000649c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007281  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000073c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007531  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000917a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a065  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ae14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b9cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__vector_1>
       8:	0c 94 26 10 	jmp	0x204c	; 0x204c <__vector_2>
       c:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 00 15 	call	0x2a00	; 0x2a00 <main>
      8a:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e9       	ldi	r26, 0x92	; 146
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e9       	ldi	r24, 0x92	; 146
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e9 97       	sbiw	r28, 0x39	; 57
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
     b5a:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	67 e0       	ldi	r22, 0x07	; 7
     b7e:	41 e0       	ldi	r20, 0x01	; 1
     b80:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	66 e0       	ldi	r22, 0x06	; 6
     b88:	41 e0       	ldi	r20, 0x01	; 1
     b8a:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	65 e0       	ldi	r22, 0x05	; 5
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	64 e0       	ldi	r22, 0x04	; 4
     b9c:	41 e0       	ldi	r20, 0x01	; 1
     b9e:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <DIO_enuSetPinDirection>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	ac e0       	ldi	r26, 0x0C	; 12
     ba8:	b2 e4       	ldi	r27, 0x42	; 66
     baa:	8d ab       	std	Y+53, r24	; 0x35
     bac:	9e ab       	std	Y+54, r25	; 0x36
     bae:	af ab       	std	Y+55, r26	; 0x37
     bb0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb2:	6d a9       	ldd	r22, Y+53	; 0x35
     bb4:	7e a9       	ldd	r23, Y+54	; 0x36
     bb6:	8f a9       	ldd	r24, Y+55	; 0x37
     bb8:	98 ad       	ldd	r25, Y+56	; 0x38
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	4a e7       	ldi	r20, 0x7A	; 122
     bc0:	53 e4       	ldi	r21, 0x43	; 67
     bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	89 ab       	std	Y+49, r24	; 0x31
     bcc:	9a ab       	std	Y+50, r25	; 0x32
     bce:	ab ab       	std	Y+51, r26	; 0x33
     bd0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     bd2:	69 a9       	ldd	r22, Y+49	; 0x31
     bd4:	7a a9       	ldd	r23, Y+50	; 0x32
     bd6:	8b a9       	ldd	r24, Y+51	; 0x33
     bd8:	9c a9       	ldd	r25, Y+52	; 0x34
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e8       	ldi	r20, 0x80	; 128
     be0:	5f e3       	ldi	r21, 0x3F	; 63
     be2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be6:	88 23       	and	r24, r24
     be8:	2c f4       	brge	.+10     	; 0xbf4 <LCD_enuInit+0xae>
		__ticks = 1;
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	98 ab       	std	Y+48, r25	; 0x30
     bf0:	8f a7       	std	Y+47, r24	; 0x2f
     bf2:	3f c0       	rjmp	.+126    	; 0xc72 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
     bf4:	69 a9       	ldd	r22, Y+49	; 0x31
     bf6:	7a a9       	ldd	r23, Y+50	; 0x32
     bf8:	8b a9       	ldd	r24, Y+51	; 0x33
     bfa:	9c a9       	ldd	r25, Y+52	; 0x34
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	4f e7       	ldi	r20, 0x7F	; 127
     c02:	57 e4       	ldi	r21, 0x47	; 71
     c04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c08:	18 16       	cp	r1, r24
     c0a:	4c f5       	brge	.+82     	; 0xc5e <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0c:	6d a9       	ldd	r22, Y+53	; 0x35
     c0e:	7e a9       	ldd	r23, Y+54	; 0x36
     c10:	8f a9       	ldd	r24, Y+55	; 0x37
     c12:	98 ad       	ldd	r25, Y+56	; 0x38
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e2       	ldi	r20, 0x20	; 32
     c1a:	51 e4       	ldi	r21, 0x41	; 65
     c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	bc 01       	movw	r22, r24
     c26:	cd 01       	movw	r24, r26
     c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	98 ab       	std	Y+48, r25	; 0x30
     c32:	8f a7       	std	Y+47, r24	; 0x2f
     c34:	0f c0       	rjmp	.+30     	; 0xc54 <LCD_enuInit+0x10e>
     c36:	89 e1       	ldi	r24, 0x19	; 25
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	9e a7       	std	Y+46, r25	; 0x2e
     c3c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c3e:	8d a5       	ldd	r24, Y+45	; 0x2d
     c40:	9e a5       	ldd	r25, Y+46	; 0x2e
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <LCD_enuInit+0xfc>
     c46:	9e a7       	std	Y+46, r25	; 0x2e
     c48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c4a:	8f a5       	ldd	r24, Y+47	; 0x2f
     c4c:	98 a9       	ldd	r25, Y+48	; 0x30
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	98 ab       	std	Y+48, r25	; 0x30
     c52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c54:	8f a5       	ldd	r24, Y+47	; 0x2f
     c56:	98 a9       	ldd	r25, Y+48	; 0x30
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	69 f7       	brne	.-38     	; 0xc36 <LCD_enuInit+0xf0>
     c5c:	14 c0       	rjmp	.+40     	; 0xc86 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5e:	69 a9       	ldd	r22, Y+49	; 0x31
     c60:	7a a9       	ldd	r23, Y+50	; 0x32
     c62:	8b a9       	ldd	r24, Y+51	; 0x33
     c64:	9c a9       	ldd	r25, Y+52	; 0x34
     c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	98 ab       	std	Y+48, r25	; 0x30
     c70:	8f a7       	std	Y+47, r24	; 0x2f
     c72:	8f a5       	ldd	r24, Y+47	; 0x2f
     c74:	98 a9       	ldd	r25, Y+48	; 0x30
     c76:	9c a7       	std	Y+44, r25	; 0x2c
     c78:	8b a7       	std	Y+43, r24	; 0x2b
     c7a:	8b a5       	ldd	r24, Y+43	; 0x2b
     c7c:	9c a5       	ldd	r25, Y+44	; 0x2c
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <LCD_enuInit+0x138>
     c82:	9c a7       	std	Y+44, r25	; 0x2c
     c84:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);

	//function set
	LCD_invidSendCommend(0x38);
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
     c86:	88 e2       	ldi	r24, 0x28	; 40
     c88:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <LCD_invidSendCommend>
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	a0 e8       	ldi	r26, 0x80	; 128
     c92:	bf e3       	ldi	r27, 0x3F	; 63
     c94:	8f a3       	std	Y+39, r24	; 0x27
     c96:	98 a7       	std	Y+40, r25	; 0x28
     c98:	a9 a7       	std	Y+41, r26	; 0x29
     c9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c9c:	6f a1       	ldd	r22, Y+39	; 0x27
     c9e:	78 a5       	ldd	r23, Y+40	; 0x28
     ca0:	89 a5       	ldd	r24, Y+41	; 0x29
     ca2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	4a e7       	ldi	r20, 0x7A	; 122
     caa:	53 e4       	ldi	r21, 0x43	; 67
     cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	8b a3       	std	Y+35, r24	; 0x23
     cb6:	9c a3       	std	Y+36, r25	; 0x24
     cb8:	ad a3       	std	Y+37, r26	; 0x25
     cba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cbc:	6b a1       	ldd	r22, Y+35	; 0x23
     cbe:	7c a1       	ldd	r23, Y+36	; 0x24
     cc0:	8d a1       	ldd	r24, Y+37	; 0x25
     cc2:	9e a1       	ldd	r25, Y+38	; 0x26
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e8       	ldi	r20, 0x80	; 128
     cca:	5f e3       	ldi	r21, 0x3F	; 63
     ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd0:	88 23       	and	r24, r24
     cd2:	2c f4       	brge	.+10     	; 0xcde <LCD_enuInit+0x198>
		__ticks = 1;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	9a a3       	std	Y+34, r25	; 0x22
     cda:	89 a3       	std	Y+33, r24	; 0x21
     cdc:	3f c0       	rjmp	.+126    	; 0xd5c <LCD_enuInit+0x216>
	else if (__tmp > 65535)
     cde:	6b a1       	ldd	r22, Y+35	; 0x23
     ce0:	7c a1       	ldd	r23, Y+36	; 0x24
     ce2:	8d a1       	ldd	r24, Y+37	; 0x25
     ce4:	9e a1       	ldd	r25, Y+38	; 0x26
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	3f ef       	ldi	r19, 0xFF	; 255
     cea:	4f e7       	ldi	r20, 0x7F	; 127
     cec:	57 e4       	ldi	r21, 0x47	; 71
     cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cf2:	18 16       	cp	r1, r24
     cf4:	4c f5       	brge	.+82     	; 0xd48 <LCD_enuInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf6:	6f a1       	ldd	r22, Y+39	; 0x27
     cf8:	78 a5       	ldd	r23, Y+40	; 0x28
     cfa:	89 a5       	ldd	r24, Y+41	; 0x29
     cfc:	9a a5       	ldd	r25, Y+42	; 0x2a
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e2       	ldi	r20, 0x20	; 32
     d04:	51 e4       	ldi	r21, 0x41	; 65
     d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	bc 01       	movw	r22, r24
     d10:	cd 01       	movw	r24, r26
     d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	9a a3       	std	Y+34, r25	; 0x22
     d1c:	89 a3       	std	Y+33, r24	; 0x21
     d1e:	0f c0       	rjmp	.+30     	; 0xd3e <LCD_enuInit+0x1f8>
     d20:	89 e1       	ldi	r24, 0x19	; 25
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	98 a3       	std	Y+32, r25	; 0x20
     d26:	8f 8f       	std	Y+31, r24	; 0x1f
     d28:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d2a:	98 a1       	ldd	r25, Y+32	; 0x20
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <LCD_enuInit+0x1e6>
     d30:	98 a3       	std	Y+32, r25	; 0x20
     d32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d34:	89 a1       	ldd	r24, Y+33	; 0x21
     d36:	9a a1       	ldd	r25, Y+34	; 0x22
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	9a a3       	std	Y+34, r25	; 0x22
     d3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d3e:	89 a1       	ldd	r24, Y+33	; 0x21
     d40:	9a a1       	ldd	r25, Y+34	; 0x22
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	69 f7       	brne	.-38     	; 0xd20 <LCD_enuInit+0x1da>
     d46:	14 c0       	rjmp	.+40     	; 0xd70 <LCD_enuInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d48:	6b a1       	ldd	r22, Y+35	; 0x23
     d4a:	7c a1       	ldd	r23, Y+36	; 0x24
     d4c:	8d a1       	ldd	r24, Y+37	; 0x25
     d4e:	9e a1       	ldd	r25, Y+38	; 0x26
     d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	9a a3       	std	Y+34, r25	; 0x22
     d5a:	89 a3       	std	Y+33, r24	; 0x21
     d5c:	89 a1       	ldd	r24, Y+33	; 0x21
     d5e:	9a a1       	ldd	r25, Y+34	; 0x22
     d60:	9e 8f       	std	Y+30, r25	; 0x1e
     d62:	8d 8f       	std	Y+29, r24	; 0x1d
     d64:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d66:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <LCD_enuInit+0x222>
     d6c:	9e 8f       	std	Y+30, r25	; 0x1e
     d6e:	8d 8f       	std	Y+29, r24	; 0x1d
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
     d70:	8f e0       	ldi	r24, 0x0F	; 15
     d72:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <LCD_invidSendCommend>
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	a0 e8       	ldi	r26, 0x80	; 128
     d7c:	bf e3       	ldi	r27, 0x3F	; 63
     d7e:	89 8f       	std	Y+25, r24	; 0x19
     d80:	9a 8f       	std	Y+26, r25	; 0x1a
     d82:	ab 8f       	std	Y+27, r26	; 0x1b
     d84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d86:	69 8d       	ldd	r22, Y+25	; 0x19
     d88:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	4a e7       	ldi	r20, 0x7A	; 122
     d94:	53 e4       	ldi	r21, 0x43	; 67
     d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	8d 8b       	std	Y+21, r24	; 0x15
     da0:	9e 8b       	std	Y+22, r25	; 0x16
     da2:	af 8b       	std	Y+23, r26	; 0x17
     da4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     da6:	6d 89       	ldd	r22, Y+21	; 0x15
     da8:	7e 89       	ldd	r23, Y+22	; 0x16
     daa:	8f 89       	ldd	r24, Y+23	; 0x17
     dac:	98 8d       	ldd	r25, Y+24	; 0x18
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e8       	ldi	r20, 0x80	; 128
     db4:	5f e3       	ldi	r21, 0x3F	; 63
     db6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dba:	88 23       	and	r24, r24
     dbc:	2c f4       	brge	.+10     	; 0xdc8 <LCD_enuInit+0x282>
		__ticks = 1;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	9c 8b       	std	Y+20, r25	; 0x14
     dc4:	8b 8b       	std	Y+19, r24	; 0x13
     dc6:	3f c0       	rjmp	.+126    	; 0xe46 <LCD_enuInit+0x300>
	else if (__tmp > 65535)
     dc8:	6d 89       	ldd	r22, Y+21	; 0x15
     dca:	7e 89       	ldd	r23, Y+22	; 0x16
     dcc:	8f 89       	ldd	r24, Y+23	; 0x17
     dce:	98 8d       	ldd	r25, Y+24	; 0x18
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	3f ef       	ldi	r19, 0xFF	; 255
     dd4:	4f e7       	ldi	r20, 0x7F	; 127
     dd6:	57 e4       	ldi	r21, 0x47	; 71
     dd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ddc:	18 16       	cp	r1, r24
     dde:	4c f5       	brge	.+82     	; 0xe32 <LCD_enuInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de0:	69 8d       	ldd	r22, Y+25	; 0x19
     de2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     de4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     de6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e2       	ldi	r20, 0x20	; 32
     dee:	51 e4       	ldi	r21, 0x41	; 65
     df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	bc 01       	movw	r22, r24
     dfa:	cd 01       	movw	r24, r26
     dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	9c 8b       	std	Y+20, r25	; 0x14
     e06:	8b 8b       	std	Y+19, r24	; 0x13
     e08:	0f c0       	rjmp	.+30     	; 0xe28 <LCD_enuInit+0x2e2>
     e0a:	89 e1       	ldi	r24, 0x19	; 25
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	9a 8b       	std	Y+18, r25	; 0x12
     e10:	89 8b       	std	Y+17, r24	; 0x11
     e12:	89 89       	ldd	r24, Y+17	; 0x11
     e14:	9a 89       	ldd	r25, Y+18	; 0x12
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <LCD_enuInit+0x2d0>
     e1a:	9a 8b       	std	Y+18, r25	; 0x12
     e1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e1e:	8b 89       	ldd	r24, Y+19	; 0x13
     e20:	9c 89       	ldd	r25, Y+20	; 0x14
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	9c 8b       	std	Y+20, r25	; 0x14
     e26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e28:	8b 89       	ldd	r24, Y+19	; 0x13
     e2a:	9c 89       	ldd	r25, Y+20	; 0x14
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	69 f7       	brne	.-38     	; 0xe0a <LCD_enuInit+0x2c4>
     e30:	14 c0       	rjmp	.+40     	; 0xe5a <LCD_enuInit+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e32:	6d 89       	ldd	r22, Y+21	; 0x15
     e34:	7e 89       	ldd	r23, Y+22	; 0x16
     e36:	8f 89       	ldd	r24, Y+23	; 0x17
     e38:	98 8d       	ldd	r25, Y+24	; 0x18
     e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9c 8b       	std	Y+20, r25	; 0x14
     e44:	8b 8b       	std	Y+19, r24	; 0x13
     e46:	8b 89       	ldd	r24, Y+19	; 0x13
     e48:	9c 89       	ldd	r25, Y+20	; 0x14
     e4a:	98 8b       	std	Y+16, r25	; 0x10
     e4c:	8f 87       	std	Y+15, r24	; 0x0f
     e4e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e50:	98 89       	ldd	r25, Y+16	; 0x10
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <LCD_enuInit+0x30c>
     e56:	98 8b       	std	Y+16, r25	; 0x10
     e58:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <LCD_invidSendCommend>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a0 e0       	ldi	r26, 0x00	; 0
     e66:	b0 e4       	ldi	r27, 0x40	; 64
     e68:	8b 87       	std	Y+11, r24	; 0x0b
     e6a:	9c 87       	std	Y+12, r25	; 0x0c
     e6c:	ad 87       	std	Y+13, r26	; 0x0d
     e6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e70:	6b 85       	ldd	r22, Y+11	; 0x0b
     e72:	7c 85       	ldd	r23, Y+12	; 0x0c
     e74:	8d 85       	ldd	r24, Y+13	; 0x0d
     e76:	9e 85       	ldd	r25, Y+14	; 0x0e
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4a e7       	ldi	r20, 0x7A	; 122
     e7e:	53 e4       	ldi	r21, 0x43	; 67
     e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	8f 83       	std	Y+7, r24	; 0x07
     e8a:	98 87       	std	Y+8, r25	; 0x08
     e8c:	a9 87       	std	Y+9, r26	; 0x09
     e8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e90:	6f 81       	ldd	r22, Y+7	; 0x07
     e92:	78 85       	ldd	r23, Y+8	; 0x08
     e94:	89 85       	ldd	r24, Y+9	; 0x09
     e96:	9a 85       	ldd	r25, Y+10	; 0x0a
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <LCD_enuInit+0x36c>
		__ticks = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9e 83       	std	Y+6, r25	; 0x06
     eae:	8d 83       	std	Y+5, r24	; 0x05
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <LCD_enuInit+0x3ea>
	else if (__tmp > 65535)
     eb2:	6f 81       	ldd	r22, Y+7	; 0x07
     eb4:	78 85       	ldd	r23, Y+8	; 0x08
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
     eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	3f ef       	ldi	r19, 0xFF	; 255
     ebe:	4f e7       	ldi	r20, 0x7F	; 127
     ec0:	57 e4       	ldi	r21, 0x47	; 71
     ec2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	4c f5       	brge	.+82     	; 0xf1c <LCD_enuInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eca:	6b 85       	ldd	r22, Y+11	; 0x0b
     ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ece:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e2       	ldi	r20, 0x20	; 32
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	9e 83       	std	Y+6, r25	; 0x06
     ef0:	8d 83       	std	Y+5, r24	; 0x05
     ef2:	0f c0       	rjmp	.+30     	; 0xf12 <LCD_enuInit+0x3cc>
     ef4:	89 e1       	ldi	r24, 0x19	; 25
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9c 83       	std	Y+4, r25	; 0x04
     efa:	8b 83       	std	Y+3, r24	; 0x03
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <LCD_enuInit+0x3ba>
     f04:	9c 83       	std	Y+4, r25	; 0x04
     f06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	9e 83       	std	Y+6, r25	; 0x06
     f10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	69 f7       	brne	.-38     	; 0xef4 <LCD_enuInit+0x3ae>
     f1a:	14 c0       	rjmp	.+40     	; 0xf44 <LCD_enuInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1c:	6f 81       	ldd	r22, Y+7	; 0x07
     f1e:	78 85       	ldd	r23, Y+8	; 0x08
     f20:	89 85       	ldd	r24, Y+9	; 0x09
     f22:	9a 85       	ldd	r25, Y+10	; 0x0a
     f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	8d 83       	std	Y+5, r24	; 0x05
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <LCD_enuInit+0x3f6>
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
     f44:	86 e0       	ldi	r24, 0x06	; 6
     f46:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <LCD_invidSendCommend>

	return Local_enuErrorState;
     f4a:	89 ad       	ldd	r24, Y+57	; 0x39
}
     f4c:	e9 96       	adiw	r28, 0x39	; 57
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <LCD_enuDisplayChar+0x6>
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     f6a:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	41 e0       	ldi	r20, 0x01	; 1
     f72:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	0e 94 90 08 	call	0x1120	; 0x1120 <LCD_vidLatch>

	return Local_enuErrorState;
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <LCD_enuSendCommand+0x6>
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     f94:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	0e 94 90 08 	call	0x1120	; 0x1120 <LCD_vidLatch>


	return Local_enuErrorState;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <LCD_enuDisplayIntegerNum>:


ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	2b 97       	sbiw	r28, 0x0b	; 11
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	68 87       	std	Y+8, r22	; 0x08
     fc8:	79 87       	std	Y+9, r23	; 0x09
     fca:	8a 87       	std	Y+10, r24	; 0x0a
     fcc:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
     fce:	1f 82       	std	Y+7, r1	; 0x07

	s32 Local_s32Reverse=0;
     fd0:	1b 82       	std	Y+3, r1	; 0x03
     fd2:	1c 82       	std	Y+4, r1	; 0x04
     fd4:	1d 82       	std	Y+5, r1	; 0x05
     fd6:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
     fd8:	1a 82       	std	Y+2, r1	; 0x02
     fda:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num <0)
     fdc:	88 85       	ldd	r24, Y+8	; 0x08
     fde:	99 85       	ldd	r25, Y+9	; 0x09
     fe0:	aa 85       	ldd	r26, Y+10	; 0x0a
     fe2:	bb 85       	ldd	r27, Y+11	; 0x0b
     fe4:	bb 23       	and	r27, r27
     fe6:	0c f0       	brlt	.+2      	; 0xfea <LCD_enuDisplayIntegerNum+0x38>
     fe8:	57 c0       	rjmp	.+174    	; 0x1098 <LCD_enuDisplayIntegerNum+0xe6>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	41 e0       	ldi	r20, 0x01	; 1
     ff0:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
		LCD_vidLatch('-');
     ff4:	8d e2       	ldi	r24, 0x2D	; 45
     ff6:	0e 94 90 08 	call	0x1120	; 0x1120 <LCD_vidLatch>
		Copy_s32Num *= -1 ;
     ffa:	88 85       	ldd	r24, Y+8	; 0x08
     ffc:	99 85       	ldd	r25, Y+9	; 0x09
     ffe:	aa 85       	ldd	r26, Y+10	; 0x0a
    1000:	bb 85       	ldd	r27, Y+11	; 0x0b
    1002:	b0 95       	com	r27
    1004:	a0 95       	com	r26
    1006:	90 95       	com	r25
    1008:	81 95       	neg	r24
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	af 4f       	sbci	r26, 0xFF	; 255
    100e:	bf 4f       	sbci	r27, 0xFF	; 255
    1010:	88 87       	std	Y+8, r24	; 0x08
    1012:	99 87       	std	Y+9, r25	; 0x09
    1014:	aa 87       	std	Y+10, r26	; 0x0a
    1016:	bb 87       	std	Y+11, r27	; 0x0b
    1018:	3f c0       	rjmp	.+126    	; 0x1098 <LCD_enuDisplayIntegerNum+0xe6>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    101a:	88 85       	ldd	r24, Y+8	; 0x08
    101c:	99 85       	ldd	r25, Y+9	; 0x09
    101e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1020:	bb 85       	ldd	r27, Y+11	; 0x0b
    1022:	2a e0       	ldi	r18, 0x0A	; 10
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	bc 01       	movw	r22, r24
    102c:	cd 01       	movw	r24, r26
    102e:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <__divmodsi4>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	ad 81       	ldd	r26, Y+5	; 0x05
    103e:	be 81       	ldd	r27, Y+6	; 0x06
    1040:	2a e0       	ldi	r18, 0x0A	; 10
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	bc 01       	movw	r22, r24
    104a:	cd 01       	movw	r24, r26
    104c:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__mulsi3>
    1050:	9b 01       	movw	r18, r22
    1052:	ac 01       	movw	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	a0 e0       	ldi	r26, 0x00	; 0
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	82 0f       	add	r24, r18
    1060:	93 1f       	adc	r25, r19
    1062:	a4 1f       	adc	r26, r20
    1064:	b5 1f       	adc	r27, r21
    1066:	8b 83       	std	Y+3, r24	; 0x03
    1068:	9c 83       	std	Y+4, r25	; 0x04
    106a:	ad 83       	std	Y+5, r26	; 0x05
    106c:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    106e:	88 85       	ldd	r24, Y+8	; 0x08
    1070:	99 85       	ldd	r25, Y+9	; 0x09
    1072:	aa 85       	ldd	r26, Y+10	; 0x0a
    1074:	bb 85       	ldd	r27, Y+11	; 0x0b
    1076:	2a e0       	ldi	r18, 0x0A	; 10
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	bc 01       	movw	r22, r24
    1080:	cd 01       	movw	r24, r26
    1082:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <__divmodsi4>
    1086:	da 01       	movw	r26, r20
    1088:	c9 01       	movw	r24, r18
    108a:	88 87       	std	Y+8, r24	; 0x08
    108c:	99 87       	std	Y+9, r25	; 0x09
    108e:	aa 87       	std	Y+10, r26	; 0x0a
    1090:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    1098:	88 85       	ldd	r24, Y+8	; 0x08
    109a:	99 85       	ldd	r25, Y+9	; 0x09
    109c:	aa 85       	ldd	r26, Y+10	; 0x0a
    109e:	bb 85       	ldd	r27, Y+11	; 0x0b
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	a1 05       	cpc	r26, r1
    10a4:	b1 05       	cpc	r27, r1
    10a6:	09 f0       	breq	.+2      	; 0x10aa <LCD_enuDisplayIntegerNum+0xf8>
    10a8:	b8 cf       	rjmp	.-144    	; 0x101a <LCD_enuDisplayIntegerNum+0x68>
    10aa:	2d c0       	rjmp	.+90     	; 0x1106 <LCD_enuDisplayIntegerNum+0x154>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	9c 81       	ldd	r25, Y+4	; 0x04
    10b0:	ad 81       	ldd	r26, Y+5	; 0x05
    10b2:	be 81       	ldd	r27, Y+6	; 0x06
    10b4:	2a e0       	ldi	r18, 0x0A	; 10
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 e0       	ldi	r20, 0x00	; 0
    10ba:	50 e0       	ldi	r21, 0x00	; 0
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <__divmodsi4>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	41 e0       	ldi	r20, 0x01	; 1
    10d0:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	80 5d       	subi	r24, 0xD0	; 208
    10d8:	0e 94 90 08 	call	0x1120	; 0x1120 <LCD_vidLatch>
		Local_s32Reverse /= 10;
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	ad 81       	ldd	r26, Y+5	; 0x05
    10e2:	be 81       	ldd	r27, Y+6	; 0x06
    10e4:	2a e0       	ldi	r18, 0x0A	; 10
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	bc 01       	movw	r22, r24
    10ee:	cd 01       	movw	r24, r26
    10f0:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <__divmodsi4>
    10f4:	da 01       	movw	r26, r20
    10f6:	c9 01       	movw	r24, r18
    10f8:	8b 83       	std	Y+3, r24	; 0x03
    10fa:	9c 83       	std	Y+4, r25	; 0x04
    10fc:	ad 83       	std	Y+5, r26	; 0x05
    10fe:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	81 50       	subi	r24, 0x01	; 1
    1104:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	88 23       	and	r24, r24
    110a:	81 f6       	brne	.-96     	; 0x10ac <LCD_enuDisplayIntegerNum+0xfa>
		LCD_vidLatch(Local_u8Remainder + '0');
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
    110c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    110e:	2b 96       	adiw	r28, 0x0b	; 11
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <LCD_vidLatch>:




static void LCD_vidLatch(u8 Copy_u8Data)
{
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	c5 55       	subi	r28, 0x55	; 85
    112e:	d0 40       	sbci	r29, 0x00	; 0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	fe 01       	movw	r30, r28
    113c:	eb 5a       	subi	r30, 0xAB	; 171
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	80 83       	st	Z, r24
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	62 e0       	ldi	r22, 0x02	; 2
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1156:	fe 01       	movw	r30, r28
    1158:	eb 5a       	subi	r30, 0xAB	; 171
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	80 81       	ld	r24, Z
    115e:	98 2f       	mov	r25, r24
    1160:	99 1f       	adc	r25, r25
    1162:	99 27       	eor	r25, r25
    1164:	99 1f       	adc	r25, r25
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	67 e0       	ldi	r22, 0x07	; 7
    116a:	49 2f       	mov	r20, r25
    116c:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1170:	fe 01       	movw	r30, r28
    1172:	eb 5a       	subi	r30, 0xAB	; 171
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	80 81       	ld	r24, Z
    1178:	82 95       	swap	r24
    117a:	86 95       	lsr	r24
    117c:	86 95       	lsr	r24
    117e:	83 70       	andi	r24, 0x03	; 3
    1180:	98 2f       	mov	r25, r24
    1182:	91 70       	andi	r25, 0x01	; 1
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	66 e0       	ldi	r22, 0x06	; 6
    1188:	49 2f       	mov	r20, r25
    118a:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    118e:	fe 01       	movw	r30, r28
    1190:	eb 5a       	subi	r30, 0xAB	; 171
    1192:	ff 4f       	sbci	r31, 0xFF	; 255
    1194:	80 81       	ld	r24, Z
    1196:	82 95       	swap	r24
    1198:	86 95       	lsr	r24
    119a:	87 70       	andi	r24, 0x07	; 7
    119c:	98 2f       	mov	r25, r24
    119e:	91 70       	andi	r25, 0x01	; 1
    11a0:	82 e0       	ldi	r24, 0x02	; 2
    11a2:	65 e0       	ldi	r22, 0x05	; 5
    11a4:	49 2f       	mov	r20, r25
    11a6:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    11aa:	fe 01       	movw	r30, r28
    11ac:	eb 5a       	subi	r30, 0xAB	; 171
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	80 81       	ld	r24, Z
    11b2:	82 95       	swap	r24
    11b4:	8f 70       	andi	r24, 0x0F	; 15
    11b6:	98 2f       	mov	r25, r24
    11b8:	91 70       	andi	r25, 0x01	; 1
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	64 e0       	ldi	r22, 0x04	; 4
    11be:	49 2f       	mov	r20, r25
    11c0:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));

#elif LCD_MODE == FOUR_BIT
	if (Copy_u8Data == 0x28)
    11c4:	fe 01       	movw	r30, r28
    11c6:	eb 5a       	subi	r30, 0xAB	; 171
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	80 81       	ld	r24, Z
    11cc:	88 32       	cpi	r24, 0x28	; 40
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <LCD_vidLatch+0xb2>
    11d0:	79 c1       	rjmp	.+754    	; 0x14c4 <LCD_vidLatch+0x3a4>
	{
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	62 e0       	ldi	r22, 0x02	; 2
    11d6:	41 e0       	ldi	r20, 0x01	; 1
    11d8:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
    11dc:	fe 01       	movw	r30, r28
    11de:	ef 5a       	subi	r30, 0xAF	; 175
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	a0 e2       	ldi	r26, 0x20	; 32
    11e8:	b1 e4       	ldi	r27, 0x41	; 65
    11ea:	80 83       	st	Z, r24
    11ec:	91 83       	std	Z+1, r25	; 0x01
    11ee:	a2 83       	std	Z+2, r26	; 0x02
    11f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f2:	8e 01       	movw	r16, r28
    11f4:	03 5b       	subi	r16, 0xB3	; 179
    11f6:	1f 4f       	sbci	r17, 0xFF	; 255
    11f8:	fe 01       	movw	r30, r28
    11fa:	ef 5a       	subi	r30, 0xAF	; 175
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	60 81       	ld	r22, Z
    1200:	71 81       	ldd	r23, Z+1	; 0x01
    1202:	82 81       	ldd	r24, Z+2	; 0x02
    1204:	93 81       	ldd	r25, Z+3	; 0x03
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	4a e7       	ldi	r20, 0x7A	; 122
    120c:	53 e4       	ldi	r21, 0x43	; 67
    120e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	f8 01       	movw	r30, r16
    1218:	80 83       	st	Z, r24
    121a:	91 83       	std	Z+1, r25	; 0x01
    121c:	a2 83       	std	Z+2, r26	; 0x02
    121e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1220:	fe 01       	movw	r30, r28
    1222:	e3 5b       	subi	r30, 0xB3	; 179
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	60 81       	ld	r22, Z
    1228:	71 81       	ldd	r23, Z+1	; 0x01
    122a:	82 81       	ldd	r24, Z+2	; 0x02
    122c:	93 81       	ldd	r25, Z+3	; 0x03
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e8       	ldi	r20, 0x80	; 128
    1234:	5f e3       	ldi	r21, 0x3F	; 63
    1236:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    123a:	88 23       	and	r24, r24
    123c:	44 f4       	brge	.+16     	; 0x124e <LCD_vidLatch+0x12e>
		__ticks = 1;
    123e:	fe 01       	movw	r30, r28
    1240:	e5 5b       	subi	r30, 0xB5	; 181
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	91 83       	std	Z+1, r25	; 0x01
    124a:	80 83       	st	Z, r24
    124c:	64 c0       	rjmp	.+200    	; 0x1316 <LCD_vidLatch+0x1f6>
	else if (__tmp > 65535)
    124e:	fe 01       	movw	r30, r28
    1250:	e3 5b       	subi	r30, 0xB3	; 179
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	60 81       	ld	r22, Z
    1256:	71 81       	ldd	r23, Z+1	; 0x01
    1258:	82 81       	ldd	r24, Z+2	; 0x02
    125a:	93 81       	ldd	r25, Z+3	; 0x03
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	3f ef       	ldi	r19, 0xFF	; 255
    1260:	4f e7       	ldi	r20, 0x7F	; 127
    1262:	57 e4       	ldi	r21, 0x47	; 71
    1264:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1268:	18 16       	cp	r1, r24
    126a:	0c f0       	brlt	.+2      	; 0x126e <LCD_vidLatch+0x14e>
    126c:	43 c0       	rjmp	.+134    	; 0x12f4 <LCD_vidLatch+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126e:	fe 01       	movw	r30, r28
    1270:	ef 5a       	subi	r30, 0xAF	; 175
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	60 81       	ld	r22, Z
    1276:	71 81       	ldd	r23, Z+1	; 0x01
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	93 81       	ldd	r25, Z+3	; 0x03
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e2       	ldi	r20, 0x20	; 32
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	8e 01       	movw	r16, r28
    128e:	05 5b       	subi	r16, 0xB5	; 181
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	f8 01       	movw	r30, r16
    12a0:	91 83       	std	Z+1, r25	; 0x01
    12a2:	80 83       	st	Z, r24
    12a4:	1f c0       	rjmp	.+62     	; 0x12e4 <LCD_vidLatch+0x1c4>
    12a6:	fe 01       	movw	r30, r28
    12a8:	e7 5b       	subi	r30, 0xB7	; 183
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	89 e1       	ldi	r24, 0x19	; 25
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	91 83       	std	Z+1, r25	; 0x01
    12b2:	80 83       	st	Z, r24
    12b4:	fe 01       	movw	r30, r28
    12b6:	e7 5b       	subi	r30, 0xB7	; 183
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	80 81       	ld	r24, Z
    12bc:	91 81       	ldd	r25, Z+1	; 0x01
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <LCD_vidLatch+0x19e>
    12c2:	fe 01       	movw	r30, r28
    12c4:	e7 5b       	subi	r30, 0xB7	; 183
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	91 83       	std	Z+1, r25	; 0x01
    12ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12cc:	de 01       	movw	r26, r28
    12ce:	a5 5b       	subi	r26, 0xB5	; 181
    12d0:	bf 4f       	sbci	r27, 0xFF	; 255
    12d2:	fe 01       	movw	r30, r28
    12d4:	e5 5b       	subi	r30, 0xB5	; 181
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	11 96       	adiw	r26, 0x01	; 1
    12e0:	9c 93       	st	X, r25
    12e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e4:	fe 01       	movw	r30, r28
    12e6:	e5 5b       	subi	r30, 0xB5	; 181
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	80 81       	ld	r24, Z
    12ec:	91 81       	ldd	r25, Z+1	; 0x01
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	d1 f6       	brne	.-76     	; 0x12a6 <LCD_vidLatch+0x186>
    12f2:	27 c0       	rjmp	.+78     	; 0x1342 <LCD_vidLatch+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f4:	8e 01       	movw	r16, r28
    12f6:	05 5b       	subi	r16, 0xB5	; 181
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	fe 01       	movw	r30, r28
    12fc:	e3 5b       	subi	r30, 0xB3	; 179
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	60 81       	ld	r22, Z
    1302:	71 81       	ldd	r23, Z+1	; 0x01
    1304:	82 81       	ldd	r24, Z+2	; 0x02
    1306:	93 81       	ldd	r25, Z+3	; 0x03
    1308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	f8 01       	movw	r30, r16
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	80 83       	st	Z, r24
    1316:	de 01       	movw	r26, r28
    1318:	a9 5b       	subi	r26, 0xB9	; 185
    131a:	bf 4f       	sbci	r27, 0xFF	; 255
    131c:	fe 01       	movw	r30, r28
    131e:	e5 5b       	subi	r30, 0xB5	; 181
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	80 81       	ld	r24, Z
    1324:	91 81       	ldd	r25, Z+1	; 0x01
    1326:	8d 93       	st	X+, r24
    1328:	9c 93       	st	X, r25
    132a:	fe 01       	movw	r30, r28
    132c:	e9 5b       	subi	r30, 0xB9	; 185
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	80 81       	ld	r24, Z
    1332:	91 81       	ldd	r25, Z+1	; 0x01
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <LCD_vidLatch+0x214>
    1338:	fe 01       	movw	r30, r28
    133a:	e9 5b       	subi	r30, 0xB9	; 185
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	62 e0       	ldi	r22, 0x02	; 2
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
    134c:	fe 01       	movw	r30, r28
    134e:	ed 5b       	subi	r30, 0xBD	; 189
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	a0 e2       	ldi	r26, 0x20	; 32
    1358:	b1 e4       	ldi	r27, 0x41	; 65
    135a:	80 83       	st	Z, r24
    135c:	91 83       	std	Z+1, r25	; 0x01
    135e:	a2 83       	std	Z+2, r26	; 0x02
    1360:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1362:	8e 01       	movw	r16, r28
    1364:	01 5c       	subi	r16, 0xC1	; 193
    1366:	1f 4f       	sbci	r17, 0xFF	; 255
    1368:	fe 01       	movw	r30, r28
    136a:	ed 5b       	subi	r30, 0xBD	; 189
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	60 81       	ld	r22, Z
    1370:	71 81       	ldd	r23, Z+1	; 0x01
    1372:	82 81       	ldd	r24, Z+2	; 0x02
    1374:	93 81       	ldd	r25, Z+3	; 0x03
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	4a e7       	ldi	r20, 0x7A	; 122
    137c:	53 e4       	ldi	r21, 0x43	; 67
    137e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	f8 01       	movw	r30, r16
    1388:	80 83       	st	Z, r24
    138a:	91 83       	std	Z+1, r25	; 0x01
    138c:	a2 83       	std	Z+2, r26	; 0x02
    138e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1390:	fe 01       	movw	r30, r28
    1392:	ff 96       	adiw	r30, 0x3f	; 63
    1394:	60 81       	ld	r22, Z
    1396:	71 81       	ldd	r23, Z+1	; 0x01
    1398:	82 81       	ldd	r24, Z+2	; 0x02
    139a:	93 81       	ldd	r25, Z+3	; 0x03
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	40 e8       	ldi	r20, 0x80	; 128
    13a2:	5f e3       	ldi	r21, 0x3F	; 63
    13a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a8:	88 23       	and	r24, r24
    13aa:	2c f4       	brge	.+10     	; 0x13b6 <LCD_vidLatch+0x296>
		__ticks = 1;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	9e af       	std	Y+62, r25	; 0x3e
    13b2:	8d af       	std	Y+61, r24	; 0x3d
    13b4:	46 c0       	rjmp	.+140    	; 0x1442 <LCD_vidLatch+0x322>
	else if (__tmp > 65535)
    13b6:	fe 01       	movw	r30, r28
    13b8:	ff 96       	adiw	r30, 0x3f	; 63
    13ba:	60 81       	ld	r22, Z
    13bc:	71 81       	ldd	r23, Z+1	; 0x01
    13be:	82 81       	ldd	r24, Z+2	; 0x02
    13c0:	93 81       	ldd	r25, Z+3	; 0x03
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	3f ef       	ldi	r19, 0xFF	; 255
    13c6:	4f e7       	ldi	r20, 0x7F	; 127
    13c8:	57 e4       	ldi	r21, 0x47	; 71
    13ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ce:	18 16       	cp	r1, r24
    13d0:	64 f5       	brge	.+88     	; 0x142a <LCD_vidLatch+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d2:	fe 01       	movw	r30, r28
    13d4:	ed 5b       	subi	r30, 0xBD	; 189
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	60 81       	ld	r22, Z
    13da:	71 81       	ldd	r23, Z+1	; 0x01
    13dc:	82 81       	ldd	r24, Z+2	; 0x02
    13de:	93 81       	ldd	r25, Z+3	; 0x03
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e2       	ldi	r20, 0x20	; 32
    13e6:	51 e4       	ldi	r21, 0x41	; 65
    13e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	bc 01       	movw	r22, r24
    13f2:	cd 01       	movw	r24, r26
    13f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	9e af       	std	Y+62, r25	; 0x3e
    13fe:	8d af       	std	Y+61, r24	; 0x3d
    1400:	0f c0       	rjmp	.+30     	; 0x1420 <LCD_vidLatch+0x300>
    1402:	89 e1       	ldi	r24, 0x19	; 25
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	9c af       	std	Y+60, r25	; 0x3c
    1408:	8b af       	std	Y+59, r24	; 0x3b
    140a:	8b ad       	ldd	r24, Y+59	; 0x3b
    140c:	9c ad       	ldd	r25, Y+60	; 0x3c
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <LCD_vidLatch+0x2ee>
    1412:	9c af       	std	Y+60, r25	; 0x3c
    1414:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1416:	8d ad       	ldd	r24, Y+61	; 0x3d
    1418:	9e ad       	ldd	r25, Y+62	; 0x3e
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	9e af       	std	Y+62, r25	; 0x3e
    141e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1420:	8d ad       	ldd	r24, Y+61	; 0x3d
    1422:	9e ad       	ldd	r25, Y+62	; 0x3e
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	69 f7       	brne	.-38     	; 0x1402 <LCD_vidLatch+0x2e2>
    1428:	16 c0       	rjmp	.+44     	; 0x1456 <LCD_vidLatch+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142a:	fe 01       	movw	r30, r28
    142c:	ff 96       	adiw	r30, 0x3f	; 63
    142e:	60 81       	ld	r22, Z
    1430:	71 81       	ldd	r23, Z+1	; 0x01
    1432:	82 81       	ldd	r24, Z+2	; 0x02
    1434:	93 81       	ldd	r25, Z+3	; 0x03
    1436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	9e af       	std	Y+62, r25	; 0x3e
    1440:	8d af       	std	Y+61, r24	; 0x3d
    1442:	8d ad       	ldd	r24, Y+61	; 0x3d
    1444:	9e ad       	ldd	r25, Y+62	; 0x3e
    1446:	9a af       	std	Y+58, r25	; 0x3a
    1448:	89 af       	std	Y+57, r24	; 0x39
    144a:	89 ad       	ldd	r24, Y+57	; 0x39
    144c:	9a ad       	ldd	r25, Y+58	; 0x3a
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <LCD_vidLatch+0x32e>
    1452:	9a af       	std	Y+58, r25	; 0x3a
    1454:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(10);

		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1456:	fe 01       	movw	r30, r28
    1458:	eb 5a       	subi	r30, 0xAB	; 171
    145a:	ff 4f       	sbci	r31, 0xFF	; 255
    145c:	80 81       	ld	r24, Z
    145e:	98 2f       	mov	r25, r24
    1460:	99 1f       	adc	r25, r25
    1462:	99 27       	eor	r25, r25
    1464:	99 1f       	adc	r25, r25
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	67 e0       	ldi	r22, 0x07	; 7
    146a:	49 2f       	mov	r20, r25
    146c:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1470:	fe 01       	movw	r30, r28
    1472:	eb 5a       	subi	r30, 0xAB	; 171
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	80 81       	ld	r24, Z
    1478:	82 95       	swap	r24
    147a:	86 95       	lsr	r24
    147c:	86 95       	lsr	r24
    147e:	83 70       	andi	r24, 0x03	; 3
    1480:	98 2f       	mov	r25, r24
    1482:	91 70       	andi	r25, 0x01	; 1
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	66 e0       	ldi	r22, 0x06	; 6
    1488:	49 2f       	mov	r20, r25
    148a:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    148e:	fe 01       	movw	r30, r28
    1490:	eb 5a       	subi	r30, 0xAB	; 171
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	80 81       	ld	r24, Z
    1496:	82 95       	swap	r24
    1498:	86 95       	lsr	r24
    149a:	87 70       	andi	r24, 0x07	; 7
    149c:	98 2f       	mov	r25, r24
    149e:	91 70       	andi	r25, 0x01	; 1
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	65 e0       	ldi	r22, 0x05	; 5
    14a4:	49 2f       	mov	r20, r25
    14a6:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    14aa:	fe 01       	movw	r30, r28
    14ac:	eb 5a       	subi	r30, 0xAB	; 171
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	80 81       	ld	r24, Z
    14b2:	82 95       	swap	r24
    14b4:	8f 70       	andi	r24, 0x0F	; 15
    14b6:	98 2f       	mov	r25, r24
    14b8:	91 70       	andi	r25, 0x01	; 1
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	64 e0       	ldi	r22, 0x04	; 4
    14be:	49 2f       	mov	r20, r25
    14c0:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	}

	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	62 e0       	ldi	r22, 0x02	; 2
    14c8:	41 e0       	ldi	r20, 0x01	; 1
    14ca:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 e2       	ldi	r26, 0x20	; 32
    14d4:	b1 e4       	ldi	r27, 0x41	; 65
    14d6:	8d ab       	std	Y+53, r24	; 0x35
    14d8:	9e ab       	std	Y+54, r25	; 0x36
    14da:	af ab       	std	Y+55, r26	; 0x37
    14dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14de:	6d a9       	ldd	r22, Y+53	; 0x35
    14e0:	7e a9       	ldd	r23, Y+54	; 0x36
    14e2:	8f a9       	ldd	r24, Y+55	; 0x37
    14e4:	98 ad       	ldd	r25, Y+56	; 0x38
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	4a e7       	ldi	r20, 0x7A	; 122
    14ec:	53 e4       	ldi	r21, 0x43	; 67
    14ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	89 ab       	std	Y+49, r24	; 0x31
    14f8:	9a ab       	std	Y+50, r25	; 0x32
    14fa:	ab ab       	std	Y+51, r26	; 0x33
    14fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1500:	7a a9       	ldd	r23, Y+50	; 0x32
    1502:	8b a9       	ldd	r24, Y+51	; 0x33
    1504:	9c a9       	ldd	r25, Y+52	; 0x34
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1512:	88 23       	and	r24, r24
    1514:	2c f4       	brge	.+10     	; 0x1520 <LCD_vidLatch+0x400>
		__ticks = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	98 ab       	std	Y+48, r25	; 0x30
    151c:	8f a7       	std	Y+47, r24	; 0x2f
    151e:	3f c0       	rjmp	.+126    	; 0x159e <LCD_vidLatch+0x47e>
	else if (__tmp > 65535)
    1520:	69 a9       	ldd	r22, Y+49	; 0x31
    1522:	7a a9       	ldd	r23, Y+50	; 0x32
    1524:	8b a9       	ldd	r24, Y+51	; 0x33
    1526:	9c a9       	ldd	r25, Y+52	; 0x34
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	4f e7       	ldi	r20, 0x7F	; 127
    152e:	57 e4       	ldi	r21, 0x47	; 71
    1530:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1534:	18 16       	cp	r1, r24
    1536:	4c f5       	brge	.+82     	; 0x158a <LCD_vidLatch+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1538:	6d a9       	ldd	r22, Y+53	; 0x35
    153a:	7e a9       	ldd	r23, Y+54	; 0x36
    153c:	8f a9       	ldd	r24, Y+55	; 0x37
    153e:	98 ad       	ldd	r25, Y+56	; 0x38
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e2       	ldi	r20, 0x20	; 32
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	98 ab       	std	Y+48, r25	; 0x30
    155e:	8f a7       	std	Y+47, r24	; 0x2f
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <LCD_vidLatch+0x460>
    1562:	89 e1       	ldi	r24, 0x19	; 25
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	9e a7       	std	Y+46, r25	; 0x2e
    1568:	8d a7       	std	Y+45, r24	; 0x2d
    156a:	8d a5       	ldd	r24, Y+45	; 0x2d
    156c:	9e a5       	ldd	r25, Y+46	; 0x2e
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <LCD_vidLatch+0x44e>
    1572:	9e a7       	std	Y+46, r25	; 0x2e
    1574:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1576:	8f a5       	ldd	r24, Y+47	; 0x2f
    1578:	98 a9       	ldd	r25, Y+48	; 0x30
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	98 ab       	std	Y+48, r25	; 0x30
    157e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1580:	8f a5       	ldd	r24, Y+47	; 0x2f
    1582:	98 a9       	ldd	r25, Y+48	; 0x30
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f7       	brne	.-38     	; 0x1562 <LCD_vidLatch+0x442>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <LCD_vidLatch+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	69 a9       	ldd	r22, Y+49	; 0x31
    158c:	7a a9       	ldd	r23, Y+50	; 0x32
    158e:	8b a9       	ldd	r24, Y+51	; 0x33
    1590:	9c a9       	ldd	r25, Y+52	; 0x34
    1592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	98 ab       	std	Y+48, r25	; 0x30
    159c:	8f a7       	std	Y+47, r24	; 0x2f
    159e:	8f a5       	ldd	r24, Y+47	; 0x2f
    15a0:	98 a9       	ldd	r25, Y+48	; 0x30
    15a2:	9c a7       	std	Y+44, r25	; 0x2c
    15a4:	8b a7       	std	Y+43, r24	; 0x2b
    15a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    15a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <LCD_vidLatch+0x48a>
    15ae:	9c a7       	std	Y+44, r25	; 0x2c
    15b0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	62 e0       	ldi	r22, 0x02	; 2
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	a0 e2       	ldi	r26, 0x20	; 32
    15c2:	b1 e4       	ldi	r27, 0x41	; 65
    15c4:	8f a3       	std	Y+39, r24	; 0x27
    15c6:	98 a7       	std	Y+40, r25	; 0x28
    15c8:	a9 a7       	std	Y+41, r26	; 0x29
    15ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15cc:	6f a1       	ldd	r22, Y+39	; 0x27
    15ce:	78 a5       	ldd	r23, Y+40	; 0x28
    15d0:	89 a5       	ldd	r24, Y+41	; 0x29
    15d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	4a e7       	ldi	r20, 0x7A	; 122
    15da:	53 e4       	ldi	r21, 0x43	; 67
    15dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	8b a3       	std	Y+35, r24	; 0x23
    15e6:	9c a3       	std	Y+36, r25	; 0x24
    15e8:	ad a3       	std	Y+37, r26	; 0x25
    15ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15ec:	6b a1       	ldd	r22, Y+35	; 0x23
    15ee:	7c a1       	ldd	r23, Y+36	; 0x24
    15f0:	8d a1       	ldd	r24, Y+37	; 0x25
    15f2:	9e a1       	ldd	r25, Y+38	; 0x26
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e8       	ldi	r20, 0x80	; 128
    15fa:	5f e3       	ldi	r21, 0x3F	; 63
    15fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1600:	88 23       	and	r24, r24
    1602:	2c f4       	brge	.+10     	; 0x160e <LCD_vidLatch+0x4ee>
		__ticks = 1;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9a a3       	std	Y+34, r25	; 0x22
    160a:	89 a3       	std	Y+33, r24	; 0x21
    160c:	3f c0       	rjmp	.+126    	; 0x168c <LCD_vidLatch+0x56c>
	else if (__tmp > 65535)
    160e:	6b a1       	ldd	r22, Y+35	; 0x23
    1610:	7c a1       	ldd	r23, Y+36	; 0x24
    1612:	8d a1       	ldd	r24, Y+37	; 0x25
    1614:	9e a1       	ldd	r25, Y+38	; 0x26
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	3f ef       	ldi	r19, 0xFF	; 255
    161a:	4f e7       	ldi	r20, 0x7F	; 127
    161c:	57 e4       	ldi	r21, 0x47	; 71
    161e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1622:	18 16       	cp	r1, r24
    1624:	4c f5       	brge	.+82     	; 0x1678 <LCD_vidLatch+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1626:	6f a1       	ldd	r22, Y+39	; 0x27
    1628:	78 a5       	ldd	r23, Y+40	; 0x28
    162a:	89 a5       	ldd	r24, Y+41	; 0x29
    162c:	9a a5       	ldd	r25, Y+42	; 0x2a
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e2       	ldi	r20, 0x20	; 32
    1634:	51 e4       	ldi	r21, 0x41	; 65
    1636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9a a3       	std	Y+34, r25	; 0x22
    164c:	89 a3       	std	Y+33, r24	; 0x21
    164e:	0f c0       	rjmp	.+30     	; 0x166e <LCD_vidLatch+0x54e>
    1650:	89 e1       	ldi	r24, 0x19	; 25
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	98 a3       	std	Y+32, r25	; 0x20
    1656:	8f 8f       	std	Y+31, r24	; 0x1f
    1658:	8f 8d       	ldd	r24, Y+31	; 0x1f
    165a:	98 a1       	ldd	r25, Y+32	; 0x20
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <LCD_vidLatch+0x53c>
    1660:	98 a3       	std	Y+32, r25	; 0x20
    1662:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1664:	89 a1       	ldd	r24, Y+33	; 0x21
    1666:	9a a1       	ldd	r25, Y+34	; 0x22
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	9a a3       	std	Y+34, r25	; 0x22
    166c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166e:	89 a1       	ldd	r24, Y+33	; 0x21
    1670:	9a a1       	ldd	r25, Y+34	; 0x22
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	69 f7       	brne	.-38     	; 0x1650 <LCD_vidLatch+0x530>
    1676:	14 c0       	rjmp	.+40     	; 0x16a0 <LCD_vidLatch+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1678:	6b a1       	ldd	r22, Y+35	; 0x23
    167a:	7c a1       	ldd	r23, Y+36	; 0x24
    167c:	8d a1       	ldd	r24, Y+37	; 0x25
    167e:	9e a1       	ldd	r25, Y+38	; 0x26
    1680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	9a a3       	std	Y+34, r25	; 0x22
    168a:	89 a3       	std	Y+33, r24	; 0x21
    168c:	89 a1       	ldd	r24, Y+33	; 0x21
    168e:	9a a1       	ldd	r25, Y+34	; 0x22
    1690:	9e 8f       	std	Y+30, r25	; 0x1e
    1692:	8d 8f       	std	Y+29, r24	; 0x1d
    1694:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1696:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <LCD_vidLatch+0x578>
    169c:	9e 8f       	std	Y+30, r25	; 0x1e
    169e:	8d 8f       	std	Y+29, r24	; 0x1d


	_delay_ms(10);
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>3)&1));
    16a0:	fe 01       	movw	r30, r28
    16a2:	eb 5a       	subi	r30, 0xAB	; 171
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 81       	ld	r24, Z
    16a8:	86 95       	lsr	r24
    16aa:	86 95       	lsr	r24
    16ac:	86 95       	lsr	r24
    16ae:	98 2f       	mov	r25, r24
    16b0:	91 70       	andi	r25, 0x01	; 1
    16b2:	82 e0       	ldi	r24, 0x02	; 2
    16b4:	67 e0       	ldi	r22, 0x07	; 7
    16b6:	49 2f       	mov	r20, r25
    16b8:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>2)&1));
    16bc:	fe 01       	movw	r30, r28
    16be:	eb 5a       	subi	r30, 0xAB	; 171
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	80 81       	ld	r24, Z
    16c4:	86 95       	lsr	r24
    16c6:	86 95       	lsr	r24
    16c8:	98 2f       	mov	r25, r24
    16ca:	91 70       	andi	r25, 0x01	; 1
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	66 e0       	ldi	r22, 0x06	; 6
    16d0:	49 2f       	mov	r20, r25
    16d2:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
    16d6:	fe 01       	movw	r30, r28
    16d8:	eb 5a       	subi	r30, 0xAB	; 171
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	80 81       	ld	r24, Z
    16de:	86 95       	lsr	r24
    16e0:	98 2f       	mov	r25, r24
    16e2:	91 70       	andi	r25, 0x01	; 1
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	65 e0       	ldi	r22, 0x05	; 5
    16e8:	49 2f       	mov	r20, r25
    16ea:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
    16ee:	fe 01       	movw	r30, r28
    16f0:	eb 5a       	subi	r30, 0xAB	; 171
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	80 81       	ld	r24, Z
    16f6:	98 2f       	mov	r25, r24
    16f8:	91 70       	andi	r25, 0x01	; 1
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	64 e0       	ldi	r22, 0x04	; 4
    16fe:	49 2f       	mov	r20, r25
    1700:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	62 e0       	ldi	r22, 0x02	; 2
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a0 e2       	ldi	r26, 0x20	; 32
    1714:	b1 e4       	ldi	r27, 0x41	; 65
    1716:	89 8f       	std	Y+25, r24	; 0x19
    1718:	9a 8f       	std	Y+26, r25	; 0x1a
    171a:	ab 8f       	std	Y+27, r26	; 0x1b
    171c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171e:	69 8d       	ldd	r22, Y+25	; 0x19
    1720:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1722:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1724:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	4a e7       	ldi	r20, 0x7A	; 122
    172c:	53 e4       	ldi	r21, 0x43	; 67
    172e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	8d 8b       	std	Y+21, r24	; 0x15
    1738:	9e 8b       	std	Y+22, r25	; 0x16
    173a:	af 8b       	std	Y+23, r26	; 0x17
    173c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    173e:	6d 89       	ldd	r22, Y+21	; 0x15
    1740:	7e 89       	ldd	r23, Y+22	; 0x16
    1742:	8f 89       	ldd	r24, Y+23	; 0x17
    1744:	98 8d       	ldd	r25, Y+24	; 0x18
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e8       	ldi	r20, 0x80	; 128
    174c:	5f e3       	ldi	r21, 0x3F	; 63
    174e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1752:	88 23       	and	r24, r24
    1754:	2c f4       	brge	.+10     	; 0x1760 <LCD_vidLatch+0x640>
		__ticks = 1;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	9c 8b       	std	Y+20, r25	; 0x14
    175c:	8b 8b       	std	Y+19, r24	; 0x13
    175e:	3f c0       	rjmp	.+126    	; 0x17de <LCD_vidLatch+0x6be>
	else if (__tmp > 65535)
    1760:	6d 89       	ldd	r22, Y+21	; 0x15
    1762:	7e 89       	ldd	r23, Y+22	; 0x16
    1764:	8f 89       	ldd	r24, Y+23	; 0x17
    1766:	98 8d       	ldd	r25, Y+24	; 0x18
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	3f ef       	ldi	r19, 0xFF	; 255
    176c:	4f e7       	ldi	r20, 0x7F	; 127
    176e:	57 e4       	ldi	r21, 0x47	; 71
    1770:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1774:	18 16       	cp	r1, r24
    1776:	4c f5       	brge	.+82     	; 0x17ca <LCD_vidLatch+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1778:	69 8d       	ldd	r22, Y+25	; 0x19
    177a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    177c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    177e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e2       	ldi	r20, 0x20	; 32
    1786:	51 e4       	ldi	r21, 0x41	; 65
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	bc 01       	movw	r22, r24
    1792:	cd 01       	movw	r24, r26
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9c 8b       	std	Y+20, r25	; 0x14
    179e:	8b 8b       	std	Y+19, r24	; 0x13
    17a0:	0f c0       	rjmp	.+30     	; 0x17c0 <LCD_vidLatch+0x6a0>
    17a2:	89 e1       	ldi	r24, 0x19	; 25
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	9a 8b       	std	Y+18, r25	; 0x12
    17a8:	89 8b       	std	Y+17, r24	; 0x11
    17aa:	89 89       	ldd	r24, Y+17	; 0x11
    17ac:	9a 89       	ldd	r25, Y+18	; 0x12
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <LCD_vidLatch+0x68e>
    17b2:	9a 8b       	std	Y+18, r25	; 0x12
    17b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b6:	8b 89       	ldd	r24, Y+19	; 0x13
    17b8:	9c 89       	ldd	r25, Y+20	; 0x14
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	9c 8b       	std	Y+20, r25	; 0x14
    17be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c0:	8b 89       	ldd	r24, Y+19	; 0x13
    17c2:	9c 89       	ldd	r25, Y+20	; 0x14
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	69 f7       	brne	.-38     	; 0x17a2 <LCD_vidLatch+0x682>
    17c8:	14 c0       	rjmp	.+40     	; 0x17f2 <LCD_vidLatch+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ca:	6d 89       	ldd	r22, Y+21	; 0x15
    17cc:	7e 89       	ldd	r23, Y+22	; 0x16
    17ce:	8f 89       	ldd	r24, Y+23	; 0x17
    17d0:	98 8d       	ldd	r25, Y+24	; 0x18
    17d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	9c 8b       	std	Y+20, r25	; 0x14
    17dc:	8b 8b       	std	Y+19, r24	; 0x13
    17de:	8b 89       	ldd	r24, Y+19	; 0x13
    17e0:	9c 89       	ldd	r25, Y+20	; 0x14
    17e2:	98 8b       	std	Y+16, r25	; 0x10
    17e4:	8f 87       	std	Y+15, r24	; 0x0f
    17e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e8:	98 89       	ldd	r25, Y+16	; 0x10
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <LCD_vidLatch+0x6ca>
    17ee:	98 8b       	std	Y+16, r25	; 0x10
    17f0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	62 e0       	ldi	r22, 0x02	; 2
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	a0 e2       	ldi	r26, 0x20	; 32
    1802:	b1 e4       	ldi	r27, 0x41	; 65
    1804:	8b 87       	std	Y+11, r24	; 0x0b
    1806:	9c 87       	std	Y+12, r25	; 0x0c
    1808:	ad 87       	std	Y+13, r26	; 0x0d
    180a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180c:	6b 85       	ldd	r22, Y+11	; 0x0b
    180e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1810:	8d 85       	ldd	r24, Y+13	; 0x0d
    1812:	9e 85       	ldd	r25, Y+14	; 0x0e
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	4a e7       	ldi	r20, 0x7A	; 122
    181a:	53 e4       	ldi	r21, 0x43	; 67
    181c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	8f 83       	std	Y+7, r24	; 0x07
    1826:	98 87       	std	Y+8, r25	; 0x08
    1828:	a9 87       	std	Y+9, r26	; 0x09
    182a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    182c:	6f 81       	ldd	r22, Y+7	; 0x07
    182e:	78 85       	ldd	r23, Y+8	; 0x08
    1830:	89 85       	ldd	r24, Y+9	; 0x09
    1832:	9a 85       	ldd	r25, Y+10	; 0x0a
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e8       	ldi	r20, 0x80	; 128
    183a:	5f e3       	ldi	r21, 0x3F	; 63
    183c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1840:	88 23       	and	r24, r24
    1842:	2c f4       	brge	.+10     	; 0x184e <LCD_vidLatch+0x72e>
		__ticks = 1;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	9e 83       	std	Y+6, r25	; 0x06
    184a:	8d 83       	std	Y+5, r24	; 0x05
    184c:	3f c0       	rjmp	.+126    	; 0x18cc <LCD_vidLatch+0x7ac>
	else if (__tmp > 65535)
    184e:	6f 81       	ldd	r22, Y+7	; 0x07
    1850:	78 85       	ldd	r23, Y+8	; 0x08
    1852:	89 85       	ldd	r24, Y+9	; 0x09
    1854:	9a 85       	ldd	r25, Y+10	; 0x0a
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	3f ef       	ldi	r19, 0xFF	; 255
    185a:	4f e7       	ldi	r20, 0x7F	; 127
    185c:	57 e4       	ldi	r21, 0x47	; 71
    185e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1862:	18 16       	cp	r1, r24
    1864:	4c f5       	brge	.+82     	; 0x18b8 <LCD_vidLatch+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1866:	6b 85       	ldd	r22, Y+11	; 0x0b
    1868:	7c 85       	ldd	r23, Y+12	; 0x0c
    186a:	8d 85       	ldd	r24, Y+13	; 0x0d
    186c:	9e 85       	ldd	r25, Y+14	; 0x0e
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e2       	ldi	r20, 0x20	; 32
    1874:	51 e4       	ldi	r21, 0x41	; 65
    1876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
    188e:	0f c0       	rjmp	.+30     	; 0x18ae <LCD_vidLatch+0x78e>
    1890:	89 e1       	ldi	r24, 0x19	; 25
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9c 83       	std	Y+4, r25	; 0x04
    1896:	8b 83       	std	Y+3, r24	; 0x03
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <LCD_vidLatch+0x77c>
    18a0:	9c 83       	std	Y+4, r25	; 0x04
    18a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a4:	8d 81       	ldd	r24, Y+5	; 0x05
    18a6:	9e 81       	ldd	r25, Y+6	; 0x06
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	9e 83       	std	Y+6, r25	; 0x06
    18ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ae:	8d 81       	ldd	r24, Y+5	; 0x05
    18b0:	9e 81       	ldd	r25, Y+6	; 0x06
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	69 f7       	brne	.-38     	; 0x1890 <LCD_vidLatch+0x770>
    18b6:	14 c0       	rjmp	.+40     	; 0x18e0 <LCD_vidLatch+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ba:	78 85       	ldd	r23, Y+8	; 0x08
    18bc:	89 85       	ldd	r24, Y+9	; 0x09
    18be:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	9e 83       	std	Y+6, r25	; 0x06
    18ca:	8d 83       	std	Y+5, r24	; 0x05
    18cc:	8d 81       	ldd	r24, Y+5	; 0x05
    18ce:	9e 81       	ldd	r25, Y+6	; 0x06
    18d0:	9a 83       	std	Y+2, r25	; 0x02
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	f1 f7       	brne	.-4      	; 0x18d8 <LCD_vidLatch+0x7b8>
    18dc:	9a 83       	std	Y+2, r25	; 0x02
    18de:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    18e0:	cb 5a       	subi	r28, 0xAB	; 171
    18e2:	df 4f       	sbci	r29, 0xFF	; 255
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	08 95       	ret

000018f8 <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	ab 97       	sbiw	r28, 0x2b	; 43
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	8b a7       	std	Y+43, r24	; 0x2b
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	61 e0       	ldi	r22, 0x01	; 1
    191c:	40 e0       	ldi	r20, 0x00	; 0
    191e:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	62 e0       	ldi	r22, 0x02	; 2
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    192c:	8b a5       	ldd	r24, Y+43	; 0x2b
    192e:	98 2f       	mov	r25, r24
    1930:	99 1f       	adc	r25, r25
    1932:	99 27       	eor	r25, r25
    1934:	99 1f       	adc	r25, r25
    1936:	82 e0       	ldi	r24, 0x02	; 2
    1938:	67 e0       	ldi	r22, 0x07	; 7
    193a:	49 2f       	mov	r20, r25
    193c:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    1940:	8b a5       	ldd	r24, Y+43	; 0x2b
    1942:	82 95       	swap	r24
    1944:	86 95       	lsr	r24
    1946:	86 95       	lsr	r24
    1948:	83 70       	andi	r24, 0x03	; 3
    194a:	98 2f       	mov	r25, r24
    194c:	91 70       	andi	r25, 0x01	; 1
    194e:	82 e0       	ldi	r24, 0x02	; 2
    1950:	66 e0       	ldi	r22, 0x06	; 6
    1952:	49 2f       	mov	r20, r25
    1954:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    1958:	8b a5       	ldd	r24, Y+43	; 0x2b
    195a:	82 95       	swap	r24
    195c:	86 95       	lsr	r24
    195e:	87 70       	andi	r24, 0x07	; 7
    1960:	98 2f       	mov	r25, r24
    1962:	91 70       	andi	r25, 0x01	; 1
    1964:	82 e0       	ldi	r24, 0x02	; 2
    1966:	65 e0       	ldi	r22, 0x05	; 5
    1968:	49 2f       	mov	r20, r25
    196a:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    196e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1970:	82 95       	swap	r24
    1972:	8f 70       	andi	r24, 0x0F	; 15
    1974:	98 2f       	mov	r25, r24
    1976:	91 70       	andi	r25, 0x01	; 1
    1978:	82 e0       	ldi	r24, 0x02	; 2
    197a:	64 e0       	ldi	r22, 0x04	; 4
    197c:	49 2f       	mov	r20, r25
    197e:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));

#elif LCD_MODE == FOUR_BIT

	if(Copy_u8Command == 0x28)
    1982:	8b a5       	ldd	r24, Y+43	; 0x2b
    1984:	88 32       	cpi	r24, 0x28	; 40
    1986:	09 f0       	breq	.+2      	; 0x198a <LCD_invidSendCommend+0x92>
    1988:	a7 c0       	rjmp	.+334    	; 0x1ad8 <LCD_invidSendCommend+0x1e0>
	{
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	62 e0       	ldi	r22, 0x02	; 2
    198e:	41 e0       	ldi	r20, 0x01	; 1
    1990:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a0 e2       	ldi	r26, 0x20	; 32
    199a:	b1 e4       	ldi	r27, 0x41	; 65
    199c:	8f a3       	std	Y+39, r24	; 0x27
    199e:	98 a7       	std	Y+40, r25	; 0x28
    19a0:	a9 a7       	std	Y+41, r26	; 0x29
    19a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a4:	6f a1       	ldd	r22, Y+39	; 0x27
    19a6:	78 a5       	ldd	r23, Y+40	; 0x28
    19a8:	89 a5       	ldd	r24, Y+41	; 0x29
    19aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	4a e7       	ldi	r20, 0x7A	; 122
    19b2:	53 e4       	ldi	r21, 0x43	; 67
    19b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	8b a3       	std	Y+35, r24	; 0x23
    19be:	9c a3       	std	Y+36, r25	; 0x24
    19c0:	ad a3       	std	Y+37, r26	; 0x25
    19c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19c4:	6b a1       	ldd	r22, Y+35	; 0x23
    19c6:	7c a1       	ldd	r23, Y+36	; 0x24
    19c8:	8d a1       	ldd	r24, Y+37	; 0x25
    19ca:	9e a1       	ldd	r25, Y+38	; 0x26
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e8       	ldi	r20, 0x80	; 128
    19d2:	5f e3       	ldi	r21, 0x3F	; 63
    19d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d8:	88 23       	and	r24, r24
    19da:	2c f4       	brge	.+10     	; 0x19e6 <LCD_invidSendCommend+0xee>
		__ticks = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	9a a3       	std	Y+34, r25	; 0x22
    19e2:	89 a3       	std	Y+33, r24	; 0x21
    19e4:	3f c0       	rjmp	.+126    	; 0x1a64 <LCD_invidSendCommend+0x16c>
	else if (__tmp > 65535)
    19e6:	6b a1       	ldd	r22, Y+35	; 0x23
    19e8:	7c a1       	ldd	r23, Y+36	; 0x24
    19ea:	8d a1       	ldd	r24, Y+37	; 0x25
    19ec:	9e a1       	ldd	r25, Y+38	; 0x26
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	3f ef       	ldi	r19, 0xFF	; 255
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	57 e4       	ldi	r21, 0x47	; 71
    19f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19fa:	18 16       	cp	r1, r24
    19fc:	4c f5       	brge	.+82     	; 0x1a50 <LCD_invidSendCommend+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1a00:	78 a5       	ldd	r23, Y+40	; 0x28
    1a02:	89 a5       	ldd	r24, Y+41	; 0x29
    1a04:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e2       	ldi	r20, 0x20	; 32
    1a0c:	51 e4       	ldi	r21, 0x41	; 65
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	9a a3       	std	Y+34, r25	; 0x22
    1a24:	89 a3       	std	Y+33, r24	; 0x21
    1a26:	0f c0       	rjmp	.+30     	; 0x1a46 <LCD_invidSendCommend+0x14e>
    1a28:	89 e1       	ldi	r24, 0x19	; 25
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	98 a3       	std	Y+32, r25	; 0x20
    1a2e:	8f 8f       	std	Y+31, r24	; 0x1f
    1a30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a32:	98 a1       	ldd	r25, Y+32	; 0x20
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_invidSendCommend+0x13c>
    1a38:	98 a3       	std	Y+32, r25	; 0x20
    1a3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	9a a3       	std	Y+34, r25	; 0x22
    1a44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a46:	89 a1       	ldd	r24, Y+33	; 0x21
    1a48:	9a a1       	ldd	r25, Y+34	; 0x22
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	69 f7       	brne	.-38     	; 0x1a28 <LCD_invidSendCommend+0x130>
    1a4e:	14 c0       	rjmp	.+40     	; 0x1a78 <LCD_invidSendCommend+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a50:	6b a1       	ldd	r22, Y+35	; 0x23
    1a52:	7c a1       	ldd	r23, Y+36	; 0x24
    1a54:	8d a1       	ldd	r24, Y+37	; 0x25
    1a56:	9e a1       	ldd	r25, Y+38	; 0x26
    1a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	9a a3       	std	Y+34, r25	; 0x22
    1a62:	89 a3       	std	Y+33, r24	; 0x21
    1a64:	89 a1       	ldd	r24, Y+33	; 0x21
    1a66:	9a a1       	ldd	r25, Y+34	; 0x22
    1a68:	9e 8f       	std	Y+30, r25	; 0x1e
    1a6a:	8d 8f       	std	Y+29, r24	; 0x1d
    1a6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCD_invidSendCommend+0x178>
    1a74:	9e 8f       	std	Y+30, r25	; 0x1e
    1a76:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	62 e0       	ldi	r22, 0x02	; 2
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>

		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    1a82:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a84:	98 2f       	mov	r25, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	99 27       	eor	r25, r25
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	67 e0       	ldi	r22, 0x07	; 7
    1a90:	49 2f       	mov	r20, r25
    1a92:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    1a96:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a98:	82 95       	swap	r24
    1a9a:	86 95       	lsr	r24
    1a9c:	86 95       	lsr	r24
    1a9e:	83 70       	andi	r24, 0x03	; 3
    1aa0:	98 2f       	mov	r25, r24
    1aa2:	91 70       	andi	r25, 0x01	; 1
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	66 e0       	ldi	r22, 0x06	; 6
    1aa8:	49 2f       	mov	r20, r25
    1aaa:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    1aae:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ab0:	82 95       	swap	r24
    1ab2:	86 95       	lsr	r24
    1ab4:	87 70       	andi	r24, 0x07	; 7
    1ab6:	98 2f       	mov	r25, r24
    1ab8:	91 70       	andi	r25, 0x01	; 1
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	65 e0       	ldi	r22, 0x05	; 5
    1abe:	49 2f       	mov	r20, r25
    1ac0:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    1ac4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ac6:	82 95       	swap	r24
    1ac8:	8f 70       	andi	r24, 0x0F	; 15
    1aca:	98 2f       	mov	r25, r24
    1acc:	91 70       	andi	r25, 0x01	; 1
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	64 e0       	ldi	r22, 0x04	; 4
    1ad2:	49 2f       	mov	r20, r25
    1ad4:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	}
	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	62 e0       	ldi	r22, 0x02	; 2
    1adc:	41 e0       	ldi	r20, 0x01	; 1
    1ade:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a0 e2       	ldi	r26, 0x20	; 32
    1ae8:	b1 e4       	ldi	r27, 0x41	; 65
    1aea:	89 8f       	std	Y+25, r24	; 0x19
    1aec:	9a 8f       	std	Y+26, r25	; 0x1a
    1aee:	ab 8f       	std	Y+27, r26	; 0x1b
    1af0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af2:	69 8d       	ldd	r22, Y+25	; 0x19
    1af4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	4a e7       	ldi	r20, 0x7A	; 122
    1b00:	53 e4       	ldi	r21, 0x43	; 67
    1b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	8d 8b       	std	Y+21, r24	; 0x15
    1b0c:	9e 8b       	std	Y+22, r25	; 0x16
    1b0e:	af 8b       	std	Y+23, r26	; 0x17
    1b10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b12:	6d 89       	ldd	r22, Y+21	; 0x15
    1b14:	7e 89       	ldd	r23, Y+22	; 0x16
    1b16:	8f 89       	ldd	r24, Y+23	; 0x17
    1b18:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e8       	ldi	r20, 0x80	; 128
    1b20:	5f e3       	ldi	r21, 0x3F	; 63
    1b22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b26:	88 23       	and	r24, r24
    1b28:	2c f4       	brge	.+10     	; 0x1b34 <LCD_invidSendCommend+0x23c>
		__ticks = 1;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9c 8b       	std	Y+20, r25	; 0x14
    1b30:	8b 8b       	std	Y+19, r24	; 0x13
    1b32:	3f c0       	rjmp	.+126    	; 0x1bb2 <LCD_invidSendCommend+0x2ba>
	else if (__tmp > 65535)
    1b34:	6d 89       	ldd	r22, Y+21	; 0x15
    1b36:	7e 89       	ldd	r23, Y+22	; 0x16
    1b38:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	3f ef       	ldi	r19, 0xFF	; 255
    1b40:	4f e7       	ldi	r20, 0x7F	; 127
    1b42:	57 e4       	ldi	r21, 0x47	; 71
    1b44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b48:	18 16       	cp	r1, r24
    1b4a:	4c f5       	brge	.+82     	; 0x1b9e <LCD_invidSendCommend+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e2       	ldi	r20, 0x20	; 32
    1b5a:	51 e4       	ldi	r21, 0x41	; 65
    1b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	9c 8b       	std	Y+20, r25	; 0x14
    1b72:	8b 8b       	std	Y+19, r24	; 0x13
    1b74:	0f c0       	rjmp	.+30     	; 0x1b94 <LCD_invidSendCommend+0x29c>
    1b76:	89 e1       	ldi	r24, 0x19	; 25
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9a 8b       	std	Y+18, r25	; 0x12
    1b7c:	89 8b       	std	Y+17, r24	; 0x11
    1b7e:	89 89       	ldd	r24, Y+17	; 0x11
    1b80:	9a 89       	ldd	r25, Y+18	; 0x12
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <LCD_invidSendCommend+0x28a>
    1b86:	9a 8b       	std	Y+18, r25	; 0x12
    1b88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	9c 8b       	std	Y+20, r25	; 0x14
    1b92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b94:	8b 89       	ldd	r24, Y+19	; 0x13
    1b96:	9c 89       	ldd	r25, Y+20	; 0x14
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	69 f7       	brne	.-38     	; 0x1b76 <LCD_invidSendCommend+0x27e>
    1b9c:	14 c0       	rjmp	.+40     	; 0x1bc6 <LCD_invidSendCommend+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9c 8b       	std	Y+20, r25	; 0x14
    1bb0:	8b 8b       	std	Y+19, r24	; 0x13
    1bb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb6:	98 8b       	std	Y+16, r25	; 0x10
    1bb8:	8f 87       	std	Y+15, r24	; 0x0f
    1bba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbc:	98 89       	ldd	r25, Y+16	; 0x10
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <LCD_invidSendCommend+0x2c6>
    1bc2:	98 8b       	std	Y+16, r25	; 0x10
    1bc4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	62 e0       	ldi	r22, 0x02	; 2
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>3)&1));
    1bd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bd2:	86 95       	lsr	r24
    1bd4:	86 95       	lsr	r24
    1bd6:	86 95       	lsr	r24
    1bd8:	98 2f       	mov	r25, r24
    1bda:	91 70       	andi	r25, 0x01	; 1
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	67 e0       	ldi	r22, 0x07	; 7
    1be0:	49 2f       	mov	r20, r25
    1be2:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
    1be6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be8:	86 95       	lsr	r24
    1bea:	86 95       	lsr	r24
    1bec:	98 2f       	mov	r25, r24
    1bee:	91 70       	andi	r25, 0x01	; 1
    1bf0:	82 e0       	ldi	r24, 0x02	; 2
    1bf2:	66 e0       	ldi	r22, 0x06	; 6
    1bf4:	49 2f       	mov	r20, r25
    1bf6:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
    1bfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bfc:	86 95       	lsr	r24
    1bfe:	98 2f       	mov	r25, r24
    1c00:	91 70       	andi	r25, 0x01	; 1
    1c02:	82 e0       	ldi	r24, 0x02	; 2
    1c04:	65 e0       	ldi	r22, 0x05	; 5
    1c06:	49 2f       	mov	r20, r25
    1c08:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));
    1c0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c0e:	98 2f       	mov	r25, r24
    1c10:	91 70       	andi	r25, 0x01	; 1
    1c12:	82 e0       	ldi	r24, 0x02	; 2
    1c14:	64 e0       	ldi	r22, 0x04	; 4
    1c16:	49 2f       	mov	r20, r25
    1c18:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	62 e0       	ldi	r22, 0x02	; 2
    1c20:	41 e0       	ldi	r20, 0x01	; 1
    1c22:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a0 e2       	ldi	r26, 0x20	; 32
    1c2c:	b1 e4       	ldi	r27, 0x41	; 65
    1c2e:	8b 87       	std	Y+11, r24	; 0x0b
    1c30:	9c 87       	std	Y+12, r25	; 0x0c
    1c32:	ad 87       	std	Y+13, r26	; 0x0d
    1c34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	4a e7       	ldi	r20, 0x7A	; 122
    1c44:	53 e4       	ldi	r21, 0x43	; 67
    1c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	8f 83       	std	Y+7, r24	; 0x07
    1c50:	98 87       	std	Y+8, r25	; 0x08
    1c52:	a9 87       	std	Y+9, r26	; 0x09
    1c54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c56:	6f 81       	ldd	r22, Y+7	; 0x07
    1c58:	78 85       	ldd	r23, Y+8	; 0x08
    1c5a:	89 85       	ldd	r24, Y+9	; 0x09
    1c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e8       	ldi	r20, 0x80	; 128
    1c64:	5f e3       	ldi	r21, 0x3F	; 63
    1c66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c6a:	88 23       	and	r24, r24
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <LCD_invidSendCommend+0x380>
		__ticks = 1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9e 83       	std	Y+6, r25	; 0x06
    1c74:	8d 83       	std	Y+5, r24	; 0x05
    1c76:	3f c0       	rjmp	.+126    	; 0x1cf6 <LCD_invidSendCommend+0x3fe>
	else if (__tmp > 65535)
    1c78:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7a:	78 85       	ldd	r23, Y+8	; 0x08
    1c7c:	89 85       	ldd	r24, Y+9	; 0x09
    1c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	3f ef       	ldi	r19, 0xFF	; 255
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	57 e4       	ldi	r21, 0x47	; 71
    1c88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	4c f5       	brge	.+82     	; 0x1ce2 <LCD_invidSendCommend+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e2       	ldi	r20, 0x20	; 32
    1c9e:	51 e4       	ldi	r21, 0x41	; 65
    1ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9e 83       	std	Y+6, r25	; 0x06
    1cb6:	8d 83       	std	Y+5, r24	; 0x05
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <LCD_invidSendCommend+0x3e0>
    1cba:	89 e1       	ldi	r24, 0x19	; 25
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9c 83       	std	Y+4, r25	; 0x04
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <LCD_invidSendCommend+0x3ce>
    1cca:	9c 83       	std	Y+4, r25	; 0x04
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	9e 83       	std	Y+6, r25	; 0x06
    1cd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	69 f7       	brne	.-38     	; 0x1cba <LCD_invidSendCommend+0x3c2>
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <LCD_invidSendCommend+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce4:	78 85       	ldd	r23, Y+8	; 0x08
    1ce6:	89 85       	ldd	r24, Y+9	; 0x09
    1ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9e 83       	std	Y+6, r25	; 0x06
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	9a 83       	std	Y+2, r25	; 0x02
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <LCD_invidSendCommend+0x40a>
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	62 e0       	ldi	r22, 0x02	; 2
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <DIO_enuSetPinValue>
}
    1d14:	ab 96       	adiw	r28, 0x2b	; 43
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <LCD_Clear>:
void LCD_Clear(){
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62



		LCD_enuSendCommand(0x01);
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCD_enuSendCommand>
		LCD_enuSendCommand(0x80);
    1d34:	80 e8       	ldi	r24, 0x80	; 128
    1d36:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCD_enuSendCommand>





}
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <LCD_GoTo>:
ES_t LCD_GoTo(u8 Copy_u8X , u8 Copy_u8Y){
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <LCD_GoTo+0x6>
    1d46:	0f 92       	push	r0
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	8a 83       	std	Y+2, r24	; 0x02
    1d4e:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    1d50:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8X== 0)
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	88 23       	and	r24, r24
    1d56:	31 f4       	brne	.+12     	; 0x1d64 <LCD_GoTo+0x24>
		{
			Local_enuErrorState = LCD_enuSendCommand((0x80)+Copy_u8Y);
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	80 58       	subi	r24, 0x80	; 128
    1d5c:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCD_enuSendCommand>
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	0b c0       	rjmp	.+22     	; 0x1d7a <LCD_GoTo+0x3a>
		}
		else if(Copy_u8X== 1)
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	81 30       	cpi	r24, 0x01	; 1
    1d68:	31 f4       	brne	.+12     	; 0x1d76 <LCD_GoTo+0x36>
		{
			Local_enuErrorState = LCD_enuSendCommand((0xC0)+Copy_u8Y);
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	80 54       	subi	r24, 0x40	; 64
    1d6e:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCD_enuSendCommand>
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <LCD_GoTo+0x3a>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1d76:	83 e0       	ldi	r24, 0x03	; 3
    1d78:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorState;
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01





}
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <LCD_enuSendString>:


ES_t LCD_enuSendString(char* Copy_pcString)
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <LCD_enuSendString+0x6>
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <LCD_enuSendString+0x8>
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	9c 83       	std	Y+4, r25	; 0x04
    1d96:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1d98:	1a 82       	std	Y+2, r1	; 0x02
if(Copy_pcString != NULL)
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	e9 f0       	breq	.+58     	; 0x1ddc <LCD_enuSendString+0x54>
{
	u8 Local_u8Iterator=0;
    1da2:	19 82       	std	Y+1, r1	; 0x01
    1da4:	0f c0       	rjmp	.+30     	; 0x1dc4 <LCD_enuSendString+0x3c>
	while(Copy_pcString[Local_u8Iterator]!='\0')
	{
		Local_enuErrorState = LCD_enuDisplayChar(Copy_pcString[Local_u8Iterator]);
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	9c 81       	ldd	r25, Y+4	; 0x04
    1db0:	fc 01       	movw	r30, r24
    1db2:	e2 0f       	add	r30, r18
    1db4:	f3 1f       	adc	r31, r19
    1db6:	80 81       	ld	r24, Z
    1db8:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>
    1dbc:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Iterator ++;
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	8f 5f       	subi	r24, 0xFF	; 255
    1dc2:	89 83       	std	Y+1, r24	; 0x01
{
	ES_t Local_enuErrorState = ES_NOK;
if(Copy_pcString != NULL)
{
	u8 Local_u8Iterator=0;
	while(Copy_pcString[Local_u8Iterator]!='\0')
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	fc 01       	movw	r30, r24
    1dd0:	e2 0f       	add	r30, r18
    1dd2:	f3 1f       	adc	r31, r19
    1dd4:	80 81       	ld	r24, Z
    1dd6:	88 23       	and	r24, r24
    1dd8:	31 f7       	brne	.-52     	; 0x1da6 <LCD_enuSendString+0x1e>
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <LCD_enuSendString+0x58>
	}

}
else
{
	Local_enuErrorState=ES_NULL_POINTER;
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	8a 83       	std	Y+2, r24	; 0x02
}

	return Local_enuErrorState;
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <EXTI_intialiation>:

void (*pfunINTFun0)(void)=NULL;
void (*pfunINTFun1)(void)=NULL;
void (*pfunINTFun2)(void)=NULL;

ES_t EXTI_intialiation(){
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	0f 92       	push	r0
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorstate = ES_NOK;
    1dfa:	19 82       	std	Y+1, r1	; 0x01

	MCUCR &=~(15<<0); // CLEAR BIT 0 1 2 3 (INT0 & INT1)
    1dfc:	a5 e5       	ldi	r26, 0x55	; 85
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e5 e5       	ldi	r30, 0x55	; 85
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	80 7f       	andi	r24, 0xF0	; 240
    1e08:	8c 93       	st	X, r24
#elif  INT0_MODE == LOW_LEVEL
	MCUCR|=LOW_LEVEL;
#elif  INT0_MODE == RISING_EDGE
	MCUCR|=RISING_EDGE;
#elif  INT0_MODE == ANY_LOGIC
	MCUCR|=ANY_LOGIC;
    1e0a:	a5 e5       	ldi	r26, 0x55	; 85
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e5 e5       	ldi	r30, 0x55	; 85
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	81 60       	ori	r24, 0x01	; 1
    1e16:	8c 93       	st	X, r24
#elif  INT1_MODE == LOW_LEVEL
	MCUCR|=(LOW_LEVEL<<2);
#elif  INT1_MODE == RISING_EDGE
	MCUCR|=(RISING_EDGE<<2);
#elif  INT1_MODE == ANY_LOGIC
	MCUCR|=(ANY_LOGIC<<2);
    1e18:	a5 e5       	ldi	r26, 0x55	; 85
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e5 e5       	ldi	r30, 0x55	; 85
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	84 60       	ori	r24, 0x04	; 4
    1e24:	8c 93       	st	X, r24
#endif


#if INT0_STATE == ACTIVE
	GICR |=(1<<6);
    1e26:	ab e5       	ldi	r26, 0x5B	; 91
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	eb e5       	ldi	r30, 0x5B	; 91
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	80 64       	ori	r24, 0x40	; 64
    1e32:	8c 93       	st	X, r24
#endif



#if INT1_STATE == ACTIVE
	GICR |=(1<<7);
    1e34:	ab e5       	ldi	r26, 0x5B	; 91
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	eb e5       	ldi	r30, 0x5B	; 91
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	80 68       	ori	r24, 0x80	; 128
    1e40:	8c 93       	st	X, r24
#elif  INT1_STATE == DEACTIVE
	GICR &=~(1<<7);
#endif

#if INT2_STATE == ACTIVE
	GICR |=(1<<5);
    1e42:	ab e5       	ldi	r26, 0x5B	; 91
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	eb e5       	ldi	r30, 0x5B	; 91
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	80 62       	ori	r24, 0x20	; 32
    1e4e:	8c 93       	st	X, r24
#elif  INT2_STATE == DEACTIVE
	GICR &=~(1<<5);
#endif

	GIFR|=(7<<5);     //CLEAR FLAGS IN BIT 5,6,7
    1e50:	aa e5       	ldi	r26, 0x5A	; 90
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	ea e5       	ldi	r30, 0x5A	; 90
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	80 6e       	ori	r24, 0xE0	; 224
    1e5c:	8c 93       	st	X, r24


		return Local_enuErrorstate;
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01


}
    1e60:	0f 90       	pop	r0
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <EXTI_Enable_INT>:
ES_t  EXTI_Enable_INT(u8 Copy_u8EXTI_ID){
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <EXTI_Enable_INT+0x6>
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1e74:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8EXTI_ID < 4)
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	84 30       	cpi	r24, 0x04	; 4
    1e7a:	68 f5       	brcc	.+90     	; 0x1ed6 <EXTI_Enable_INT+0x6e>
		{
			if (Copy_u8EXTI_ID ==0)
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	88 23       	and	r24, r24
    1e80:	41 f4       	brne	.+16     	; 0x1e92 <EXTI_Enable_INT+0x2a>
			{

				GICR |= (1<<6);
    1e82:	ab e5       	ldi	r26, 0x5B	; 91
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	eb e5       	ldi	r30, 0x5B	; 91
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	80 64       	ori	r24, 0x40	; 64
    1e8e:	8c 93       	st	X, r24
    1e90:	20 c0       	rjmp	.+64     	; 0x1ed2 <EXTI_Enable_INT+0x6a>
			}
			else if (Copy_u8EXTI_ID ==1)
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	41 f4       	brne	.+16     	; 0x1ea8 <EXTI_Enable_INT+0x40>
			{
				GICR |= (1<<7);
    1e98:	ab e5       	ldi	r26, 0x5B	; 91
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	eb e5       	ldi	r30, 0x5B	; 91
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	80 68       	ori	r24, 0x80	; 128
    1ea4:	8c 93       	st	X, r24
    1ea6:	15 c0       	rjmp	.+42     	; 0x1ed2 <EXTI_Enable_INT+0x6a>
			}
			else if (Copy_u8EXTI_ID ==2)
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	82 30       	cpi	r24, 0x02	; 2
    1eac:	41 f4       	brne	.+16     	; 0x1ebe <EXTI_Enable_INT+0x56>
			{
				GICR |= (1<<5);
    1eae:	ab e5       	ldi	r26, 0x5B	; 91
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	eb e5       	ldi	r30, 0x5B	; 91
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	80 62       	ori	r24, 0x20	; 32
    1eba:	8c 93       	st	X, r24
    1ebc:	0a c0       	rjmp	.+20     	; 0x1ed2 <EXTI_Enable_INT+0x6a>
			}
			else if(Copy_u8EXTI_ID==GLOBAL){
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	83 30       	cpi	r24, 0x03	; 3
    1ec2:	39 f4       	brne	.+14     	; 0x1ed2 <EXTI_Enable_INT+0x6a>
			           SREG|= (1<<7);
    1ec4:	af e5       	ldi	r26, 0x5F	; 95
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	ef e5       	ldi	r30, 0x5F	; 95
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	80 68       	ori	r24, 0x80	; 128
    1ed0:	8c 93       	st	X, r24

	         }
			 Local_enuErrorstate = ES_OK;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorstate;
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <EXTI_Disable_INT>:
ES_t  EXTI_Disable_INT(u8 Copy_u8EXTI_ID){
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <EXTI_Disable_INT+0x6>
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1eee:	19 82       	std	Y+1, r1	; 0x01
		if (Copy_u8EXTI_ID < 4)
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	84 30       	cpi	r24, 0x04	; 4
    1ef4:	68 f5       	brcc	.+90     	; 0x1f50 <EXTI_Disable_INT+0x6e>
			{
			if (Copy_u8EXTI_ID ==0)
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	88 23       	and	r24, r24
    1efa:	41 f4       	brne	.+16     	; 0x1f0c <EXTI_Disable_INT+0x2a>
							{

								GICR &= ~(1<<6);
    1efc:	ab e5       	ldi	r26, 0x5B	; 91
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	eb e5       	ldi	r30, 0x5B	; 91
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	8f 7b       	andi	r24, 0xBF	; 191
    1f08:	8c 93       	st	X, r24
    1f0a:	20 c0       	rjmp	.+64     	; 0x1f4c <EXTI_Disable_INT+0x6a>
							}
							else if (Copy_u8EXTI_ID ==1)
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	41 f4       	brne	.+16     	; 0x1f22 <EXTI_Disable_INT+0x40>
							{
								GICR &=~(1<<7);
    1f12:	ab e5       	ldi	r26, 0x5B	; 91
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	eb e5       	ldi	r30, 0x5B	; 91
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	8f 77       	andi	r24, 0x7F	; 127
    1f1e:	8c 93       	st	X, r24
    1f20:	15 c0       	rjmp	.+42     	; 0x1f4c <EXTI_Disable_INT+0x6a>
							}
							else if (Copy_u8EXTI_ID ==2)
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	82 30       	cpi	r24, 0x02	; 2
    1f26:	41 f4       	brne	.+16     	; 0x1f38 <EXTI_Disable_INT+0x56>
							{
								GICR &=~(1<<5);
    1f28:	ab e5       	ldi	r26, 0x5B	; 91
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	eb e5       	ldi	r30, 0x5B	; 91
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	8f 7d       	andi	r24, 0xDF	; 223
    1f34:	8c 93       	st	X, r24
    1f36:	0a c0       	rjmp	.+20     	; 0x1f4c <EXTI_Disable_INT+0x6a>
							}
							else if(Copy_u8EXTI_ID==GLOBAL){
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	83 30       	cpi	r24, 0x03	; 3
    1f3c:	39 f4       	brne	.+14     	; 0x1f4c <EXTI_Disable_INT+0x6a>
                                    SREG&=~(1<<7);
    1f3e:	af e5       	ldi	r26, 0x5F	; 95
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	ef e5       	ldi	r30, 0x5F	; 95
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	8f 77       	andi	r24, 0x7F	; 127
    1f4a:	8c 93       	st	X, r24
							}
				 Local_enuErrorstate = ES_OK;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	89 83       	std	Y+1, r24	; 0x01
			}

		return Local_enuErrorstate;
    1f50:	89 81       	ldd	r24, Y+1	; 0x01


}
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <EXTI_CallBack>:

ES_t  EXTI_CallBack(void (*Copy_fun_ptr) (void),u8 Copy_u8EXTI_ID ){
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <EXTI_CallBack+0x6>
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <EXTI_CallBack+0x8>
    1f64:	00 d0       	rcall	.+0      	; 0x1f66 <EXTI_CallBack+0xa>
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	9b 83       	std	Y+3, r25	; 0x03
    1f6c:	8a 83       	std	Y+2, r24	; 0x02
    1f6e:	6c 83       	std	Y+4, r22	; 0x04

	ES_t Local_enuErrorstate = ES_NOK;
    1f70:	19 82       	std	Y+1, r1	; 0x01


	if (Copy_fun_ptr != NULL && Copy_u8EXTI_ID <3)
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	9b 81       	ldd	r25, Y+3	; 0x03
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	61 f1       	breq	.+88     	; 0x1fd2 <EXTI_CallBack+0x76>
    1f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7c:	83 30       	cpi	r24, 0x03	; 3
    1f7e:	48 f5       	brcc	.+82     	; 0x1fd2 <EXTI_CallBack+0x76>
		{
		switch(Copy_u8EXTI_ID){
    1f80:	8c 81       	ldd	r24, Y+4	; 0x04
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	3e 83       	std	Y+6, r19	; 0x06
    1f88:	2d 83       	std	Y+5, r18	; 0x05
    1f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8e:	81 30       	cpi	r24, 0x01	; 1
    1f90:	91 05       	cpc	r25, r1
    1f92:	81 f0       	breq	.+32     	; 0x1fb4 <EXTI_CallBack+0x58>
    1f94:	2d 81       	ldd	r18, Y+5	; 0x05
    1f96:	3e 81       	ldd	r19, Y+6	; 0x06
    1f98:	22 30       	cpi	r18, 0x02	; 2
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	91 f0       	breq	.+36     	; 0x1fc2 <EXTI_CallBack+0x66>
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	a1 f4       	brne	.+40     	; 0x1fce <EXTI_CallBack+0x72>
		case INT0:
		      pfunINTFun0=Copy_fun_ptr;
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    1faa:	90 93 9d 00 	sts	0x009D, r25
    1fae:	80 93 9c 00 	sts	0x009C, r24
    1fb2:	0d c0       	rjmp	.+26     	; 0x1fce <EXTI_CallBack+0x72>
		      break;
		case INT1:
				 pfunINTFun1=Copy_fun_ptr;
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb8:	90 93 9f 00 	sts	0x009F, r25
    1fbc:	80 93 9e 00 	sts	0x009E, r24
    1fc0:	06 c0       	rjmp	.+12     	; 0x1fce <EXTI_CallBack+0x72>
				 break;
		case INT2:
			 pfunINTFun2=Copy_fun_ptr;
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc6:	90 93 a1 00 	sts	0x00A1, r25
    1fca:	80 93 a0 00 	sts	0x00A0, r24
		     break;

		}
		      Local_enuErrorstate = ES_OK;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	89 83       	std	Y+1, r24	; 0x01

		}

			return Local_enuErrorstate;
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01


}
    1fd4:	26 96       	adiw	r28, 0x06	; 6
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <__vector_1>:


ISR(VECT_INT0){
    1fe6:	1f 92       	push	r1
    1fe8:	0f 92       	push	r0
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	0f 92       	push	r0
    1fee:	11 24       	eor	r1, r1
    1ff0:	2f 93       	push	r18
    1ff2:	3f 93       	push	r19
    1ff4:	4f 93       	push	r20
    1ff6:	5f 93       	push	r21
    1ff8:	6f 93       	push	r22
    1ffa:	7f 93       	push	r23
    1ffc:	8f 93       	push	r24
    1ffe:	9f 93       	push	r25
    2000:	af 93       	push	r26
    2002:	bf 93       	push	r27
    2004:	ef 93       	push	r30
    2006:	ff 93       	push	r31
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
	if(pfunINTFun0!=NULL){
    2010:	80 91 9c 00 	lds	r24, 0x009C
    2014:	90 91 9d 00 	lds	r25, 0x009D
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	29 f0       	breq	.+10     	; 0x2026 <__vector_1+0x40>
		pfunINTFun0();
    201c:	e0 91 9c 00 	lds	r30, 0x009C
    2020:	f0 91 9d 00 	lds	r31, 0x009D
    2024:	09 95       	icall
	}

}
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	ff 91       	pop	r31
    202c:	ef 91       	pop	r30
    202e:	bf 91       	pop	r27
    2030:	af 91       	pop	r26
    2032:	9f 91       	pop	r25
    2034:	8f 91       	pop	r24
    2036:	7f 91       	pop	r23
    2038:	6f 91       	pop	r22
    203a:	5f 91       	pop	r21
    203c:	4f 91       	pop	r20
    203e:	3f 91       	pop	r19
    2040:	2f 91       	pop	r18
    2042:	0f 90       	pop	r0
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	0f 90       	pop	r0
    2048:	1f 90       	pop	r1
    204a:	18 95       	reti

0000204c <__vector_2>:


ISR(VECT_INT1){
    204c:	1f 92       	push	r1
    204e:	0f 92       	push	r0
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	0f 92       	push	r0
    2054:	11 24       	eor	r1, r1
    2056:	2f 93       	push	r18
    2058:	3f 93       	push	r19
    205a:	4f 93       	push	r20
    205c:	5f 93       	push	r21
    205e:	6f 93       	push	r22
    2060:	7f 93       	push	r23
    2062:	8f 93       	push	r24
    2064:	9f 93       	push	r25
    2066:	af 93       	push	r26
    2068:	bf 93       	push	r27
    206a:	ef 93       	push	r30
    206c:	ff 93       	push	r31
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
	if(pfunINTFun1!=NULL){
    2076:	80 91 9e 00 	lds	r24, 0x009E
    207a:	90 91 9f 00 	lds	r25, 0x009F
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	29 f0       	breq	.+10     	; 0x208c <__vector_2+0x40>
		pfunINTFun1();
    2082:	e0 91 9e 00 	lds	r30, 0x009E
    2086:	f0 91 9f 00 	lds	r31, 0x009F
    208a:	09 95       	icall
	}

}
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	ff 91       	pop	r31
    2092:	ef 91       	pop	r30
    2094:	bf 91       	pop	r27
    2096:	af 91       	pop	r26
    2098:	9f 91       	pop	r25
    209a:	8f 91       	pop	r24
    209c:	7f 91       	pop	r23
    209e:	6f 91       	pop	r22
    20a0:	5f 91       	pop	r21
    20a2:	4f 91       	pop	r20
    20a4:	3f 91       	pop	r19
    20a6:	2f 91       	pop	r18
    20a8:	0f 90       	pop	r0
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	0f 90       	pop	r0
    20ae:	1f 90       	pop	r1
    20b0:	18 95       	reti

000020b2 <__vector_3>:


ISR(VECT_INT2){
    20b2:	1f 92       	push	r1
    20b4:	0f 92       	push	r0
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	0f 92       	push	r0
    20ba:	11 24       	eor	r1, r1
    20bc:	2f 93       	push	r18
    20be:	3f 93       	push	r19
    20c0:	4f 93       	push	r20
    20c2:	5f 93       	push	r21
    20c4:	6f 93       	push	r22
    20c6:	7f 93       	push	r23
    20c8:	8f 93       	push	r24
    20ca:	9f 93       	push	r25
    20cc:	af 93       	push	r26
    20ce:	bf 93       	push	r27
    20d0:	ef 93       	push	r30
    20d2:	ff 93       	push	r31
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
	if(pfunINTFun2!=NULL){
    20dc:	80 91 a0 00 	lds	r24, 0x00A0
    20e0:	90 91 a1 00 	lds	r25, 0x00A1
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	29 f0       	breq	.+10     	; 0x20f2 <__vector_3+0x40>
		pfunINTFun2();
    20e8:	e0 91 a0 00 	lds	r30, 0x00A0
    20ec:	f0 91 a1 00 	lds	r31, 0x00A1
    20f0:	09 95       	icall
	}

}
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	ff 91       	pop	r31
    20f8:	ef 91       	pop	r30
    20fa:	bf 91       	pop	r27
    20fc:	af 91       	pop	r26
    20fe:	9f 91       	pop	r25
    2100:	8f 91       	pop	r24
    2102:	7f 91       	pop	r23
    2104:	6f 91       	pop	r22
    2106:	5f 91       	pop	r21
    2108:	4f 91       	pop	r20
    210a:	3f 91       	pop	r19
    210c:	2f 91       	pop	r18
    210e:	0f 90       	pop	r0
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	0f 90       	pop	r0
    2114:	1f 90       	pop	r1
    2116:	18 95       	reti

00002118 <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	0f 92       	push	r0
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    2122:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    2124:	ea e3       	ldi	r30, 0x3A	; 58
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	8f ef       	ldi	r24, 0xFF	; 255
    212a:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    212c:	e7 e3       	ldi	r30, 0x37	; 55
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	8f ef       	ldi	r24, 0xFF	; 255
    2132:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    2134:	e4 e3       	ldi	r30, 0x34	; 52
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	86 e9       	ldi	r24, 0x96	; 150
    213a:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    213c:	e1 e3       	ldi	r30, 0x31	; 49
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	82 e9       	ldi	r24, 0x92	; 146
    2142:	80 83       	st	Z, r24

	PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    2144:	eb e3       	ldi	r30, 0x3B	; 59
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	10 82       	st	Z, r1

	Local_enuErrorstate = ES_OK;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    214e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	00 d0       	rcall	.+0      	; 0x215e <DIO_enuSetPortDirection+0x6>
    215e:	00 d0       	rcall	.+0      	; 0x2160 <DIO_enuSetPortDirection+0x8>
    2160:	0f 92       	push	r0
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	8a 83       	std	Y+2, r24	; 0x02
    2168:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    216a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	84 30       	cpi	r24, 0x04	; 4
    2170:	a8 f5       	brcc	.+106    	; 0x21dc <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	3d 83       	std	Y+5, r19	; 0x05
    217a:	2c 83       	std	Y+4, r18	; 0x04
    217c:	8c 81       	ldd	r24, Y+4	; 0x04
    217e:	9d 81       	ldd	r25, Y+5	; 0x05
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	91 05       	cpc	r25, r1
    2184:	d1 f0       	breq	.+52     	; 0x21ba <DIO_enuSetPortDirection+0x62>
    2186:	2c 81       	ldd	r18, Y+4	; 0x04
    2188:	3d 81       	ldd	r19, Y+5	; 0x05
    218a:	22 30       	cpi	r18, 0x02	; 2
    218c:	31 05       	cpc	r19, r1
    218e:	2c f4       	brge	.+10     	; 0x219a <DIO_enuSetPortDirection+0x42>
    2190:	8c 81       	ldd	r24, Y+4	; 0x04
    2192:	9d 81       	ldd	r25, Y+5	; 0x05
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	61 f0       	breq	.+24     	; 0x21b0 <DIO_enuSetPortDirection+0x58>
    2198:	1e c0       	rjmp	.+60     	; 0x21d6 <DIO_enuSetPortDirection+0x7e>
    219a:	2c 81       	ldd	r18, Y+4	; 0x04
    219c:	3d 81       	ldd	r19, Y+5	; 0x05
    219e:	22 30       	cpi	r18, 0x02	; 2
    21a0:	31 05       	cpc	r19, r1
    21a2:	81 f0       	breq	.+32     	; 0x21c4 <DIO_enuSetPortDirection+0x6c>
    21a4:	8c 81       	ldd	r24, Y+4	; 0x04
    21a6:	9d 81       	ldd	r25, Y+5	; 0x05
    21a8:	83 30       	cpi	r24, 0x03	; 3
    21aa:	91 05       	cpc	r25, r1
    21ac:	81 f0       	breq	.+32     	; 0x21ce <DIO_enuSetPortDirection+0x76>
    21ae:	13 c0       	rjmp	.+38     	; 0x21d6 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    21b0:	ea e3       	ldi	r30, 0x3A	; 58
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	80 83       	st	Z, r24
    21b8:	0e c0       	rjmp	.+28     	; 0x21d6 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    21ba:	e7 e3       	ldi	r30, 0x37	; 55
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	80 83       	st	Z, r24
    21c2:	09 c0       	rjmp	.+18     	; 0x21d6 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    21c4:	e4 e3       	ldi	r30, 0x34	; 52
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	80 83       	st	Z, r24
    21cc:	04 c0       	rjmp	.+8      	; 0x21d6 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    21ce:	e1 e3       	ldi	r30, 0x31	; 49
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    21dc:	83 e0       	ldi	r24, 0x03	; 3
    21de:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <DIO_enuSetPortValue+0x6>
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <DIO_enuSetPortValue+0x8>
    21fa:	0f 92       	push	r0
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	8a 83       	std	Y+2, r24	; 0x02
    2202:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    2204:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	84 30       	cpi	r24, 0x04	; 4
    220a:	a8 f5       	brcc	.+106    	; 0x2276 <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	3d 83       	std	Y+5, r19	; 0x05
    2214:	2c 83       	std	Y+4, r18	; 0x04
    2216:	8c 81       	ldd	r24, Y+4	; 0x04
    2218:	9d 81       	ldd	r25, Y+5	; 0x05
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	91 05       	cpc	r25, r1
    221e:	d1 f0       	breq	.+52     	; 0x2254 <DIO_enuSetPortValue+0x62>
    2220:	2c 81       	ldd	r18, Y+4	; 0x04
    2222:	3d 81       	ldd	r19, Y+5	; 0x05
    2224:	22 30       	cpi	r18, 0x02	; 2
    2226:	31 05       	cpc	r19, r1
    2228:	2c f4       	brge	.+10     	; 0x2234 <DIO_enuSetPortValue+0x42>
    222a:	8c 81       	ldd	r24, Y+4	; 0x04
    222c:	9d 81       	ldd	r25, Y+5	; 0x05
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	61 f0       	breq	.+24     	; 0x224a <DIO_enuSetPortValue+0x58>
    2232:	1e c0       	rjmp	.+60     	; 0x2270 <DIO_enuSetPortValue+0x7e>
    2234:	2c 81       	ldd	r18, Y+4	; 0x04
    2236:	3d 81       	ldd	r19, Y+5	; 0x05
    2238:	22 30       	cpi	r18, 0x02	; 2
    223a:	31 05       	cpc	r19, r1
    223c:	81 f0       	breq	.+32     	; 0x225e <DIO_enuSetPortValue+0x6c>
    223e:	8c 81       	ldd	r24, Y+4	; 0x04
    2240:	9d 81       	ldd	r25, Y+5	; 0x05
    2242:	83 30       	cpi	r24, 0x03	; 3
    2244:	91 05       	cpc	r25, r1
    2246:	81 f0       	breq	.+32     	; 0x2268 <DIO_enuSetPortValue+0x76>
    2248:	13 c0       	rjmp	.+38     	; 0x2270 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    224a:	eb e3       	ldi	r30, 0x3B	; 59
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	80 83       	st	Z, r24
    2252:	0e c0       	rjmp	.+28     	; 0x2270 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    2254:	e8 e3       	ldi	r30, 0x38	; 56
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	80 83       	st	Z, r24
    225c:	09 c0       	rjmp	.+18     	; 0x2270 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    225e:	e5 e3       	ldi	r30, 0x35	; 53
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	80 83       	st	Z, r24
    2266:	04 c0       	rjmp	.+8      	; 0x2270 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    2268:	e2 e3       	ldi	r30, 0x32	; 50
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	02 c0       	rjmp	.+4      	; 0x227a <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2276:	83 e0       	ldi	r24, 0x03	; 3
    2278:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    227a:	89 81       	ldd	r24, Y+1	; 0x01
}
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	00 d0       	rcall	.+0      	; 0x2292 <DIO_enuTogPortValue+0x6>
    2292:	00 d0       	rcall	.+0      	; 0x2294 <DIO_enuTogPortValue+0x8>
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    229a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	84 30       	cpi	r24, 0x04	; 4
    22a0:	08 f0       	brcs	.+2      	; 0x22a4 <DIO_enuTogPortValue+0x18>
    22a2:	41 c0       	rjmp	.+130    	; 0x2326 <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	3c 83       	std	Y+4, r19	; 0x04
    22ac:	2b 83       	std	Y+3, r18	; 0x03
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	9c 81       	ldd	r25, Y+4	; 0x04
    22b2:	81 30       	cpi	r24, 0x01	; 1
    22b4:	91 05       	cpc	r25, r1
    22b6:	e9 f0       	breq	.+58     	; 0x22f2 <DIO_enuTogPortValue+0x66>
    22b8:	2b 81       	ldd	r18, Y+3	; 0x03
    22ba:	3c 81       	ldd	r19, Y+4	; 0x04
    22bc:	22 30       	cpi	r18, 0x02	; 2
    22be:	31 05       	cpc	r19, r1
    22c0:	2c f4       	brge	.+10     	; 0x22cc <DIO_enuTogPortValue+0x40>
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	61 f0       	breq	.+24     	; 0x22e2 <DIO_enuTogPortValue+0x56>
    22ca:	2a c0       	rjmp	.+84     	; 0x2320 <DIO_enuTogPortValue+0x94>
    22cc:	2b 81       	ldd	r18, Y+3	; 0x03
    22ce:	3c 81       	ldd	r19, Y+4	; 0x04
    22d0:	22 30       	cpi	r18, 0x02	; 2
    22d2:	31 05       	cpc	r19, r1
    22d4:	b1 f0       	breq	.+44     	; 0x2302 <DIO_enuTogPortValue+0x76>
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	9c 81       	ldd	r25, Y+4	; 0x04
    22da:	83 30       	cpi	r24, 0x03	; 3
    22dc:	91 05       	cpc	r25, r1
    22de:	c9 f0       	breq	.+50     	; 0x2312 <DIO_enuTogPortValue+0x86>
    22e0:	1f c0       	rjmp	.+62     	; 0x2320 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    22e2:	ab e3       	ldi	r26, 0x3B	; 59
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	eb e3       	ldi	r30, 0x3B	; 59
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	80 95       	com	r24
    22ee:	8c 93       	st	X, r24
    22f0:	17 c0       	rjmp	.+46     	; 0x2320 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    22f2:	a8 e3       	ldi	r26, 0x38	; 56
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e8 e3       	ldi	r30, 0x38	; 56
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	80 95       	com	r24
    22fe:	8c 93       	st	X, r24
    2300:	0f c0       	rjmp	.+30     	; 0x2320 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    2302:	a5 e3       	ldi	r26, 0x35	; 53
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e5 e3       	ldi	r30, 0x35	; 53
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	80 95       	com	r24
    230e:	8c 93       	st	X, r24
    2310:	07 c0       	rjmp	.+14     	; 0x2320 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    2312:	a2 e3       	ldi	r26, 0x32	; 50
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e2 e3       	ldi	r30, 0x32	; 50
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	80 95       	com	r24
    231e:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	02 c0       	rjmp	.+4      	; 0x232a <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2326:	83 e0       	ldi	r24, 0x03	; 3
    2328:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    232a:	89 81       	ldd	r24, Y+1	; 0x01
}
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret

0000233a <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	00 d0       	rcall	.+0      	; 0x2340 <DIO_enuGetPortValue+0x6>
    2340:	00 d0       	rcall	.+0      	; 0x2342 <DIO_enuGetPortValue+0x8>
    2342:	00 d0       	rcall	.+0      	; 0x2344 <DIO_enuGetPortValue+0xa>
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	8a 83       	std	Y+2, r24	; 0x02
    234a:	7c 83       	std	Y+4, r23	; 0x04
    234c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    234e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	09 f4       	brne	.+2      	; 0x235a <DIO_enuGetPortValue+0x20>
    2358:	43 c0       	rjmp	.+134    	; 0x23e0 <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	84 30       	cpi	r24, 0x04	; 4
    235e:	e8 f5       	brcc	.+122    	; 0x23da <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	3e 83       	std	Y+6, r19	; 0x06
    2368:	2d 83       	std	Y+5, r18	; 0x05
    236a:	8d 81       	ldd	r24, Y+5	; 0x05
    236c:	9e 81       	ldd	r25, Y+6	; 0x06
    236e:	81 30       	cpi	r24, 0x01	; 1
    2370:	91 05       	cpc	r25, r1
    2372:	e1 f0       	breq	.+56     	; 0x23ac <DIO_enuGetPortValue+0x72>
    2374:	2d 81       	ldd	r18, Y+5	; 0x05
    2376:	3e 81       	ldd	r19, Y+6	; 0x06
    2378:	22 30       	cpi	r18, 0x02	; 2
    237a:	31 05       	cpc	r19, r1
    237c:	2c f4       	brge	.+10     	; 0x2388 <DIO_enuGetPortValue+0x4e>
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	61 f0       	breq	.+24     	; 0x239e <DIO_enuGetPortValue+0x64>
    2386:	26 c0       	rjmp	.+76     	; 0x23d4 <DIO_enuGetPortValue+0x9a>
    2388:	2d 81       	ldd	r18, Y+5	; 0x05
    238a:	3e 81       	ldd	r19, Y+6	; 0x06
    238c:	22 30       	cpi	r18, 0x02	; 2
    238e:	31 05       	cpc	r19, r1
    2390:	a1 f0       	breq	.+40     	; 0x23ba <DIO_enuGetPortValue+0x80>
    2392:	8d 81       	ldd	r24, Y+5	; 0x05
    2394:	9e 81       	ldd	r25, Y+6	; 0x06
    2396:	83 30       	cpi	r24, 0x03	; 3
    2398:	91 05       	cpc	r25, r1
    239a:	b1 f0       	breq	.+44     	; 0x23c8 <DIO_enuGetPortValue+0x8e>
    239c:	1b c0       	rjmp	.+54     	; 0x23d4 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    239e:	e9 e3       	ldi	r30, 0x39	; 57
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	eb 81       	ldd	r30, Y+3	; 0x03
    23a6:	fc 81       	ldd	r31, Y+4	; 0x04
    23a8:	80 83       	st	Z, r24
    23aa:	14 c0       	rjmp	.+40     	; 0x23d4 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    23ac:	e6 e3       	ldi	r30, 0x36	; 54
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	eb 81       	ldd	r30, Y+3	; 0x03
    23b4:	fc 81       	ldd	r31, Y+4	; 0x04
    23b6:	80 83       	st	Z, r24
    23b8:	0d c0       	rjmp	.+26     	; 0x23d4 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    23ba:	e3 e3       	ldi	r30, 0x33	; 51
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	eb 81       	ldd	r30, Y+3	; 0x03
    23c2:	fc 81       	ldd	r31, Y+4	; 0x04
    23c4:	80 83       	st	Z, r24
    23c6:	06 c0       	rjmp	.+12     	; 0x23d4 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    23c8:	e0 e3       	ldi	r30, 0x30	; 48
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	eb 81       	ldd	r30, Y+3	; 0x03
    23d0:	fc 81       	ldd	r31, Y+4	; 0x04
    23d2:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	05 c0       	rjmp	.+10     	; 0x23e4 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    23da:	83 e0       	ldi	r24, 0x03	; 3
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e6:	26 96       	adiw	r28, 0x06	; 6
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	de bf       	out	0x3e, r29	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	cd bf       	out	0x3d, r28	; 61
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	08 95       	ret

000023f8 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <DIO_enuSetPinDirection+0x6>
    23fe:	00 d0       	rcall	.+0      	; 0x2400 <DIO_enuSetPinDirection+0x8>
    2400:	00 d0       	rcall	.+0      	; 0x2402 <DIO_enuSetPinDirection+0xa>
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	8a 83       	std	Y+2, r24	; 0x02
    2408:	6b 83       	std	Y+3, r22	; 0x03
    240a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    240c:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	84 30       	cpi	r24, 0x04	; 4
    2412:	08 f0       	brcs	.+2      	; 0x2416 <DIO_enuSetPinDirection+0x1e>
    2414:	d1 c0       	rjmp	.+418    	; 0x25b8 <DIO_enuSetPinDirection+0x1c0>
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	88 30       	cpi	r24, 0x08	; 8
    241a:	08 f0       	brcs	.+2      	; 0x241e <DIO_enuSetPinDirection+0x26>
    241c:	cd c0       	rjmp	.+410    	; 0x25b8 <DIO_enuSetPinDirection+0x1c0>
    241e:	8c 81       	ldd	r24, Y+4	; 0x04
    2420:	82 30       	cpi	r24, 0x02	; 2
    2422:	08 f0       	brcs	.+2      	; 0x2426 <DIO_enuSetPinDirection+0x2e>
    2424:	c9 c0       	rjmp	.+402    	; 0x25b8 <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	3e 83       	std	Y+6, r19	; 0x06
    242e:	2d 83       	std	Y+5, r18	; 0x05
    2430:	6d 81       	ldd	r22, Y+5	; 0x05
    2432:	7e 81       	ldd	r23, Y+6	; 0x06
    2434:	61 30       	cpi	r22, 0x01	; 1
    2436:	71 05       	cpc	r23, r1
    2438:	09 f4       	brne	.+2      	; 0x243c <DIO_enuSetPinDirection+0x44>
    243a:	41 c0       	rjmp	.+130    	; 0x24be <DIO_enuSetPinDirection+0xc6>
    243c:	8d 81       	ldd	r24, Y+5	; 0x05
    243e:	9e 81       	ldd	r25, Y+6	; 0x06
    2440:	82 30       	cpi	r24, 0x02	; 2
    2442:	91 05       	cpc	r25, r1
    2444:	34 f4       	brge	.+12     	; 0x2452 <DIO_enuSetPinDirection+0x5a>
    2446:	2d 81       	ldd	r18, Y+5	; 0x05
    2448:	3e 81       	ldd	r19, Y+6	; 0x06
    244a:	21 15       	cp	r18, r1
    244c:	31 05       	cpc	r19, r1
    244e:	71 f0       	breq	.+28     	; 0x246c <DIO_enuSetPinDirection+0x74>
    2450:	b0 c0       	rjmp	.+352    	; 0x25b2 <DIO_enuSetPinDirection+0x1ba>
    2452:	6d 81       	ldd	r22, Y+5	; 0x05
    2454:	7e 81       	ldd	r23, Y+6	; 0x06
    2456:	62 30       	cpi	r22, 0x02	; 2
    2458:	71 05       	cpc	r23, r1
    245a:	09 f4       	brne	.+2      	; 0x245e <DIO_enuSetPinDirection+0x66>
    245c:	59 c0       	rjmp	.+178    	; 0x2510 <DIO_enuSetPinDirection+0x118>
    245e:	8d 81       	ldd	r24, Y+5	; 0x05
    2460:	9e 81       	ldd	r25, Y+6	; 0x06
    2462:	83 30       	cpi	r24, 0x03	; 3
    2464:	91 05       	cpc	r25, r1
    2466:	09 f4       	brne	.+2      	; 0x246a <DIO_enuSetPinDirection+0x72>
    2468:	7c c0       	rjmp	.+248    	; 0x2562 <DIO_enuSetPinDirection+0x16a>
    246a:	a3 c0       	rjmp	.+326    	; 0x25b2 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    246c:	aa e3       	ldi	r26, 0x3A	; 58
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	ea e3       	ldi	r30, 0x3A	; 58
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	48 2f       	mov	r20, r24
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <DIO_enuSetPinDirection+0x90>
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	2a 95       	dec	r18
    248a:	e2 f7       	brpl	.-8      	; 0x2484 <DIO_enuSetPinDirection+0x8c>
    248c:	80 95       	com	r24
    248e:	84 23       	and	r24, r20
    2490:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    2492:	aa e3       	ldi	r26, 0x3A	; 58
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	ea e3       	ldi	r30, 0x3A	; 58
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	48 2f       	mov	r20, r24
    249e:	8c 81       	ldd	r24, Y+4	; 0x04
    24a0:	28 2f       	mov	r18, r24
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	88 2f       	mov	r24, r24
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	b9 01       	movw	r22, r18
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <DIO_enuSetPinDirection+0xba>
    24ae:	66 0f       	add	r22, r22
    24b0:	77 1f       	adc	r23, r23
    24b2:	8a 95       	dec	r24
    24b4:	e2 f7       	brpl	.-8      	; 0x24ae <DIO_enuSetPinDirection+0xb6>
    24b6:	cb 01       	movw	r24, r22
    24b8:	84 2b       	or	r24, r20
    24ba:	8c 93       	st	X, r24
    24bc:	7a c0       	rjmp	.+244    	; 0x25b2 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    24be:	a7 e3       	ldi	r26, 0x37	; 55
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	e7 e3       	ldi	r30, 0x37	; 55
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	48 2f       	mov	r20, r24
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <DIO_enuSetPinDirection+0xe2>
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	2a 95       	dec	r18
    24dc:	e2 f7       	brpl	.-8      	; 0x24d6 <DIO_enuSetPinDirection+0xde>
    24de:	80 95       	com	r24
    24e0:	84 23       	and	r24, r20
    24e2:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    24e4:	a7 e3       	ldi	r26, 0x37	; 55
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e7 e3       	ldi	r30, 0x37	; 55
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	48 2f       	mov	r20, r24
    24f0:	8c 81       	ldd	r24, Y+4	; 0x04
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	88 2f       	mov	r24, r24
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	b9 01       	movw	r22, r18
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <DIO_enuSetPinDirection+0x10c>
    2500:	66 0f       	add	r22, r22
    2502:	77 1f       	adc	r23, r23
    2504:	8a 95       	dec	r24
    2506:	e2 f7       	brpl	.-8      	; 0x2500 <DIO_enuSetPinDirection+0x108>
    2508:	cb 01       	movw	r24, r22
    250a:	84 2b       	or	r24, r20
    250c:	8c 93       	st	X, r24
    250e:	51 c0       	rjmp	.+162    	; 0x25b2 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2510:	a4 e3       	ldi	r26, 0x34	; 52
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e4 e3       	ldi	r30, 0x34	; 52
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	48 2f       	mov	r20, r24
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	02 c0       	rjmp	.+4      	; 0x252c <DIO_enuSetPinDirection+0x134>
    2528:	88 0f       	add	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	2a 95       	dec	r18
    252e:	e2 f7       	brpl	.-8      	; 0x2528 <DIO_enuSetPinDirection+0x130>
    2530:	80 95       	com	r24
    2532:	84 23       	and	r24, r20
    2534:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    2536:	a4 e3       	ldi	r26, 0x34	; 52
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	e4 e3       	ldi	r30, 0x34	; 52
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	48 2f       	mov	r20, r24
    2542:	8c 81       	ldd	r24, Y+4	; 0x04
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	88 2f       	mov	r24, r24
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	b9 01       	movw	r22, r18
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <DIO_enuSetPinDirection+0x15e>
    2552:	66 0f       	add	r22, r22
    2554:	77 1f       	adc	r23, r23
    2556:	8a 95       	dec	r24
    2558:	e2 f7       	brpl	.-8      	; 0x2552 <DIO_enuSetPinDirection+0x15a>
    255a:	cb 01       	movw	r24, r22
    255c:	84 2b       	or	r24, r20
    255e:	8c 93       	st	X, r24
    2560:	28 c0       	rjmp	.+80     	; 0x25b2 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2562:	a1 e3       	ldi	r26, 0x31	; 49
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e1 e3       	ldi	r30, 0x31	; 49
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	48 2f       	mov	r20, r24
    256e:	8b 81       	ldd	r24, Y+3	; 0x03
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	02 c0       	rjmp	.+4      	; 0x257e <DIO_enuSetPinDirection+0x186>
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	2a 95       	dec	r18
    2580:	e2 f7       	brpl	.-8      	; 0x257a <DIO_enuSetPinDirection+0x182>
    2582:	80 95       	com	r24
    2584:	84 23       	and	r24, r20
    2586:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    2588:	a1 e3       	ldi	r26, 0x31	; 49
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e1 e3       	ldi	r30, 0x31	; 49
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	48 2f       	mov	r20, r24
    2594:	8c 81       	ldd	r24, Y+4	; 0x04
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	8b 81       	ldd	r24, Y+3	; 0x03
    259c:	88 2f       	mov	r24, r24
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	b9 01       	movw	r22, r18
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <DIO_enuSetPinDirection+0x1b0>
    25a4:	66 0f       	add	r22, r22
    25a6:	77 1f       	adc	r23, r23
    25a8:	8a 95       	dec	r24
    25aa:	e2 f7       	brpl	.-8      	; 0x25a4 <DIO_enuSetPinDirection+0x1ac>
    25ac:	cb 01       	movw	r24, r22
    25ae:	84 2b       	or	r24, r20
    25b0:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	89 83       	std	Y+1, r24	; 0x01
    25b6:	02 c0       	rjmp	.+4      	; 0x25bc <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    25b8:	83 e0       	ldi	r24, 0x03	; 3
    25ba:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    25be:	26 96       	adiw	r28, 0x06	; 6
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	de bf       	out	0x3e, r29	; 62
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	cd bf       	out	0x3d, r28	; 61
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <DIO_enuSetPinValue+0x6>
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <DIO_enuSetPinValue+0x8>
    25d8:	00 d0       	rcall	.+0      	; 0x25da <DIO_enuSetPinValue+0xa>
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	8a 83       	std	Y+2, r24	; 0x02
    25e0:	6b 83       	std	Y+3, r22	; 0x03
    25e2:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    25e4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    25e6:	8a 81       	ldd	r24, Y+2	; 0x02
    25e8:	84 30       	cpi	r24, 0x04	; 4
    25ea:	08 f0       	brcs	.+2      	; 0x25ee <DIO_enuSetPinValue+0x1e>
    25ec:	d1 c0       	rjmp	.+418    	; 0x2790 <DIO_enuSetPinValue+0x1c0>
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	88 30       	cpi	r24, 0x08	; 8
    25f2:	08 f0       	brcs	.+2      	; 0x25f6 <DIO_enuSetPinValue+0x26>
    25f4:	cd c0       	rjmp	.+410    	; 0x2790 <DIO_enuSetPinValue+0x1c0>
    25f6:	8c 81       	ldd	r24, Y+4	; 0x04
    25f8:	82 30       	cpi	r24, 0x02	; 2
    25fa:	08 f0       	brcs	.+2      	; 0x25fe <DIO_enuSetPinValue+0x2e>
    25fc:	c9 c0       	rjmp	.+402    	; 0x2790 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	28 2f       	mov	r18, r24
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	3e 83       	std	Y+6, r19	; 0x06
    2606:	2d 83       	std	Y+5, r18	; 0x05
    2608:	6d 81       	ldd	r22, Y+5	; 0x05
    260a:	7e 81       	ldd	r23, Y+6	; 0x06
    260c:	61 30       	cpi	r22, 0x01	; 1
    260e:	71 05       	cpc	r23, r1
    2610:	09 f4       	brne	.+2      	; 0x2614 <DIO_enuSetPinValue+0x44>
    2612:	41 c0       	rjmp	.+130    	; 0x2696 <DIO_enuSetPinValue+0xc6>
    2614:	8d 81       	ldd	r24, Y+5	; 0x05
    2616:	9e 81       	ldd	r25, Y+6	; 0x06
    2618:	82 30       	cpi	r24, 0x02	; 2
    261a:	91 05       	cpc	r25, r1
    261c:	34 f4       	brge	.+12     	; 0x262a <DIO_enuSetPinValue+0x5a>
    261e:	2d 81       	ldd	r18, Y+5	; 0x05
    2620:	3e 81       	ldd	r19, Y+6	; 0x06
    2622:	21 15       	cp	r18, r1
    2624:	31 05       	cpc	r19, r1
    2626:	71 f0       	breq	.+28     	; 0x2644 <DIO_enuSetPinValue+0x74>
    2628:	b0 c0       	rjmp	.+352    	; 0x278a <DIO_enuSetPinValue+0x1ba>
    262a:	6d 81       	ldd	r22, Y+5	; 0x05
    262c:	7e 81       	ldd	r23, Y+6	; 0x06
    262e:	62 30       	cpi	r22, 0x02	; 2
    2630:	71 05       	cpc	r23, r1
    2632:	09 f4       	brne	.+2      	; 0x2636 <DIO_enuSetPinValue+0x66>
    2634:	59 c0       	rjmp	.+178    	; 0x26e8 <DIO_enuSetPinValue+0x118>
    2636:	8d 81       	ldd	r24, Y+5	; 0x05
    2638:	9e 81       	ldd	r25, Y+6	; 0x06
    263a:	83 30       	cpi	r24, 0x03	; 3
    263c:	91 05       	cpc	r25, r1
    263e:	09 f4       	brne	.+2      	; 0x2642 <DIO_enuSetPinValue+0x72>
    2640:	7c c0       	rjmp	.+248    	; 0x273a <DIO_enuSetPinValue+0x16a>
    2642:	a3 c0       	rjmp	.+326    	; 0x278a <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2644:	ab e3       	ldi	r26, 0x3B	; 59
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	eb e3       	ldi	r30, 0x3B	; 59
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	48 2f       	mov	r20, r24
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <DIO_enuSetPinValue+0x90>
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	2a 95       	dec	r18
    2662:	e2 f7       	brpl	.-8      	; 0x265c <DIO_enuSetPinValue+0x8c>
    2664:	80 95       	com	r24
    2666:	84 23       	and	r24, r20
    2668:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    266a:	ab e3       	ldi	r26, 0x3B	; 59
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	eb e3       	ldi	r30, 0x3B	; 59
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	48 2f       	mov	r20, r24
    2676:	8c 81       	ldd	r24, Y+4	; 0x04
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	88 2f       	mov	r24, r24
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	b9 01       	movw	r22, r18
    2684:	02 c0       	rjmp	.+4      	; 0x268a <DIO_enuSetPinValue+0xba>
    2686:	66 0f       	add	r22, r22
    2688:	77 1f       	adc	r23, r23
    268a:	8a 95       	dec	r24
    268c:	e2 f7       	brpl	.-8      	; 0x2686 <DIO_enuSetPinValue+0xb6>
    268e:	cb 01       	movw	r24, r22
    2690:	84 2b       	or	r24, r20
    2692:	8c 93       	st	X, r24
    2694:	7a c0       	rjmp	.+244    	; 0x278a <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2696:	a8 e3       	ldi	r26, 0x38	; 56
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e8 e3       	ldi	r30, 0x38	; 56
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	48 2f       	mov	r20, r24
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	02 c0       	rjmp	.+4      	; 0x26b2 <DIO_enuSetPinValue+0xe2>
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	2a 95       	dec	r18
    26b4:	e2 f7       	brpl	.-8      	; 0x26ae <DIO_enuSetPinValue+0xde>
    26b6:	80 95       	com	r24
    26b8:	84 23       	and	r24, r20
    26ba:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    26bc:	a8 e3       	ldi	r26, 0x38	; 56
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	e8 e3       	ldi	r30, 0x38	; 56
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	48 2f       	mov	r20, r24
    26c8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	88 2f       	mov	r24, r24
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	b9 01       	movw	r22, r18
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <DIO_enuSetPinValue+0x10c>
    26d8:	66 0f       	add	r22, r22
    26da:	77 1f       	adc	r23, r23
    26dc:	8a 95       	dec	r24
    26de:	e2 f7       	brpl	.-8      	; 0x26d8 <DIO_enuSetPinValue+0x108>
    26e0:	cb 01       	movw	r24, r22
    26e2:	84 2b       	or	r24, r20
    26e4:	8c 93       	st	X, r24
    26e6:	51 c0       	rjmp	.+162    	; 0x278a <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    26e8:	a5 e3       	ldi	r26, 0x35	; 53
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	e5 e3       	ldi	r30, 0x35	; 53
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	48 2f       	mov	r20, r24
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	28 2f       	mov	r18, r24
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <DIO_enuSetPinValue+0x134>
    2700:	88 0f       	add	r24, r24
    2702:	99 1f       	adc	r25, r25
    2704:	2a 95       	dec	r18
    2706:	e2 f7       	brpl	.-8      	; 0x2700 <DIO_enuSetPinValue+0x130>
    2708:	80 95       	com	r24
    270a:	84 23       	and	r24, r20
    270c:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    270e:	a5 e3       	ldi	r26, 0x35	; 53
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e5 e3       	ldi	r30, 0x35	; 53
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	48 2f       	mov	r20, r24
    271a:	8c 81       	ldd	r24, Y+4	; 0x04
    271c:	28 2f       	mov	r18, r24
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	8b 81       	ldd	r24, Y+3	; 0x03
    2722:	88 2f       	mov	r24, r24
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	b9 01       	movw	r22, r18
    2728:	02 c0       	rjmp	.+4      	; 0x272e <DIO_enuSetPinValue+0x15e>
    272a:	66 0f       	add	r22, r22
    272c:	77 1f       	adc	r23, r23
    272e:	8a 95       	dec	r24
    2730:	e2 f7       	brpl	.-8      	; 0x272a <DIO_enuSetPinValue+0x15a>
    2732:	cb 01       	movw	r24, r22
    2734:	84 2b       	or	r24, r20
    2736:	8c 93       	st	X, r24
    2738:	28 c0       	rjmp	.+80     	; 0x278a <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    273a:	a2 e3       	ldi	r26, 0x32	; 50
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e2 e3       	ldi	r30, 0x32	; 50
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	48 2f       	mov	r20, r24
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	28 2f       	mov	r18, r24
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <DIO_enuSetPinValue+0x186>
    2752:	88 0f       	add	r24, r24
    2754:	99 1f       	adc	r25, r25
    2756:	2a 95       	dec	r18
    2758:	e2 f7       	brpl	.-8      	; 0x2752 <DIO_enuSetPinValue+0x182>
    275a:	80 95       	com	r24
    275c:	84 23       	and	r24, r20
    275e:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    2760:	a2 e3       	ldi	r26, 0x32	; 50
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	e2 e3       	ldi	r30, 0x32	; 50
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	48 2f       	mov	r20, r24
    276c:	8c 81       	ldd	r24, Y+4	; 0x04
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	b9 01       	movw	r22, r18
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <DIO_enuSetPinValue+0x1b0>
    277c:	66 0f       	add	r22, r22
    277e:	77 1f       	adc	r23, r23
    2780:	8a 95       	dec	r24
    2782:	e2 f7       	brpl	.-8      	; 0x277c <DIO_enuSetPinValue+0x1ac>
    2784:	cb 01       	movw	r24, r22
    2786:	84 2b       	or	r24, r20
    2788:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	89 83       	std	Y+1, r24	; 0x01
    278e:	02 c0       	rjmp	.+4      	; 0x2794 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2790:	83 e0       	ldi	r24, 0x03	; 3
    2792:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2794:	89 81       	ldd	r24, Y+1	; 0x01
}
    2796:	26 96       	adiw	r28, 0x06	; 6
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <DIO_enuTogPin+0x6>
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <DIO_enuTogPin+0x8>
    27b0:	0f 92       	push	r0
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	8a 83       	std	Y+2, r24	; 0x02
    27b8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    27ba:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    27bc:	8a 81       	ldd	r24, Y+2	; 0x02
    27be:	84 30       	cpi	r24, 0x04	; 4
    27c0:	08 f0       	brcs	.+2      	; 0x27c4 <DIO_enuTogPin+0x1c>
    27c2:	75 c0       	rjmp	.+234    	; 0x28ae <DIO_enuTogPin+0x106>
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	88 30       	cpi	r24, 0x08	; 8
    27c8:	08 f0       	brcs	.+2      	; 0x27cc <DIO_enuTogPin+0x24>
    27ca:	71 c0       	rjmp	.+226    	; 0x28ae <DIO_enuTogPin+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    27cc:	8a 81       	ldd	r24, Y+2	; 0x02
    27ce:	28 2f       	mov	r18, r24
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	3d 83       	std	Y+5, r19	; 0x05
    27d4:	2c 83       	std	Y+4, r18	; 0x04
    27d6:	8c 81       	ldd	r24, Y+4	; 0x04
    27d8:	9d 81       	ldd	r25, Y+5	; 0x05
    27da:	81 30       	cpi	r24, 0x01	; 1
    27dc:	91 05       	cpc	r25, r1
    27de:	49 f1       	breq	.+82     	; 0x2832 <DIO_enuTogPin+0x8a>
    27e0:	2c 81       	ldd	r18, Y+4	; 0x04
    27e2:	3d 81       	ldd	r19, Y+5	; 0x05
    27e4:	22 30       	cpi	r18, 0x02	; 2
    27e6:	31 05       	cpc	r19, r1
    27e8:	2c f4       	brge	.+10     	; 0x27f4 <DIO_enuTogPin+0x4c>
    27ea:	8c 81       	ldd	r24, Y+4	; 0x04
    27ec:	9d 81       	ldd	r25, Y+5	; 0x05
    27ee:	00 97       	sbiw	r24, 0x00	; 0
    27f0:	61 f0       	breq	.+24     	; 0x280a <DIO_enuTogPin+0x62>
    27f2:	5a c0       	rjmp	.+180    	; 0x28a8 <DIO_enuTogPin+0x100>
    27f4:	2c 81       	ldd	r18, Y+4	; 0x04
    27f6:	3d 81       	ldd	r19, Y+5	; 0x05
    27f8:	22 30       	cpi	r18, 0x02	; 2
    27fa:	31 05       	cpc	r19, r1
    27fc:	71 f1       	breq	.+92     	; 0x285a <DIO_enuTogPin+0xb2>
    27fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2800:	9d 81       	ldd	r25, Y+5	; 0x05
    2802:	83 30       	cpi	r24, 0x03	; 3
    2804:	91 05       	cpc	r25, r1
    2806:	e9 f1       	breq	.+122    	; 0x2882 <DIO_enuTogPin+0xda>
    2808:	4f c0       	rjmp	.+158    	; 0x28a8 <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    280a:	ab e3       	ldi	r26, 0x3B	; 59
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	eb e3       	ldi	r30, 0x3B	; 59
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	48 2f       	mov	r20, r24
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
    2818:	28 2f       	mov	r18, r24
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	02 2e       	mov	r0, r18
    2822:	02 c0       	rjmp	.+4      	; 0x2828 <DIO_enuTogPin+0x80>
    2824:	88 0f       	add	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	0a 94       	dec	r0
    282a:	e2 f7       	brpl	.-8      	; 0x2824 <DIO_enuTogPin+0x7c>
    282c:	84 27       	eor	r24, r20
    282e:	8c 93       	st	X, r24
    2830:	3b c0       	rjmp	.+118    	; 0x28a8 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    2832:	a8 e3       	ldi	r26, 0x38	; 56
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	e8 e3       	ldi	r30, 0x38	; 56
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	48 2f       	mov	r20, r24
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	28 2f       	mov	r18, r24
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	02 2e       	mov	r0, r18
    284a:	02 c0       	rjmp	.+4      	; 0x2850 <DIO_enuTogPin+0xa8>
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	0a 94       	dec	r0
    2852:	e2 f7       	brpl	.-8      	; 0x284c <DIO_enuTogPin+0xa4>
    2854:	84 27       	eor	r24, r20
    2856:	8c 93       	st	X, r24
    2858:	27 c0       	rjmp	.+78     	; 0x28a8 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    285a:	a5 e3       	ldi	r26, 0x35	; 53
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	e5 e3       	ldi	r30, 0x35	; 53
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	48 2f       	mov	r20, r24
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	28 2f       	mov	r18, r24
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	02 2e       	mov	r0, r18
    2872:	02 c0       	rjmp	.+4      	; 0x2878 <DIO_enuTogPin+0xd0>
    2874:	88 0f       	add	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	0a 94       	dec	r0
    287a:	e2 f7       	brpl	.-8      	; 0x2874 <DIO_enuTogPin+0xcc>
    287c:	84 27       	eor	r24, r20
    287e:	8c 93       	st	X, r24
    2880:	13 c0       	rjmp	.+38     	; 0x28a8 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    2882:	a2 e3       	ldi	r26, 0x32	; 50
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	e2 e3       	ldi	r30, 0x32	; 50
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	48 2f       	mov	r20, r24
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	28 2f       	mov	r18, r24
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	02 2e       	mov	r0, r18
    289a:	02 c0       	rjmp	.+4      	; 0x28a0 <DIO_enuTogPin+0xf8>
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	0a 94       	dec	r0
    28a2:	e2 f7       	brpl	.-8      	; 0x289c <DIO_enuTogPin+0xf4>
    28a4:	84 27       	eor	r24, r20
    28a6:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	89 83       	std	Y+1, r24	; 0x01
    28ac:	02 c0       	rjmp	.+4      	; 0x28b2 <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    28ae:	83 e0       	ldi	r24, 0x03	; 3
    28b0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	27 97       	sbiw	r28, 0x07	; 7
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	8a 83       	std	Y+2, r24	; 0x02
    28da:	6b 83       	std	Y+3, r22	; 0x03
    28dc:	5d 83       	std	Y+5, r21	; 0x05
    28de:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    28e0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    28e2:	8c 81       	ldd	r24, Y+4	; 0x04
    28e4:	9d 81       	ldd	r25, Y+5	; 0x05
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	09 f4       	brne	.+2      	; 0x28ec <DIO_enuGetPinValue+0x28>
    28ea:	7e c0       	rjmp	.+252    	; 0x29e8 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	84 30       	cpi	r24, 0x04	; 4
    28f0:	08 f0       	brcs	.+2      	; 0x28f4 <DIO_enuGetPinValue+0x30>
    28f2:	77 c0       	rjmp	.+238    	; 0x29e2 <DIO_enuGetPinValue+0x11e>
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	88 30       	cpi	r24, 0x08	; 8
    28f8:	08 f0       	brcs	.+2      	; 0x28fc <DIO_enuGetPinValue+0x38>
    28fa:	73 c0       	rjmp	.+230    	; 0x29e2 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	28 2f       	mov	r18, r24
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	3f 83       	std	Y+7, r19	; 0x07
    2904:	2e 83       	std	Y+6, r18	; 0x06
    2906:	4e 81       	ldd	r20, Y+6	; 0x06
    2908:	5f 81       	ldd	r21, Y+7	; 0x07
    290a:	41 30       	cpi	r20, 0x01	; 1
    290c:	51 05       	cpc	r21, r1
    290e:	59 f1       	breq	.+86     	; 0x2966 <DIO_enuGetPinValue+0xa2>
    2910:	8e 81       	ldd	r24, Y+6	; 0x06
    2912:	9f 81       	ldd	r25, Y+7	; 0x07
    2914:	82 30       	cpi	r24, 0x02	; 2
    2916:	91 05       	cpc	r25, r1
    2918:	34 f4       	brge	.+12     	; 0x2926 <DIO_enuGetPinValue+0x62>
    291a:	2e 81       	ldd	r18, Y+6	; 0x06
    291c:	3f 81       	ldd	r19, Y+7	; 0x07
    291e:	21 15       	cp	r18, r1
    2920:	31 05       	cpc	r19, r1
    2922:	69 f0       	breq	.+26     	; 0x293e <DIO_enuGetPinValue+0x7a>
    2924:	5b c0       	rjmp	.+182    	; 0x29dc <DIO_enuGetPinValue+0x118>
    2926:	4e 81       	ldd	r20, Y+6	; 0x06
    2928:	5f 81       	ldd	r21, Y+7	; 0x07
    292a:	42 30       	cpi	r20, 0x02	; 2
    292c:	51 05       	cpc	r21, r1
    292e:	79 f1       	breq	.+94     	; 0x298e <DIO_enuGetPinValue+0xca>
    2930:	8e 81       	ldd	r24, Y+6	; 0x06
    2932:	9f 81       	ldd	r25, Y+7	; 0x07
    2934:	83 30       	cpi	r24, 0x03	; 3
    2936:	91 05       	cpc	r25, r1
    2938:	09 f4       	brne	.+2      	; 0x293c <DIO_enuGetPinValue+0x78>
    293a:	3d c0       	rjmp	.+122    	; 0x29b6 <DIO_enuGetPinValue+0xf2>
    293c:	4f c0       	rjmp	.+158    	; 0x29dc <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    293e:	e9 e3       	ldi	r30, 0x39	; 57
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	28 2f       	mov	r18, r24
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	8b 81       	ldd	r24, Y+3	; 0x03
    294a:	88 2f       	mov	r24, r24
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	a9 01       	movw	r20, r18
    2950:	02 c0       	rjmp	.+4      	; 0x2956 <DIO_enuGetPinValue+0x92>
    2952:	55 95       	asr	r21
    2954:	47 95       	ror	r20
    2956:	8a 95       	dec	r24
    2958:	e2 f7       	brpl	.-8      	; 0x2952 <DIO_enuGetPinValue+0x8e>
    295a:	ca 01       	movw	r24, r20
    295c:	81 70       	andi	r24, 0x01	; 1
    295e:	ec 81       	ldd	r30, Y+4	; 0x04
    2960:	fd 81       	ldd	r31, Y+5	; 0x05
    2962:	80 83       	st	Z, r24
    2964:	3b c0       	rjmp	.+118    	; 0x29dc <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    2966:	e6 e3       	ldi	r30, 0x36	; 54
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	28 2f       	mov	r18, r24
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	88 2f       	mov	r24, r24
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	a9 01       	movw	r20, r18
    2978:	02 c0       	rjmp	.+4      	; 0x297e <DIO_enuGetPinValue+0xba>
    297a:	55 95       	asr	r21
    297c:	47 95       	ror	r20
    297e:	8a 95       	dec	r24
    2980:	e2 f7       	brpl	.-8      	; 0x297a <DIO_enuGetPinValue+0xb6>
    2982:	ca 01       	movw	r24, r20
    2984:	81 70       	andi	r24, 0x01	; 1
    2986:	ec 81       	ldd	r30, Y+4	; 0x04
    2988:	fd 81       	ldd	r31, Y+5	; 0x05
    298a:	80 83       	st	Z, r24
    298c:	27 c0       	rjmp	.+78     	; 0x29dc <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    298e:	e3 e3       	ldi	r30, 0x33	; 51
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	28 2f       	mov	r18, r24
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	88 2f       	mov	r24, r24
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a9 01       	movw	r20, r18
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <DIO_enuGetPinValue+0xe2>
    29a2:	55 95       	asr	r21
    29a4:	47 95       	ror	r20
    29a6:	8a 95       	dec	r24
    29a8:	e2 f7       	brpl	.-8      	; 0x29a2 <DIO_enuGetPinValue+0xde>
    29aa:	ca 01       	movw	r24, r20
    29ac:	81 70       	andi	r24, 0x01	; 1
    29ae:	ec 81       	ldd	r30, Y+4	; 0x04
    29b0:	fd 81       	ldd	r31, Y+5	; 0x05
    29b2:	80 83       	st	Z, r24
    29b4:	13 c0       	rjmp	.+38     	; 0x29dc <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    29b6:	e0 e3       	ldi	r30, 0x30	; 48
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	28 2f       	mov	r18, r24
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	8b 81       	ldd	r24, Y+3	; 0x03
    29c2:	88 2f       	mov	r24, r24
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	a9 01       	movw	r20, r18
    29c8:	02 c0       	rjmp	.+4      	; 0x29ce <DIO_enuGetPinValue+0x10a>
    29ca:	55 95       	asr	r21
    29cc:	47 95       	ror	r20
    29ce:	8a 95       	dec	r24
    29d0:	e2 f7       	brpl	.-8      	; 0x29ca <DIO_enuGetPinValue+0x106>
    29d2:	ca 01       	movw	r24, r20
    29d4:	81 70       	andi	r24, 0x01	; 1
    29d6:	ec 81       	ldd	r30, Y+4	; 0x04
    29d8:	fd 81       	ldd	r31, Y+5	; 0x05
    29da:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	05 c0       	rjmp	.+10     	; 0x29ec <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    29e2:	83 e0       	ldi	r24, 0x03	; 3
    29e4:	89 83       	std	Y+1, r24	; 0x01
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    29e8:	82 e0       	ldi	r24, 0x02	; 2
    29ea:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    29ee:	27 96       	adiw	r28, 0x07	; 7
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	cf 91       	pop	r28
    29fc:	df 91       	pop	r29
    29fe:	08 95       	ret

00002a00 <main>:
u8 row1=0,row2=0,row_ball=0;
u8 tog=1;
void ISR1();

void ISR2();
int main(){
    2a00:	0f 93       	push	r16
    2a02:	1f 93       	push	r17
    2a04:	df 93       	push	r29
    2a06:	cf 93       	push	r28
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
    2a0c:	c7 56       	subi	r28, 0x67	; 103
    2a0e:	d0 40       	sbci	r29, 0x00	; 0
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61

DIO_enuInit();
    2a1a:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_enuInit>
LCD_enuInit();
    2a1e:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_enuInit>
LCD_enuSendCommand(0x0c);
    2a22:	8c e0       	ldi	r24, 0x0C	; 12
    2a24:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCD_enuSendCommand>
EXTI_intialiation();
    2a28:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <EXTI_intialiation>
//EXTI_Enable_INT(INT0);
//EXTI_Enable_INT(INT1);
EXTI_Enable_INT(GLOBAL);
    2a2c:	83 e0       	ldi	r24, 0x03	; 3
    2a2e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <EXTI_Enable_INT>

EXTI_CallBack(&ISR1,INT0);
    2a32:	89 ed       	ldi	r24, 0xD9	; 217
    2a34:	99 e1       	ldi	r25, 0x19	; 25
    2a36:	60 e0       	ldi	r22, 0x00	; 0
    2a38:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <EXTI_CallBack>
EXTI_CallBack(&ISR2,INT1);
    2a3c:	8a e0       	ldi	r24, 0x0A	; 10
    2a3e:	9a e1       	ldi	r25, 0x1A	; 26
    2a40:	61 e0       	ldi	r22, 0x01	; 1
    2a42:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <EXTI_CallBack>




while(1){
	u8 player1=0,player2=0;
    2a46:	fe 01       	movw	r30, r28
    2a48:	e9 59       	subi	r30, 0x99	; 153
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	10 82       	st	Z, r1
    2a4e:	fe 01       	movw	r30, r28
    2a50:	ea 59       	subi	r30, 0x9A	; 154
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	10 82       	st	Z, r1
	                LCD_Clear();
    2a56:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_Clear>
			        LCD_GoTo(0,15);
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	6f e0       	ldi	r22, 0x0F	; 15
    2a5e:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
				    LCD_enuDisplayChar('|');
    2a62:	8c e7       	ldi	r24, 0x7C	; 124
    2a64:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>
				    LCD_GoTo(0,0);
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	60 e0       	ldi	r22, 0x00	; 0
    2a6c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
				    LCD_enuDisplayChar('|');
    2a70:	8c e7       	ldi	r24, 0x7C	; 124
    2a72:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>

				    LCD_GoTo(0,1);
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	61 e0       	ldi	r22, 0x01	; 1
    2a7a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
				    LCD_enuDisplayChar('o');
    2a7e:	8f e6       	ldi	r24, 0x6F	; 111
    2a80:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>
    2a84:	fe 01       	movw	r30, r28
    2a86:	e1 5a       	subi	r30, 0xA1	; 161
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	a8 e4       	ldi	r26, 0x48	; 72
    2a90:	b2 e4       	ldi	r27, 0x42	; 66
    2a92:	80 83       	st	Z, r24
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	a2 83       	std	Z+2, r26	; 0x02
    2a98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9a:	8e 01       	movw	r16, r28
    2a9c:	05 5a       	subi	r16, 0xA5	; 165
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e1 5a       	subi	r30, 0xA1	; 161
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4a e7       	ldi	r20, 0x7A	; 122
    2ab4:	53 e4       	ldi	r21, 0x43	; 67
    2ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	f8 01       	movw	r30, r16
    2ac0:	80 83       	st	Z, r24
    2ac2:	91 83       	std	Z+1, r25	; 0x01
    2ac4:	a2 83       	std	Z+2, r26	; 0x02
    2ac6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e5 5a       	subi	r30, 0xA5	; 165
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	60 81       	ld	r22, Z
    2ad0:	71 81       	ldd	r23, Z+1	; 0x01
    2ad2:	82 81       	ldd	r24, Z+2	; 0x02
    2ad4:	93 81       	ldd	r25, Z+3	; 0x03
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	44 f4       	brge	.+16     	; 0x2af6 <main+0xf6>
		__ticks = 1;
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	e7 5a       	subi	r30, 0xA7	; 167
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	80 83       	st	Z, r24
    2af4:	64 c0       	rjmp	.+200    	; 0x2bbe <main+0x1be>
	else if (__tmp > 65535)
    2af6:	fe 01       	movw	r30, r28
    2af8:	e5 5a       	subi	r30, 0xA5	; 165
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	82 81       	ldd	r24, Z+2	; 0x02
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	3f ef       	ldi	r19, 0xFF	; 255
    2b08:	4f e7       	ldi	r20, 0x7F	; 127
    2b0a:	57 e4       	ldi	r21, 0x47	; 71
    2b0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b10:	18 16       	cp	r1, r24
    2b12:	0c f0       	brlt	.+2      	; 0x2b16 <main+0x116>
    2b14:	43 c0       	rjmp	.+134    	; 0x2b9c <main+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b16:	fe 01       	movw	r30, r28
    2b18:	e1 5a       	subi	r30, 0xA1	; 161
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	60 81       	ld	r22, Z
    2b1e:	71 81       	ldd	r23, Z+1	; 0x01
    2b20:	82 81       	ldd	r24, Z+2	; 0x02
    2b22:	93 81       	ldd	r25, Z+3	; 0x03
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e2       	ldi	r20, 0x20	; 32
    2b2a:	51 e4       	ldi	r21, 0x41	; 65
    2b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	8e 01       	movw	r16, r28
    2b36:	07 5a       	subi	r16, 0xA7	; 167
    2b38:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3a:	bc 01       	movw	r22, r24
    2b3c:	cd 01       	movw	r24, r26
    2b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	f8 01       	movw	r30, r16
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
    2b4c:	1f c0       	rjmp	.+62     	; 0x2b8c <main+0x18c>
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e9 5a       	subi	r30, 0xA9	; 169
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	89 e1       	ldi	r24, 0x19	; 25
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	91 83       	std	Z+1, r25	; 0x01
    2b5a:	80 83       	st	Z, r24
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e9 5a       	subi	r30, 0xA9	; 169
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 81       	ld	r24, Z
    2b64:	91 81       	ldd	r25, Z+1	; 0x01
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <main+0x166>
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e9 5a       	subi	r30, 0xA9	; 169
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b74:	de 01       	movw	r26, r28
    2b76:	a7 5a       	subi	r26, 0xA7	; 167
    2b78:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e7 5a       	subi	r30, 0xA7	; 167
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	80 81       	ld	r24, Z
    2b82:	91 81       	ldd	r25, Z+1	; 0x01
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	11 96       	adiw	r26, 0x01	; 1
    2b88:	9c 93       	st	X, r25
    2b8a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	e7 5a       	subi	r30, 0xA7	; 167
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	80 81       	ld	r24, Z
    2b94:	91 81       	ldd	r25, Z+1	; 0x01
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	d1 f6       	brne	.-76     	; 0x2b4e <main+0x14e>
    2b9a:	27 c0       	rjmp	.+78     	; 0x2bea <main+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9c:	8e 01       	movw	r16, r28
    2b9e:	07 5a       	subi	r16, 0xA7	; 167
    2ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e5 5a       	subi	r30, 0xA5	; 165
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	60 81       	ld	r22, Z
    2baa:	71 81       	ldd	r23, Z+1	; 0x01
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	f8 01       	movw	r30, r16
    2bba:	91 83       	std	Z+1, r25	; 0x01
    2bbc:	80 83       	st	Z, r24
    2bbe:	de 01       	movw	r26, r28
    2bc0:	ab 5a       	subi	r26, 0xAB	; 171
    2bc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	e7 5a       	subi	r30, 0xA7	; 167
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	8d 93       	st	X+, r24
    2bd0:	9c 93       	st	X, r25
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	eb 5a       	subi	r30, 0xAB	; 171
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	80 81       	ld	r24, Z
    2bda:	91 81       	ldd	r25, Z+1	; 0x01
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	f1 f7       	brne	.-4      	; 0x2bdc <main+0x1dc>
    2be0:	fe 01       	movw	r30, r28
    2be2:	eb 5a       	subi	r30, 0xAB	; 171
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	91 83       	std	Z+1, r25	; 0x01
    2be8:	80 83       	st	Z, r24
				    _delay_ms(50);
				    LCD_GoTo(0,1);
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	61 e0       	ldi	r22, 0x01	; 1
    2bee:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
				    LCD_enuDisplayChar(' ');
    2bf2:	80 e2       	ldi	r24, 0x20	; 32
    2bf4:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>


	u8 turns=5;
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	eb 59       	subi	r30, 0x9B	; 155
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	85 e0       	ldi	r24, 0x05	; 5
    2c00:	80 83       	st	Z, r24
    2c02:	c5 c1       	rjmp	.+906    	; 0x2f8e <main+0x58e>
	while(turns){

		for(u8 col_ball =1;col_ball<14;col_ball++){
    2c04:	fe 01       	movw	r30, r28
    2c06:	ec 59       	subi	r30, 0x9C	; 156
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	80 83       	st	Z, r24
    2c0e:	d9 c0       	rjmp	.+434    	; 0x2dc2 <main+0x3c2>
			row_ball=((col_ball<<0)&1);
    2c10:	fe 01       	movw	r30, r28
    2c12:	ec 59       	subi	r30, 0x9C	; 156
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	80 81       	ld	r24, Z
    2c18:	81 70       	andi	r24, 0x01	; 1
    2c1a:	80 93 a4 00 	sts	0x00A4, r24

							    LCD_GoTo(row_ball,col_ball);
    2c1e:	80 91 a4 00 	lds	r24, 0x00A4
    2c22:	fe 01       	movw	r30, r28
    2c24:	ec 59       	subi	r30, 0x9C	; 156
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	60 81       	ld	r22, Z
    2c2a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
		    LCD_enuDisplayChar('o');
    2c2e:	8f e6       	ldi	r24, 0x6F	; 111
    2c30:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>
    2c34:	fe 01       	movw	r30, r28
    2c36:	ef 5a       	subi	r30, 0xAF	; 175
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	a8 e4       	ldi	r26, 0x48	; 72
    2c40:	b2 e4       	ldi	r27, 0x42	; 66
    2c42:	80 83       	st	Z, r24
    2c44:	91 83       	std	Z+1, r25	; 0x01
    2c46:	a2 83       	std	Z+2, r26	; 0x02
    2c48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4a:	8e 01       	movw	r16, r28
    2c4c:	03 5b       	subi	r16, 0xB3	; 179
    2c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c50:	fe 01       	movw	r30, r28
    2c52:	ef 5a       	subi	r30, 0xAF	; 175
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	60 81       	ld	r22, Z
    2c58:	71 81       	ldd	r23, Z+1	; 0x01
    2c5a:	82 81       	ldd	r24, Z+2	; 0x02
    2c5c:	93 81       	ldd	r25, Z+3	; 0x03
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	4a e7       	ldi	r20, 0x7A	; 122
    2c64:	53 e4       	ldi	r21, 0x43	; 67
    2c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	f8 01       	movw	r30, r16
    2c70:	80 83       	st	Z, r24
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	a2 83       	std	Z+2, r26	; 0x02
    2c76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c78:	fe 01       	movw	r30, r28
    2c7a:	e3 5b       	subi	r30, 0xB3	; 179
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	60 81       	ld	r22, Z
    2c80:	71 81       	ldd	r23, Z+1	; 0x01
    2c82:	82 81       	ldd	r24, Z+2	; 0x02
    2c84:	93 81       	ldd	r25, Z+3	; 0x03
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e8       	ldi	r20, 0x80	; 128
    2c8c:	5f e3       	ldi	r21, 0x3F	; 63
    2c8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c92:	88 23       	and	r24, r24
    2c94:	44 f4       	brge	.+16     	; 0x2ca6 <main+0x2a6>
		__ticks = 1;
    2c96:	fe 01       	movw	r30, r28
    2c98:	e5 5b       	subi	r30, 0xB5	; 181
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	91 83       	std	Z+1, r25	; 0x01
    2ca2:	80 83       	st	Z, r24
    2ca4:	64 c0       	rjmp	.+200    	; 0x2d6e <main+0x36e>
	else if (__tmp > 65535)
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e3 5b       	subi	r30, 0xB3	; 179
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	60 81       	ld	r22, Z
    2cae:	71 81       	ldd	r23, Z+1	; 0x01
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	3f ef       	ldi	r19, 0xFF	; 255
    2cb8:	4f e7       	ldi	r20, 0x7F	; 127
    2cba:	57 e4       	ldi	r21, 0x47	; 71
    2cbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc0:	18 16       	cp	r1, r24
    2cc2:	0c f0       	brlt	.+2      	; 0x2cc6 <main+0x2c6>
    2cc4:	43 c0       	rjmp	.+134    	; 0x2d4c <main+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	ef 5a       	subi	r30, 0xAF	; 175
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	60 81       	ld	r22, Z
    2cce:	71 81       	ldd	r23, Z+1	; 0x01
    2cd0:	82 81       	ldd	r24, Z+2	; 0x02
    2cd2:	93 81       	ldd	r25, Z+3	; 0x03
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e2       	ldi	r20, 0x20	; 32
    2cda:	51 e4       	ldi	r21, 0x41	; 65
    2cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	8e 01       	movw	r16, r28
    2ce6:	05 5b       	subi	r16, 0xB5	; 181
    2ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cea:	bc 01       	movw	r22, r24
    2cec:	cd 01       	movw	r24, r26
    2cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	f8 01       	movw	r30, r16
    2cf8:	91 83       	std	Z+1, r25	; 0x01
    2cfa:	80 83       	st	Z, r24
    2cfc:	1f c0       	rjmp	.+62     	; 0x2d3c <main+0x33c>
    2cfe:	fe 01       	movw	r30, r28
    2d00:	e7 5b       	subi	r30, 0xB7	; 183
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	89 e1       	ldi	r24, 0x19	; 25
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	91 83       	std	Z+1, r25	; 0x01
    2d0a:	80 83       	st	Z, r24
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	e7 5b       	subi	r30, 0xB7	; 183
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	80 81       	ld	r24, Z
    2d14:	91 81       	ldd	r25, Z+1	; 0x01
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	f1 f7       	brne	.-4      	; 0x2d16 <main+0x316>
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	e7 5b       	subi	r30, 0xB7	; 183
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	91 83       	std	Z+1, r25	; 0x01
    2d22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d24:	de 01       	movw	r26, r28
    2d26:	a5 5b       	subi	r26, 0xB5	; 181
    2d28:	bf 4f       	sbci	r27, 0xFF	; 255
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e5 5b       	subi	r30, 0xB5	; 181
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	80 81       	ld	r24, Z
    2d32:	91 81       	ldd	r25, Z+1	; 0x01
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	11 96       	adiw	r26, 0x01	; 1
    2d38:	9c 93       	st	X, r25
    2d3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	e5 5b       	subi	r30, 0xB5	; 181
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	80 81       	ld	r24, Z
    2d44:	91 81       	ldd	r25, Z+1	; 0x01
    2d46:	00 97       	sbiw	r24, 0x00	; 0
    2d48:	d1 f6       	brne	.-76     	; 0x2cfe <main+0x2fe>
    2d4a:	27 c0       	rjmp	.+78     	; 0x2d9a <main+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4c:	8e 01       	movw	r16, r28
    2d4e:	05 5b       	subi	r16, 0xB5	; 181
    2d50:	1f 4f       	sbci	r17, 0xFF	; 255
    2d52:	fe 01       	movw	r30, r28
    2d54:	e3 5b       	subi	r30, 0xB3	; 179
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	60 81       	ld	r22, Z
    2d5a:	71 81       	ldd	r23, Z+1	; 0x01
    2d5c:	82 81       	ldd	r24, Z+2	; 0x02
    2d5e:	93 81       	ldd	r25, Z+3	; 0x03
    2d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	f8 01       	movw	r30, r16
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	80 83       	st	Z, r24
    2d6e:	de 01       	movw	r26, r28
    2d70:	a9 5b       	subi	r26, 0xB9	; 185
    2d72:	bf 4f       	sbci	r27, 0xFF	; 255
    2d74:	fe 01       	movw	r30, r28
    2d76:	e5 5b       	subi	r30, 0xB5	; 181
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	80 81       	ld	r24, Z
    2d7c:	91 81       	ldd	r25, Z+1	; 0x01
    2d7e:	8d 93       	st	X+, r24
    2d80:	9c 93       	st	X, r25
    2d82:	fe 01       	movw	r30, r28
    2d84:	e9 5b       	subi	r30, 0xB9	; 185
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	80 81       	ld	r24, Z
    2d8a:	91 81       	ldd	r25, Z+1	; 0x01
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	f1 f7       	brne	.-4      	; 0x2d8c <main+0x38c>
    2d90:	fe 01       	movw	r30, r28
    2d92:	e9 5b       	subi	r30, 0xB9	; 185
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	91 83       	std	Z+1, r25	; 0x01
    2d98:	80 83       	st	Z, r24
		    _delay_ms(50);
		    LCD_GoTo(row_ball,col_ball);
    2d9a:	80 91 a4 00 	lds	r24, 0x00A4
    2d9e:	fe 01       	movw	r30, r28
    2da0:	ec 59       	subi	r30, 0x9C	; 156
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	60 81       	ld	r22, Z
    2da6:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
		   	LCD_enuDisplayChar(' ');
    2daa:	80 e2       	ldi	r24, 0x20	; 32
    2dac:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>


	u8 turns=5;
	while(turns){

		for(u8 col_ball =1;col_ball<14;col_ball++){
    2db0:	de 01       	movw	r26, r28
    2db2:	ac 59       	subi	r26, 0x9C	; 156
    2db4:	bf 4f       	sbci	r27, 0xFF	; 255
    2db6:	fe 01       	movw	r30, r28
    2db8:	ec 59       	subi	r30, 0x9C	; 156
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	80 81       	ld	r24, Z
    2dbe:	8f 5f       	subi	r24, 0xFF	; 255
    2dc0:	8c 93       	st	X, r24
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	ec 59       	subi	r30, 0x9C	; 156
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	80 81       	ld	r24, Z
    2dca:	8e 30       	cpi	r24, 0x0E	; 14
    2dcc:	08 f4       	brcc	.+2      	; 0x2dd0 <main+0x3d0>
    2dce:	20 cf       	rjmp	.-448    	; 0x2c10 <main+0x210>
		    _delay_ms(50);
		    LCD_GoTo(row_ball,col_ball);
		   	LCD_enuDisplayChar(' ');
		}

		if(row1==row_ball){
    2dd0:	90 91 a2 00 	lds	r25, 0x00A2
    2dd4:	80 91 a4 00 	lds	r24, 0x00A4
    2dd8:	98 17       	cp	r25, r24
    2dda:	49 f4       	brne	.+18     	; 0x2dee <main+0x3ee>
			player1++;
    2ddc:	de 01       	movw	r26, r28
    2dde:	a9 59       	subi	r26, 0x99	; 153
    2de0:	bf 4f       	sbci	r27, 0xFF	; 255
    2de2:	fe 01       	movw	r30, r28
    2de4:	e9 59       	subi	r30, 0x99	; 153
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	80 81       	ld	r24, Z
    2dea:	8f 5f       	subi	r24, 0xFF	; 255
    2dec:	8c 93       	st	X, r24





		for(u8 col_ball =13;col_ball>1;col_ball--){
    2dee:	fe 01       	movw	r30, r28
    2df0:	ed 59       	subi	r30, 0x9D	; 157
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	8d e0       	ldi	r24, 0x0D	; 13
    2df6:	80 83       	st	Z, r24
    2df8:	ab c0       	rjmp	.+342    	; 0x2f50 <main+0x550>
					row_ball=((col_ball<<0)&1);
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	ed 59       	subi	r30, 0x9D	; 157
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	80 81       	ld	r24, Z
    2e02:	81 70       	andi	r24, 0x01	; 1
    2e04:	80 93 a4 00 	sts	0x00A4, r24

				    LCD_GoTo(row_ball,col_ball);
    2e08:	80 91 a4 00 	lds	r24, 0x00A4
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	ed 59       	subi	r30, 0x9D	; 157
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	60 81       	ld	r22, Z
    2e14:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
				    LCD_enuDisplayChar('o');
    2e18:	8f e6       	ldi	r24, 0x6F	; 111
    2e1a:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>
    2e1e:	fe 01       	movw	r30, r28
    2e20:	ed 5b       	subi	r30, 0xBD	; 189
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	a8 e4       	ldi	r26, 0x48	; 72
    2e2a:	b2 e4       	ldi	r27, 0x42	; 66
    2e2c:	80 83       	st	Z, r24
    2e2e:	91 83       	std	Z+1, r25	; 0x01
    2e30:	a2 83       	std	Z+2, r26	; 0x02
    2e32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e34:	8e 01       	movw	r16, r28
    2e36:	01 5c       	subi	r16, 0xC1	; 193
    2e38:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	ed 5b       	subi	r30, 0xBD	; 189
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	60 81       	ld	r22, Z
    2e42:	71 81       	ldd	r23, Z+1	; 0x01
    2e44:	82 81       	ldd	r24, Z+2	; 0x02
    2e46:	93 81       	ldd	r25, Z+3	; 0x03
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	4a e7       	ldi	r20, 0x7A	; 122
    2e4e:	53 e4       	ldi	r21, 0x43	; 67
    2e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	f8 01       	movw	r30, r16
    2e5a:	80 83       	st	Z, r24
    2e5c:	91 83       	std	Z+1, r25	; 0x01
    2e5e:	a2 83       	std	Z+2, r26	; 0x02
    2e60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e62:	fe 01       	movw	r30, r28
    2e64:	ff 96       	adiw	r30, 0x3f	; 63
    2e66:	60 81       	ld	r22, Z
    2e68:	71 81       	ldd	r23, Z+1	; 0x01
    2e6a:	82 81       	ldd	r24, Z+2	; 0x02
    2e6c:	93 81       	ldd	r25, Z+3	; 0x03
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e8       	ldi	r20, 0x80	; 128
    2e74:	5f e3       	ldi	r21, 0x3F	; 63
    2e76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e7a:	88 23       	and	r24, r24
    2e7c:	2c f4       	brge	.+10     	; 0x2e88 <main+0x488>
		__ticks = 1;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	9e af       	std	Y+62, r25	; 0x3e
    2e84:	8d af       	std	Y+61, r24	; 0x3d
    2e86:	46 c0       	rjmp	.+140    	; 0x2f14 <main+0x514>
	else if (__tmp > 65535)
    2e88:	fe 01       	movw	r30, r28
    2e8a:	ff 96       	adiw	r30, 0x3f	; 63
    2e8c:	60 81       	ld	r22, Z
    2e8e:	71 81       	ldd	r23, Z+1	; 0x01
    2e90:	82 81       	ldd	r24, Z+2	; 0x02
    2e92:	93 81       	ldd	r25, Z+3	; 0x03
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	3f ef       	ldi	r19, 0xFF	; 255
    2e98:	4f e7       	ldi	r20, 0x7F	; 127
    2e9a:	57 e4       	ldi	r21, 0x47	; 71
    2e9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ea0:	18 16       	cp	r1, r24
    2ea2:	64 f5       	brge	.+88     	; 0x2efc <main+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	ed 5b       	subi	r30, 0xBD	; 189
    2ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eaa:	60 81       	ld	r22, Z
    2eac:	71 81       	ldd	r23, Z+1	; 0x01
    2eae:	82 81       	ldd	r24, Z+2	; 0x02
    2eb0:	93 81       	ldd	r25, Z+3	; 0x03
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	40 e2       	ldi	r20, 0x20	; 32
    2eb8:	51 e4       	ldi	r21, 0x41	; 65
    2eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	bc 01       	movw	r22, r24
    2ec4:	cd 01       	movw	r24, r26
    2ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	9e af       	std	Y+62, r25	; 0x3e
    2ed0:	8d af       	std	Y+61, r24	; 0x3d
    2ed2:	0f c0       	rjmp	.+30     	; 0x2ef2 <main+0x4f2>
    2ed4:	89 e1       	ldi	r24, 0x19	; 25
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	9c af       	std	Y+60, r25	; 0x3c
    2eda:	8b af       	std	Y+59, r24	; 0x3b
    2edc:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ede:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	f1 f7       	brne	.-4      	; 0x2ee0 <main+0x4e0>
    2ee4:	9c af       	std	Y+60, r25	; 0x3c
    2ee6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eea:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	9e af       	std	Y+62, r25	; 0x3e
    2ef0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ef4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ef6:	00 97       	sbiw	r24, 0x00	; 0
    2ef8:	69 f7       	brne	.-38     	; 0x2ed4 <main+0x4d4>
    2efa:	16 c0       	rjmp	.+44     	; 0x2f28 <main+0x528>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2efc:	fe 01       	movw	r30, r28
    2efe:	ff 96       	adiw	r30, 0x3f	; 63
    2f00:	60 81       	ld	r22, Z
    2f02:	71 81       	ldd	r23, Z+1	; 0x01
    2f04:	82 81       	ldd	r24, Z+2	; 0x02
    2f06:	93 81       	ldd	r25, Z+3	; 0x03
    2f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	9e af       	std	Y+62, r25	; 0x3e
    2f12:	8d af       	std	Y+61, r24	; 0x3d
    2f14:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f16:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f18:	9a af       	std	Y+58, r25	; 0x3a
    2f1a:	89 af       	std	Y+57, r24	; 0x39
    2f1c:	89 ad       	ldd	r24, Y+57	; 0x39
    2f1e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	f1 f7       	brne	.-4      	; 0x2f20 <main+0x520>
    2f24:	9a af       	std	Y+58, r25	; 0x3a
    2f26:	89 af       	std	Y+57, r24	; 0x39
				    _delay_ms(50);
				    LCD_GoTo(row_ball,col_ball);
    2f28:	80 91 a4 00 	lds	r24, 0x00A4
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	ed 59       	subi	r30, 0x9D	; 157
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	60 81       	ld	r22, Z
    2f34:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
				   	LCD_enuDisplayChar(' ');
    2f38:	80 e2       	ldi	r24, 0x20	; 32
    2f3a:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>





		for(u8 col_ball =13;col_ball>1;col_ball--){
    2f3e:	de 01       	movw	r26, r28
    2f40:	ad 59       	subi	r26, 0x9D	; 157
    2f42:	bf 4f       	sbci	r27, 0xFF	; 255
    2f44:	fe 01       	movw	r30, r28
    2f46:	ed 59       	subi	r30, 0x9D	; 157
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	80 81       	ld	r24, Z
    2f4c:	81 50       	subi	r24, 0x01	; 1
    2f4e:	8c 93       	st	X, r24
    2f50:	fe 01       	movw	r30, r28
    2f52:	ed 59       	subi	r30, 0x9D	; 157
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	80 81       	ld	r24, Z
    2f58:	82 30       	cpi	r24, 0x02	; 2
    2f5a:	08 f0       	brcs	.+2      	; 0x2f5e <main+0x55e>
    2f5c:	4e cf       	rjmp	.-356    	; 0x2dfa <main+0x3fa>
				    _delay_ms(50);
				    LCD_GoTo(row_ball,col_ball);
				   	LCD_enuDisplayChar(' ');
				}

		if(row2== row_ball){
    2f5e:	90 91 a3 00 	lds	r25, 0x00A3
    2f62:	80 91 a4 00 	lds	r24, 0x00A4
    2f66:	98 17       	cp	r25, r24
    2f68:	49 f4       	brne	.+18     	; 0x2f7c <main+0x57c>
					player2++;
    2f6a:	de 01       	movw	r26, r28
    2f6c:	aa 59       	subi	r26, 0x9A	; 154
    2f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f70:	fe 01       	movw	r30, r28
    2f72:	ea 59       	subi	r30, 0x9A	; 154
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	80 81       	ld	r24, Z
    2f78:	8f 5f       	subi	r24, 0xFF	; 255
    2f7a:	8c 93       	st	X, r24
				}



            turns--;
    2f7c:	de 01       	movw	r26, r28
    2f7e:	ab 59       	subi	r26, 0x9B	; 155
    2f80:	bf 4f       	sbci	r27, 0xFF	; 255
    2f82:	fe 01       	movw	r30, r28
    2f84:	eb 59       	subi	r30, 0x9B	; 155
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	80 81       	ld	r24, Z
    2f8a:	81 50       	subi	r24, 0x01	; 1
    2f8c:	8c 93       	st	X, r24
				    LCD_GoTo(0,1);
				    LCD_enuDisplayChar(' ');


	u8 turns=5;
	while(turns){
    2f8e:	fe 01       	movw	r30, r28
    2f90:	eb 59       	subi	r30, 0x9B	; 155
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	80 81       	ld	r24, Z
    2f96:	88 23       	and	r24, r24
    2f98:	09 f0       	breq	.+2      	; 0x2f9c <main+0x59c>
    2f9a:	34 ce       	rjmp	.-920    	; 0x2c04 <main+0x204>


            turns--;

	}
	LCD_Clear();
    2f9c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_Clear>
			LCD_GoTo(0,5);
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	65 e0       	ldi	r22, 0x05	; 5
    2fa4:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
	        LCD_enuSendString("GAME OVER");
    2fa8:	80 e6       	ldi	r24, 0x60	; 96
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_enuSendString>
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	aa ef       	ldi	r26, 0xFA	; 250
    2fb6:	b3 e4       	ldi	r27, 0x43	; 67
    2fb8:	8d ab       	std	Y+53, r24	; 0x35
    2fba:	9e ab       	std	Y+54, r25	; 0x36
    2fbc:	af ab       	std	Y+55, r26	; 0x37
    2fbe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc0:	6d a9       	ldd	r22, Y+53	; 0x35
    2fc2:	7e a9       	ldd	r23, Y+54	; 0x36
    2fc4:	8f a9       	ldd	r24, Y+55	; 0x37
    2fc6:	98 ad       	ldd	r25, Y+56	; 0x38
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	4a e7       	ldi	r20, 0x7A	; 122
    2fce:	53 e4       	ldi	r21, 0x43	; 67
    2fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	89 ab       	std	Y+49, r24	; 0x31
    2fda:	9a ab       	std	Y+50, r25	; 0x32
    2fdc:	ab ab       	std	Y+51, r26	; 0x33
    2fde:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fe0:	69 a9       	ldd	r22, Y+49	; 0x31
    2fe2:	7a a9       	ldd	r23, Y+50	; 0x32
    2fe4:	8b a9       	ldd	r24, Y+51	; 0x33
    2fe6:	9c a9       	ldd	r25, Y+52	; 0x34
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e8       	ldi	r20, 0x80	; 128
    2fee:	5f e3       	ldi	r21, 0x3F	; 63
    2ff0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ff4:	88 23       	and	r24, r24
    2ff6:	2c f4       	brge	.+10     	; 0x3002 <main+0x602>
		__ticks = 1;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	98 ab       	std	Y+48, r25	; 0x30
    2ffe:	8f a7       	std	Y+47, r24	; 0x2f
    3000:	3f c0       	rjmp	.+126    	; 0x3080 <main+0x680>
	else if (__tmp > 65535)
    3002:	69 a9       	ldd	r22, Y+49	; 0x31
    3004:	7a a9       	ldd	r23, Y+50	; 0x32
    3006:	8b a9       	ldd	r24, Y+51	; 0x33
    3008:	9c a9       	ldd	r25, Y+52	; 0x34
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	3f ef       	ldi	r19, 0xFF	; 255
    300e:	4f e7       	ldi	r20, 0x7F	; 127
    3010:	57 e4       	ldi	r21, 0x47	; 71
    3012:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3016:	18 16       	cp	r1, r24
    3018:	4c f5       	brge	.+82     	; 0x306c <main+0x66c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301a:	6d a9       	ldd	r22, Y+53	; 0x35
    301c:	7e a9       	ldd	r23, Y+54	; 0x36
    301e:	8f a9       	ldd	r24, Y+55	; 0x37
    3020:	98 ad       	ldd	r25, Y+56	; 0x38
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e2       	ldi	r20, 0x20	; 32
    3028:	51 e4       	ldi	r21, 0x41	; 65
    302a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	bc 01       	movw	r22, r24
    3034:	cd 01       	movw	r24, r26
    3036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	98 ab       	std	Y+48, r25	; 0x30
    3040:	8f a7       	std	Y+47, r24	; 0x2f
    3042:	0f c0       	rjmp	.+30     	; 0x3062 <main+0x662>
    3044:	89 e1       	ldi	r24, 0x19	; 25
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	9e a7       	std	Y+46, r25	; 0x2e
    304a:	8d a7       	std	Y+45, r24	; 0x2d
    304c:	8d a5       	ldd	r24, Y+45	; 0x2d
    304e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	f1 f7       	brne	.-4      	; 0x3050 <main+0x650>
    3054:	9e a7       	std	Y+46, r25	; 0x2e
    3056:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3058:	8f a5       	ldd	r24, Y+47	; 0x2f
    305a:	98 a9       	ldd	r25, Y+48	; 0x30
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	98 ab       	std	Y+48, r25	; 0x30
    3060:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3062:	8f a5       	ldd	r24, Y+47	; 0x2f
    3064:	98 a9       	ldd	r25, Y+48	; 0x30
    3066:	00 97       	sbiw	r24, 0x00	; 0
    3068:	69 f7       	brne	.-38     	; 0x3044 <main+0x644>
    306a:	14 c0       	rjmp	.+40     	; 0x3094 <main+0x694>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    306c:	69 a9       	ldd	r22, Y+49	; 0x31
    306e:	7a a9       	ldd	r23, Y+50	; 0x32
    3070:	8b a9       	ldd	r24, Y+51	; 0x33
    3072:	9c a9       	ldd	r25, Y+52	; 0x34
    3074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	98 ab       	std	Y+48, r25	; 0x30
    307e:	8f a7       	std	Y+47, r24	; 0x2f
    3080:	8f a5       	ldd	r24, Y+47	; 0x2f
    3082:	98 a9       	ldd	r25, Y+48	; 0x30
    3084:	9c a7       	std	Y+44, r25	; 0x2c
    3086:	8b a7       	std	Y+43, r24	; 0x2b
    3088:	8b a5       	ldd	r24, Y+43	; 0x2b
    308a:	9c a5       	ldd	r25, Y+44	; 0x2c
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <main+0x68c>
    3090:	9c a7       	std	Y+44, r25	; 0x2c
    3092:	8b a7       	std	Y+43, r24	; 0x2b
          _delay_ms(500);

	if(player1>player2){
    3094:	fe 01       	movw	r30, r28
    3096:	e9 59       	subi	r30, 0x99	; 153
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	de 01       	movw	r26, r28
    309c:	aa 59       	subi	r26, 0x9A	; 154
    309e:	bf 4f       	sbci	r27, 0xFF	; 255
    30a0:	90 81       	ld	r25, Z
    30a2:	8c 91       	ld	r24, X
    30a4:	89 17       	cp	r24, r25
    30a6:	08 f0       	brcs	.+2      	; 0x30aa <main+0x6aa>
    30a8:	7d c0       	rjmp	.+250    	; 0x31a4 <main+0x7a4>
		LCD_Clear();
    30aa:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_Clear>
		LCD_GoTo(0,1);
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	61 e0       	ldi	r22, 0x01	; 1
    30b2:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
        LCD_enuSendString("Player1 wins");
    30b6:	8a e6       	ldi	r24, 0x6A	; 106
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_enuSendString>
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	aa ef       	ldi	r26, 0xFA	; 250
    30c4:	b3 e4       	ldi	r27, 0x43	; 67
    30c6:	8f a3       	std	Y+39, r24	; 0x27
    30c8:	98 a7       	std	Y+40, r25	; 0x28
    30ca:	a9 a7       	std	Y+41, r26	; 0x29
    30cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ce:	6f a1       	ldd	r22, Y+39	; 0x27
    30d0:	78 a5       	ldd	r23, Y+40	; 0x28
    30d2:	89 a5       	ldd	r24, Y+41	; 0x29
    30d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	4a e7       	ldi	r20, 0x7A	; 122
    30dc:	53 e4       	ldi	r21, 0x43	; 67
    30de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	8b a3       	std	Y+35, r24	; 0x23
    30e8:	9c a3       	std	Y+36, r25	; 0x24
    30ea:	ad a3       	std	Y+37, r26	; 0x25
    30ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30ee:	6b a1       	ldd	r22, Y+35	; 0x23
    30f0:	7c a1       	ldd	r23, Y+36	; 0x24
    30f2:	8d a1       	ldd	r24, Y+37	; 0x25
    30f4:	9e a1       	ldd	r25, Y+38	; 0x26
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e8       	ldi	r20, 0x80	; 128
    30fc:	5f e3       	ldi	r21, 0x3F	; 63
    30fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3102:	88 23       	and	r24, r24
    3104:	2c f4       	brge	.+10     	; 0x3110 <main+0x710>
		__ticks = 1;
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	9a a3       	std	Y+34, r25	; 0x22
    310c:	89 a3       	std	Y+33, r24	; 0x21
    310e:	3f c0       	rjmp	.+126    	; 0x318e <main+0x78e>
	else if (__tmp > 65535)
    3110:	6b a1       	ldd	r22, Y+35	; 0x23
    3112:	7c a1       	ldd	r23, Y+36	; 0x24
    3114:	8d a1       	ldd	r24, Y+37	; 0x25
    3116:	9e a1       	ldd	r25, Y+38	; 0x26
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	3f ef       	ldi	r19, 0xFF	; 255
    311c:	4f e7       	ldi	r20, 0x7F	; 127
    311e:	57 e4       	ldi	r21, 0x47	; 71
    3120:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3124:	18 16       	cp	r1, r24
    3126:	4c f5       	brge	.+82     	; 0x317a <main+0x77a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3128:	6f a1       	ldd	r22, Y+39	; 0x27
    312a:	78 a5       	ldd	r23, Y+40	; 0x28
    312c:	89 a5       	ldd	r24, Y+41	; 0x29
    312e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	40 e2       	ldi	r20, 0x20	; 32
    3136:	51 e4       	ldi	r21, 0x41	; 65
    3138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	bc 01       	movw	r22, r24
    3142:	cd 01       	movw	r24, r26
    3144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	9a a3       	std	Y+34, r25	; 0x22
    314e:	89 a3       	std	Y+33, r24	; 0x21
    3150:	0f c0       	rjmp	.+30     	; 0x3170 <main+0x770>
    3152:	89 e1       	ldi	r24, 0x19	; 25
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	98 a3       	std	Y+32, r25	; 0x20
    3158:	8f 8f       	std	Y+31, r24	; 0x1f
    315a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    315c:	98 a1       	ldd	r25, Y+32	; 0x20
    315e:	01 97       	sbiw	r24, 0x01	; 1
    3160:	f1 f7       	brne	.-4      	; 0x315e <main+0x75e>
    3162:	98 a3       	std	Y+32, r25	; 0x20
    3164:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3166:	89 a1       	ldd	r24, Y+33	; 0x21
    3168:	9a a1       	ldd	r25, Y+34	; 0x22
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	9a a3       	std	Y+34, r25	; 0x22
    316e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3170:	89 a1       	ldd	r24, Y+33	; 0x21
    3172:	9a a1       	ldd	r25, Y+34	; 0x22
    3174:	00 97       	sbiw	r24, 0x00	; 0
    3176:	69 f7       	brne	.-38     	; 0x3152 <main+0x752>
    3178:	19 c1       	rjmp	.+562    	; 0x33ac <main+0x9ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317a:	6b a1       	ldd	r22, Y+35	; 0x23
    317c:	7c a1       	ldd	r23, Y+36	; 0x24
    317e:	8d a1       	ldd	r24, Y+37	; 0x25
    3180:	9e a1       	ldd	r25, Y+38	; 0x26
    3182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	9a a3       	std	Y+34, r25	; 0x22
    318c:	89 a3       	std	Y+33, r24	; 0x21
    318e:	89 a1       	ldd	r24, Y+33	; 0x21
    3190:	9a a1       	ldd	r25, Y+34	; 0x22
    3192:	9e 8f       	std	Y+30, r25	; 0x1e
    3194:	8d 8f       	std	Y+29, r24	; 0x1d
    3196:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3198:	9e 8d       	ldd	r25, Y+30	; 0x1e
    319a:	01 97       	sbiw	r24, 0x01	; 1
    319c:	f1 f7       	brne	.-4      	; 0x319a <main+0x79a>
    319e:	9e 8f       	std	Y+30, r25	; 0x1e
    31a0:	8d 8f       	std	Y+29, r24	; 0x1d
    31a2:	04 c1       	rjmp	.+520    	; 0x33ac <main+0x9ac>
        _delay_ms(500);
	}
	else if(player2>player1){
    31a4:	fe 01       	movw	r30, r28
    31a6:	ea 59       	subi	r30, 0x9A	; 154
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	de 01       	movw	r26, r28
    31ac:	a9 59       	subi	r26, 0x99	; 153
    31ae:	bf 4f       	sbci	r27, 0xFF	; 255
    31b0:	90 81       	ld	r25, Z
    31b2:	8c 91       	ld	r24, X
    31b4:	89 17       	cp	r24, r25
    31b6:	08 f0       	brcs	.+2      	; 0x31ba <main+0x7ba>
    31b8:	7d c0       	rjmp	.+250    	; 0x32b4 <main+0x8b4>
		        LCD_Clear();
    31ba:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_Clear>
				LCD_GoTo(0,1);
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	61 e0       	ldi	r22, 0x01	; 1
    31c2:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
		        LCD_enuSendString("Player2 wins");
    31c6:	87 e7       	ldi	r24, 0x77	; 119
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_enuSendString>
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	aa ef       	ldi	r26, 0xFA	; 250
    31d4:	b3 e4       	ldi	r27, 0x43	; 67
    31d6:	89 8f       	std	Y+25, r24	; 0x19
    31d8:	9a 8f       	std	Y+26, r25	; 0x1a
    31da:	ab 8f       	std	Y+27, r26	; 0x1b
    31dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31de:	69 8d       	ldd	r22, Y+25	; 0x19
    31e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	4a e7       	ldi	r20, 0x7A	; 122
    31ec:	53 e4       	ldi	r21, 0x43	; 67
    31ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	8d 8b       	std	Y+21, r24	; 0x15
    31f8:	9e 8b       	std	Y+22, r25	; 0x16
    31fa:	af 8b       	std	Y+23, r26	; 0x17
    31fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3200:	7e 89       	ldd	r23, Y+22	; 0x16
    3202:	8f 89       	ldd	r24, Y+23	; 0x17
    3204:	98 8d       	ldd	r25, Y+24	; 0x18
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	40 e8       	ldi	r20, 0x80	; 128
    320c:	5f e3       	ldi	r21, 0x3F	; 63
    320e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3212:	88 23       	and	r24, r24
    3214:	2c f4       	brge	.+10     	; 0x3220 <main+0x820>
		__ticks = 1;
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	9c 8b       	std	Y+20, r25	; 0x14
    321c:	8b 8b       	std	Y+19, r24	; 0x13
    321e:	3f c0       	rjmp	.+126    	; 0x329e <main+0x89e>
	else if (__tmp > 65535)
    3220:	6d 89       	ldd	r22, Y+21	; 0x15
    3222:	7e 89       	ldd	r23, Y+22	; 0x16
    3224:	8f 89       	ldd	r24, Y+23	; 0x17
    3226:	98 8d       	ldd	r25, Y+24	; 0x18
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	3f ef       	ldi	r19, 0xFF	; 255
    322c:	4f e7       	ldi	r20, 0x7F	; 127
    322e:	57 e4       	ldi	r21, 0x47	; 71
    3230:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3234:	18 16       	cp	r1, r24
    3236:	4c f5       	brge	.+82     	; 0x328a <main+0x88a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3238:	69 8d       	ldd	r22, Y+25	; 0x19
    323a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    323c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    323e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e2       	ldi	r20, 0x20	; 32
    3246:	51 e4       	ldi	r21, 0x41	; 65
    3248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	bc 01       	movw	r22, r24
    3252:	cd 01       	movw	r24, r26
    3254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	9c 8b       	std	Y+20, r25	; 0x14
    325e:	8b 8b       	std	Y+19, r24	; 0x13
    3260:	0f c0       	rjmp	.+30     	; 0x3280 <main+0x880>
    3262:	89 e1       	ldi	r24, 0x19	; 25
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	9a 8b       	std	Y+18, r25	; 0x12
    3268:	89 8b       	std	Y+17, r24	; 0x11
    326a:	89 89       	ldd	r24, Y+17	; 0x11
    326c:	9a 89       	ldd	r25, Y+18	; 0x12
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	f1 f7       	brne	.-4      	; 0x326e <main+0x86e>
    3272:	9a 8b       	std	Y+18, r25	; 0x12
    3274:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3276:	8b 89       	ldd	r24, Y+19	; 0x13
    3278:	9c 89       	ldd	r25, Y+20	; 0x14
    327a:	01 97       	sbiw	r24, 0x01	; 1
    327c:	9c 8b       	std	Y+20, r25	; 0x14
    327e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3280:	8b 89       	ldd	r24, Y+19	; 0x13
    3282:	9c 89       	ldd	r25, Y+20	; 0x14
    3284:	00 97       	sbiw	r24, 0x00	; 0
    3286:	69 f7       	brne	.-38     	; 0x3262 <main+0x862>
    3288:	91 c0       	rjmp	.+290    	; 0x33ac <main+0x9ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    328a:	6d 89       	ldd	r22, Y+21	; 0x15
    328c:	7e 89       	ldd	r23, Y+22	; 0x16
    328e:	8f 89       	ldd	r24, Y+23	; 0x17
    3290:	98 8d       	ldd	r25, Y+24	; 0x18
    3292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	9c 8b       	std	Y+20, r25	; 0x14
    329c:	8b 8b       	std	Y+19, r24	; 0x13
    329e:	8b 89       	ldd	r24, Y+19	; 0x13
    32a0:	9c 89       	ldd	r25, Y+20	; 0x14
    32a2:	98 8b       	std	Y+16, r25	; 0x10
    32a4:	8f 87       	std	Y+15, r24	; 0x0f
    32a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a8:	98 89       	ldd	r25, Y+16	; 0x10
    32aa:	01 97       	sbiw	r24, 0x01	; 1
    32ac:	f1 f7       	brne	.-4      	; 0x32aa <main+0x8aa>
    32ae:	98 8b       	std	Y+16, r25	; 0x10
    32b0:	8f 87       	std	Y+15, r24	; 0x0f
    32b2:	7c c0       	rjmp	.+248    	; 0x33ac <main+0x9ac>
		        _delay_ms(500);
	}
	else{
		LCD_Clear();
    32b4:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_Clear>
						LCD_GoTo(0,0);
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	60 e0       	ldi	r22, 0x00	; 0
    32bc:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
				        LCD_enuSendString("result is tie");
    32c0:	84 e8       	ldi	r24, 0x84	; 132
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_enuSendString>
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	aa ef       	ldi	r26, 0xFA	; 250
    32ce:	b3 e4       	ldi	r27, 0x43	; 67
    32d0:	8b 87       	std	Y+11, r24	; 0x0b
    32d2:	9c 87       	std	Y+12, r25	; 0x0c
    32d4:	ad 87       	std	Y+13, r26	; 0x0d
    32d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32da:	7c 85       	ldd	r23, Y+12	; 0x0c
    32dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32de:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	4a e7       	ldi	r20, 0x7A	; 122
    32e6:	53 e4       	ldi	r21, 0x43	; 67
    32e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	8f 83       	std	Y+7, r24	; 0x07
    32f2:	98 87       	std	Y+8, r25	; 0x08
    32f4:	a9 87       	std	Y+9, r26	; 0x09
    32f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32f8:	6f 81       	ldd	r22, Y+7	; 0x07
    32fa:	78 85       	ldd	r23, Y+8	; 0x08
    32fc:	89 85       	ldd	r24, Y+9	; 0x09
    32fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	40 e8       	ldi	r20, 0x80	; 128
    3306:	5f e3       	ldi	r21, 0x3F	; 63
    3308:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    330c:	88 23       	and	r24, r24
    330e:	2c f4       	brge	.+10     	; 0x331a <main+0x91a>
		__ticks = 1;
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	9e 83       	std	Y+6, r25	; 0x06
    3316:	8d 83       	std	Y+5, r24	; 0x05
    3318:	3f c0       	rjmp	.+126    	; 0x3398 <main+0x998>
	else if (__tmp > 65535)
    331a:	6f 81       	ldd	r22, Y+7	; 0x07
    331c:	78 85       	ldd	r23, Y+8	; 0x08
    331e:	89 85       	ldd	r24, Y+9	; 0x09
    3320:	9a 85       	ldd	r25, Y+10	; 0x0a
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	3f ef       	ldi	r19, 0xFF	; 255
    3326:	4f e7       	ldi	r20, 0x7F	; 127
    3328:	57 e4       	ldi	r21, 0x47	; 71
    332a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    332e:	18 16       	cp	r1, r24
    3330:	4c f5       	brge	.+82     	; 0x3384 <main+0x984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3332:	6b 85       	ldd	r22, Y+11	; 0x0b
    3334:	7c 85       	ldd	r23, Y+12	; 0x0c
    3336:	8d 85       	ldd	r24, Y+13	; 0x0d
    3338:	9e 85       	ldd	r25, Y+14	; 0x0e
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	40 e2       	ldi	r20, 0x20	; 32
    3340:	51 e4       	ldi	r21, 0x41	; 65
    3342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	bc 01       	movw	r22, r24
    334c:	cd 01       	movw	r24, r26
    334e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	9e 83       	std	Y+6, r25	; 0x06
    3358:	8d 83       	std	Y+5, r24	; 0x05
    335a:	0f c0       	rjmp	.+30     	; 0x337a <main+0x97a>
    335c:	89 e1       	ldi	r24, 0x19	; 25
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	9c 83       	std	Y+4, r25	; 0x04
    3362:	8b 83       	std	Y+3, r24	; 0x03
    3364:	8b 81       	ldd	r24, Y+3	; 0x03
    3366:	9c 81       	ldd	r25, Y+4	; 0x04
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	f1 f7       	brne	.-4      	; 0x3368 <main+0x968>
    336c:	9c 83       	std	Y+4, r25	; 0x04
    336e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3370:	8d 81       	ldd	r24, Y+5	; 0x05
    3372:	9e 81       	ldd	r25, Y+6	; 0x06
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	9e 83       	std	Y+6, r25	; 0x06
    3378:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    337a:	8d 81       	ldd	r24, Y+5	; 0x05
    337c:	9e 81       	ldd	r25, Y+6	; 0x06
    337e:	00 97       	sbiw	r24, 0x00	; 0
    3380:	69 f7       	brne	.-38     	; 0x335c <main+0x95c>
    3382:	14 c0       	rjmp	.+40     	; 0x33ac <main+0x9ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3384:	6f 81       	ldd	r22, Y+7	; 0x07
    3386:	78 85       	ldd	r23, Y+8	; 0x08
    3388:	89 85       	ldd	r24, Y+9	; 0x09
    338a:	9a 85       	ldd	r25, Y+10	; 0x0a
    338c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	9e 83       	std	Y+6, r25	; 0x06
    3396:	8d 83       	std	Y+5, r24	; 0x05
    3398:	8d 81       	ldd	r24, Y+5	; 0x05
    339a:	9e 81       	ldd	r25, Y+6	; 0x06
    339c:	9a 83       	std	Y+2, r25	; 0x02
    339e:	89 83       	std	Y+1, r24	; 0x01
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	9a 81       	ldd	r25, Y+2	; 0x02
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	f1 f7       	brne	.-4      	; 0x33a4 <main+0x9a4>
    33a8:	9a 83       	std	Y+2, r25	; 0x02
    33aa:	89 83       	std	Y+1, r24	; 0x01
				        _delay_ms(500);
	}
	LCD_Clear();
    33ac:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_Clear>
    33b0:	4a cb       	rjmp	.-2412   	; 0x2a46 <main+0x46>

000033b2 <ISR1>:
	return 0;
}



void ISR1(){
    33b2:	df 93       	push	r29
    33b4:	cf 93       	push	r28
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
	if(row1==0){
    33ba:	80 91 a2 00 	lds	r24, 0x00A2
    33be:	88 23       	and	r24, r24
    33c0:	91 f4       	brne	.+36     	; 0x33e6 <ISR1+0x34>
	LCD_GoTo(0,15);
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	6f e0       	ldi	r22, 0x0F	; 15
    33c6:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
	LCD_enuDisplayChar(' ');
    33ca:	80 e2       	ldi	r24, 0x20	; 32
    33cc:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>
	LCD_GoTo(1,15);
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	6f e0       	ldi	r22, 0x0F	; 15
    33d4:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
	LCD_enuDisplayChar('|');
    33d8:	8c e7       	ldi	r24, 0x7C	; 124
    33da:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>
	row1=1;
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	80 93 a2 00 	sts	0x00A2, r24
    33e4:	14 c0       	rjmp	.+40     	; 0x340e <ISR1+0x5c>
	}
	else if(row1==1){
    33e6:	80 91 a2 00 	lds	r24, 0x00A2
    33ea:	81 30       	cpi	r24, 0x01	; 1
    33ec:	81 f4       	brne	.+32     	; 0x340e <ISR1+0x5c>
		LCD_GoTo(1,15);
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	6f e0       	ldi	r22, 0x0F	; 15
    33f2:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
			LCD_enuDisplayChar(' ');
    33f6:	80 e2       	ldi	r24, 0x20	; 32
    33f8:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>
			LCD_GoTo(0,15);
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	6f e0       	ldi	r22, 0x0F	; 15
    3400:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
			LCD_enuDisplayChar('|');
    3404:	8c e7       	ldi	r24, 0x7C	; 124
    3406:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>
			row1=0;
    340a:	10 92 a2 00 	sts	0x00A2, r1
	}

}
    340e:	cf 91       	pop	r28
    3410:	df 91       	pop	r29
    3412:	08 95       	ret

00003414 <ISR2>:

void ISR2(){
    3414:	df 93       	push	r29
    3416:	cf 93       	push	r28
    3418:	cd b7       	in	r28, 0x3d	; 61
    341a:	de b7       	in	r29, 0x3e	; 62
	if(row2==0){
    341c:	80 91 a3 00 	lds	r24, 0x00A3
    3420:	88 23       	and	r24, r24
    3422:	91 f4       	brne	.+36     	; 0x3448 <ISR2+0x34>
		LCD_GoTo(0,0);
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	60 e0       	ldi	r22, 0x00	; 0
    3428:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
		LCD_enuDisplayChar(' ');
    342c:	80 e2       	ldi	r24, 0x20	; 32
    342e:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>
		LCD_GoTo(1,0);
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	60 e0       	ldi	r22, 0x00	; 0
    3436:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
		LCD_enuDisplayChar('|');
    343a:	8c e7       	ldi	r24, 0x7C	; 124
    343c:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>
		row2=1;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	80 93 a3 00 	sts	0x00A3, r24
    3446:	14 c0       	rjmp	.+40     	; 0x3470 <ISR2+0x5c>
		}
		else if(row2==1){
    3448:	80 91 a3 00 	lds	r24, 0x00A3
    344c:	81 30       	cpi	r24, 0x01	; 1
    344e:	81 f4       	brne	.+32     	; 0x3470 <ISR2+0x5c>
			LCD_GoTo(1,0);
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	60 e0       	ldi	r22, 0x00	; 0
    3454:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
				LCD_enuDisplayChar(' ');
    3458:	80 e2       	ldi	r24, 0x20	; 32
    345a:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>
				LCD_GoTo(0,0);
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	60 e0       	ldi	r22, 0x00	; 0
    3462:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_GoTo>
				LCD_enuDisplayChar('|');
    3466:	8c e7       	ldi	r24, 0x7C	; 124
    3468:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_enuDisplayChar>
				row2=0;
    346c:	10 92 a3 00 	sts	0x00A3, r1
		}
}
    3470:	cf 91       	pop	r28
    3472:	df 91       	pop	r29
    3474:	08 95       	ret

00003476 <__mulsi3>:
    3476:	62 9f       	mul	r22, r18
    3478:	d0 01       	movw	r26, r0
    347a:	73 9f       	mul	r23, r19
    347c:	f0 01       	movw	r30, r0
    347e:	82 9f       	mul	r24, r18
    3480:	e0 0d       	add	r30, r0
    3482:	f1 1d       	adc	r31, r1
    3484:	64 9f       	mul	r22, r20
    3486:	e0 0d       	add	r30, r0
    3488:	f1 1d       	adc	r31, r1
    348a:	92 9f       	mul	r25, r18
    348c:	f0 0d       	add	r31, r0
    348e:	83 9f       	mul	r24, r19
    3490:	f0 0d       	add	r31, r0
    3492:	74 9f       	mul	r23, r20
    3494:	f0 0d       	add	r31, r0
    3496:	65 9f       	mul	r22, r21
    3498:	f0 0d       	add	r31, r0
    349a:	99 27       	eor	r25, r25
    349c:	72 9f       	mul	r23, r18
    349e:	b0 0d       	add	r27, r0
    34a0:	e1 1d       	adc	r30, r1
    34a2:	f9 1f       	adc	r31, r25
    34a4:	63 9f       	mul	r22, r19
    34a6:	b0 0d       	add	r27, r0
    34a8:	e1 1d       	adc	r30, r1
    34aa:	f9 1f       	adc	r31, r25
    34ac:	bd 01       	movw	r22, r26
    34ae:	cf 01       	movw	r24, r30
    34b0:	11 24       	eor	r1, r1
    34b2:	08 95       	ret

000034b4 <__divmodsi4>:
    34b4:	97 fb       	bst	r25, 7
    34b6:	09 2e       	mov	r0, r25
    34b8:	05 26       	eor	r0, r21
    34ba:	0e d0       	rcall	.+28     	; 0x34d8 <__divmodsi4_neg1>
    34bc:	57 fd       	sbrc	r21, 7
    34be:	04 d0       	rcall	.+8      	; 0x34c8 <__divmodsi4_neg2>
    34c0:	14 d0       	rcall	.+40     	; 0x34ea <__udivmodsi4>
    34c2:	0a d0       	rcall	.+20     	; 0x34d8 <__divmodsi4_neg1>
    34c4:	00 1c       	adc	r0, r0
    34c6:	38 f4       	brcc	.+14     	; 0x34d6 <__divmodsi4_exit>

000034c8 <__divmodsi4_neg2>:
    34c8:	50 95       	com	r21
    34ca:	40 95       	com	r20
    34cc:	30 95       	com	r19
    34ce:	21 95       	neg	r18
    34d0:	3f 4f       	sbci	r19, 0xFF	; 255
    34d2:	4f 4f       	sbci	r20, 0xFF	; 255
    34d4:	5f 4f       	sbci	r21, 0xFF	; 255

000034d6 <__divmodsi4_exit>:
    34d6:	08 95       	ret

000034d8 <__divmodsi4_neg1>:
    34d8:	f6 f7       	brtc	.-4      	; 0x34d6 <__divmodsi4_exit>
    34da:	90 95       	com	r25
    34dc:	80 95       	com	r24
    34de:	70 95       	com	r23
    34e0:	61 95       	neg	r22
    34e2:	7f 4f       	sbci	r23, 0xFF	; 255
    34e4:	8f 4f       	sbci	r24, 0xFF	; 255
    34e6:	9f 4f       	sbci	r25, 0xFF	; 255
    34e8:	08 95       	ret

000034ea <__udivmodsi4>:
    34ea:	a1 e2       	ldi	r26, 0x21	; 33
    34ec:	1a 2e       	mov	r1, r26
    34ee:	aa 1b       	sub	r26, r26
    34f0:	bb 1b       	sub	r27, r27
    34f2:	fd 01       	movw	r30, r26
    34f4:	0d c0       	rjmp	.+26     	; 0x3510 <__udivmodsi4_ep>

000034f6 <__udivmodsi4_loop>:
    34f6:	aa 1f       	adc	r26, r26
    34f8:	bb 1f       	adc	r27, r27
    34fa:	ee 1f       	adc	r30, r30
    34fc:	ff 1f       	adc	r31, r31
    34fe:	a2 17       	cp	r26, r18
    3500:	b3 07       	cpc	r27, r19
    3502:	e4 07       	cpc	r30, r20
    3504:	f5 07       	cpc	r31, r21
    3506:	20 f0       	brcs	.+8      	; 0x3510 <__udivmodsi4_ep>
    3508:	a2 1b       	sub	r26, r18
    350a:	b3 0b       	sbc	r27, r19
    350c:	e4 0b       	sbc	r30, r20
    350e:	f5 0b       	sbc	r31, r21

00003510 <__udivmodsi4_ep>:
    3510:	66 1f       	adc	r22, r22
    3512:	77 1f       	adc	r23, r23
    3514:	88 1f       	adc	r24, r24
    3516:	99 1f       	adc	r25, r25
    3518:	1a 94       	dec	r1
    351a:	69 f7       	brne	.-38     	; 0x34f6 <__udivmodsi4_loop>
    351c:	60 95       	com	r22
    351e:	70 95       	com	r23
    3520:	80 95       	com	r24
    3522:	90 95       	com	r25
    3524:	9b 01       	movw	r18, r22
    3526:	ac 01       	movw	r20, r24
    3528:	bd 01       	movw	r22, r26
    352a:	cf 01       	movw	r24, r30
    352c:	08 95       	ret

0000352e <__prologue_saves__>:
    352e:	2f 92       	push	r2
    3530:	3f 92       	push	r3
    3532:	4f 92       	push	r4
    3534:	5f 92       	push	r5
    3536:	6f 92       	push	r6
    3538:	7f 92       	push	r7
    353a:	8f 92       	push	r8
    353c:	9f 92       	push	r9
    353e:	af 92       	push	r10
    3540:	bf 92       	push	r11
    3542:	cf 92       	push	r12
    3544:	df 92       	push	r13
    3546:	ef 92       	push	r14
    3548:	ff 92       	push	r15
    354a:	0f 93       	push	r16
    354c:	1f 93       	push	r17
    354e:	cf 93       	push	r28
    3550:	df 93       	push	r29
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
    3556:	ca 1b       	sub	r28, r26
    3558:	db 0b       	sbc	r29, r27
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	f8 94       	cli
    355e:	de bf       	out	0x3e, r29	; 62
    3560:	0f be       	out	0x3f, r0	; 63
    3562:	cd bf       	out	0x3d, r28	; 61
    3564:	09 94       	ijmp

00003566 <__epilogue_restores__>:
    3566:	2a 88       	ldd	r2, Y+18	; 0x12
    3568:	39 88       	ldd	r3, Y+17	; 0x11
    356a:	48 88       	ldd	r4, Y+16	; 0x10
    356c:	5f 84       	ldd	r5, Y+15	; 0x0f
    356e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3570:	7d 84       	ldd	r7, Y+13	; 0x0d
    3572:	8c 84       	ldd	r8, Y+12	; 0x0c
    3574:	9b 84       	ldd	r9, Y+11	; 0x0b
    3576:	aa 84       	ldd	r10, Y+10	; 0x0a
    3578:	b9 84       	ldd	r11, Y+9	; 0x09
    357a:	c8 84       	ldd	r12, Y+8	; 0x08
    357c:	df 80       	ldd	r13, Y+7	; 0x07
    357e:	ee 80       	ldd	r14, Y+6	; 0x06
    3580:	fd 80       	ldd	r15, Y+5	; 0x05
    3582:	0c 81       	ldd	r16, Y+4	; 0x04
    3584:	1b 81       	ldd	r17, Y+3	; 0x03
    3586:	aa 81       	ldd	r26, Y+2	; 0x02
    3588:	b9 81       	ldd	r27, Y+1	; 0x01
    358a:	ce 0f       	add	r28, r30
    358c:	d1 1d       	adc	r29, r1
    358e:	0f b6       	in	r0, 0x3f	; 63
    3590:	f8 94       	cli
    3592:	de bf       	out	0x3e, r29	; 62
    3594:	0f be       	out	0x3f, r0	; 63
    3596:	cd bf       	out	0x3d, r28	; 61
    3598:	ed 01       	movw	r28, r26
    359a:	08 95       	ret

0000359c <_exit>:
    359c:	f8 94       	cli

0000359e <__stop_program>:
    359e:	ff cf       	rjmp	.-2      	; 0x359e <__stop_program>
