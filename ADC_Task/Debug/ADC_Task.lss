
ADC_Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000342c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000342c  000034c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800178  00800178  000035d8  2**0
                  ALLOC
  3 .stab         0000345c  00000000  00000000  000035d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012bc  00000000  00000000  00006a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008082  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a48d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b813  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c9ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cbac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000cea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__vector_1>
       8:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__vector_2>
       c:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b4 18 	call	0x3168	; 0x3168 <main>
      8a:	0c 94 14 1a 	jmp	0x3428	; 0x3428 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 05 1a 	jmp	0x340a	; 0x340a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 05 1a 	jmp	0x340a	; 0x340a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e6       	ldi	r22, 0x6F	; 111
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 05 1a 	jmp	0x340a	; 0x340a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 05 1a 	jmp	0x340a	; 0x340a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 05 1a 	jmp	0x340a	; 0x340a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ed 19 	jmp	0x33da	; 0x33da <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e9 58       	subi	r30, 0x89	; 137
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_enu_Int>:

static void (*ADC_GpFun)(void*)=NULL;
static void *ADC_Gparameter=NULL;


 ES_t ADC_enu_Int(){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
     e38:	19 82       	std	Y+1, r1	; 0x01
#if Vref == AREF
	ADMUX&=~(3<<6);

#elif Vref == AVCC
	ADMUX&=~(1<<7);
     e3a:	a7 e2       	ldi	r26, 0x27	; 39
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e7 e2       	ldi	r30, 0x27	; 39
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8f 77       	andi	r24, 0x7F	; 127
     e46:	8c 93       	st	X, r24
	ADMUX|=(AVCC<<6);
     e48:	a7 e2       	ldi	r26, 0x27	; 39
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e7 e2       	ldi	r30, 0x27	; 39
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 64       	ori	r24, 0x40	; 64
     e54:	8c 93       	st	X, r24


#if Adjust_Type==Left_Adjust
	ADMUX|=(1<<5);
#elif Adjust_Type==Right_Adjust
	ADMUX&=~(1<<5);
     e56:	a7 e2       	ldi	r26, 0x27	; 39
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e7 e2       	ldi	r30, 0x27	; 39
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8f 7d       	andi	r24, 0xDF	; 223
     e62:	8c 93       	st	X, r24
#endif


#if prescalar == DIV_FACT128
	ADCSRA |= (7<<0);
     e64:	a6 e2       	ldi	r26, 0x26	; 38
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e6 e2       	ldi	r30, 0x26	; 38
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	87 60       	ori	r24, 0x07	; 7
     e70:	8c 93       	st	X, r24
#endif

	Local_enuErrorstate = ES_OK;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
     e76:	89 81       	ldd	r24, Y+1	; 0x01
}
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <ADC_enu_Start_Conversion>:
ES_t ADC_enu_Start_Conversion(){
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	0f 92       	push	r0
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
     e8a:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA|=(1<<6);
     e8c:	a6 e2       	ldi	r26, 0x26	; 38
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e6 e2       	ldi	r30, 0x26	; 38
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 64       	ori	r24, 0x40	; 64
     e98:	8c 93       	st	X, r24
	while(((ADCSRA>>4)&1)==0);  //polling
     e9a:	e6 e2       	ldi	r30, 0x26	; 38
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	82 95       	swap	r24
     ea2:	8f 70       	andi	r24, 0x0F	; 15
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	81 70       	andi	r24, 0x01	; 1
     eaa:	90 70       	andi	r25, 0x00	; 0
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	a9 f3       	breq	.-22     	; 0xe9a <ADC_enu_Start_Conversion+0x1a>
	ADCSRA|=(1<<4);
     eb0:	a6 e2       	ldi	r26, 0x26	; 38
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e6 e2       	ldi	r30, 0x26	; 38
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	80 61       	ori	r24, 0x10	; 16
     ebc:	8c 93       	st	X, r24
	Local_enuErrorstate = ES_OK;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorstate;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec4:	0f 90       	pop	r0
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <ADC_enuEnable>:
ES_t ADC_enuEnable(){
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	0f 92       	push	r0
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
     ed6:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA|=(1<<7);
     ed8:	a6 e2       	ldi	r26, 0x26	; 38
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e6 e2       	ldi	r30, 0x26	; 38
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 68       	ori	r24, 0x80	; 128
     ee4:	8c 93       	st	X, r24
	Local_enuErrorstate = ES_OK;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	89 83       	std	Y+1, r24	; 0x01
			return Local_enuErrorstate;
     eea:	89 81       	ldd	r24, Y+1	; 0x01
}
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <ADC_enuDisable>:
ES_t ADC_enuDisable(){
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	0f 92       	push	r0
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
     efe:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA&=~(1<<7);
     f00:	a6 e2       	ldi	r26, 0x26	; 38
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e6 e2       	ldi	r30, 0x26	; 38
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8f 77       	andi	r24, 0x7F	; 127
     f0c:	8c 93       	st	X, r24
		Local_enuErrorstate = ES_OK;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01
				return Local_enuErrorstate;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
}
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <ADC_enu_ReadHighVal>:

ES_t ADC_enu_ReadHighVal(u8 *Copy_pu8Value){
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	00 d0       	rcall	.+0      	; 0xf22 <ADC_enu_ReadHighVal+0x6>
     f22:	0f 92       	push	r0
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	9b 83       	std	Y+3, r25	; 0x03
     f2a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
     f2c:	19 82       	std	Y+1, r1	; 0x01
#if Adjust_Type==Left_Adjust
	*Copy_pu8Value=ADCH;
#elif Adjust_Type==Right_Adjust
	*Copy_pu8Value=(ADCL>>2);
     f2e:	e4 e2       	ldi	r30, 0x24	; 36
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	85 95       	asr	r24
     f36:	85 95       	asr	r24
     f38:	ea 81       	ldd	r30, Y+2	; 0x02
     f3a:	fb 81       	ldd	r31, Y+3	; 0x03
     f3c:	80 83       	st	Z, r24
	*Copy_pu8Value|=(ADCH<<6);
     f3e:	ea 81       	ldd	r30, Y+2	; 0x02
     f40:	fb 81       	ldd	r31, Y+3	; 0x03
     f42:	80 81       	ld	r24, Z
     f44:	28 2f       	mov	r18, r24
     f46:	e5 e2       	ldi	r30, 0x25	; 37
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	99 27       	eor	r25, r25
     f4e:	87 fd       	sbrc	r24, 7
     f50:	90 95       	com	r25
     f52:	00 24       	eor	r0, r0
     f54:	96 95       	lsr	r25
     f56:	87 95       	ror	r24
     f58:	07 94       	ror	r0
     f5a:	96 95       	lsr	r25
     f5c:	87 95       	ror	r24
     f5e:	07 94       	ror	r0
     f60:	98 2f       	mov	r25, r24
     f62:	80 2d       	mov	r24, r0
     f64:	82 2b       	or	r24, r18
     f66:	ea 81       	ldd	r30, Y+2	; 0x02
     f68:	fb 81       	ldd	r31, Y+3	; 0x03
     f6a:	80 83       	st	Z, r24
#endif
	Local_enuErrorstate = ES_OK;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	89 83       	std	Y+1, r24	; 0x01
			return Local_enuErrorstate;
     f70:	89 81       	ldd	r24, Y+1	; 0x01
}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <ADC_enu_Read>:


ES_t  ADC_enu_Read(u16 *Copy_pu16Value){
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	00 d0       	rcall	.+0      	; 0xf84 <ADC_enu_Read+0x6>
     f84:	0f 92       	push	r0
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	9b 83       	std	Y+3, r25	; 0x03
     f8c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
     f8e:	19 82       	std	Y+1, r1	; 0x01

#if Adjust_Type==Left_Adjust
	*Copy_pu16Value=(ADCL>>6);
	*Copy_pu16Value|=(ADCH<<2);
#elif Adjust_Type==Right_Adjust
	*Copy_pu16Value=ADCADJ;
     f90:	e4 e2       	ldi	r30, 0x24	; 36
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
     f98:	ea 81       	ldd	r30, Y+2	; 0x02
     f9a:	fb 81       	ldd	r31, Y+3	; 0x03
     f9c:	91 83       	std	Z+1, r25	; 0x01
     f9e:	80 83       	st	Z, r24
#endif

	Local_enuErrorstate = ES_OK;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <ADC_enuSelectChannel>:


ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID){
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <ADC_enuSelectChannel+0x6>
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
     fbe:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8ChannelID<32){
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	80 32       	cpi	r24, 0x20	; 32
     fc4:	88 f4       	brcc	.+34     	; 0xfe8 <ADC_enuSelectChannel+0x36>
	ADMUX&=~(31>>0);
     fc6:	a7 e2       	ldi	r26, 0x27	; 39
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e7 e2       	ldi	r30, 0x27	; 39
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 7e       	andi	r24, 0xE0	; 224
     fd2:	8c 93       	st	X, r24
	ADMUX|=Copy_u8ChannelID;
     fd4:	a7 e2       	ldi	r26, 0x27	; 39
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e7 e2       	ldi	r30, 0x27	; 39
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	90 81       	ld	r25, Z
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	89 2b       	or	r24, r25
     fe2:	8c 93       	st	X, r24
	Local_enuErrorstate = ES_OK;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <ADC_enuEnableTriggeringMode>:

ES_t ADC_enuEnableTriggeringMode(u8 Copy_Trigger_Source){
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <ADC_enuEnableTriggeringMode+0x6>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <ADC_enuEnableTriggeringMode+0x8>
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1002:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA &=~(1<<5);
    1004:	a6 e2       	ldi	r26, 0x26	; 38
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e6 e2       	ldi	r30, 0x26	; 38
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8f 7d       	andi	r24, 0xDF	; 223
    1010:	8c 93       	st	X, r24
	switch(Copy_Trigger_Source){
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	3c 83       	std	Y+4, r19	; 0x04
    101a:	2b 83       	std	Y+3, r18	; 0x03
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	31 f0       	breq	.+12     	; 0x1030 <ADC_enuEnableTriggeringMode+0x3c>
    1024:	2b 81       	ldd	r18, Y+3	; 0x03
    1026:	3c 81       	ldd	r19, Y+4	; 0x04
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	31 05       	cpc	r19, r1
    102c:	49 f0       	breq	.+18     	; 0x1040 <ADC_enuEnableTriggeringMode+0x4c>
    102e:	16 c0       	rjmp	.+44     	; 0x105c <ADC_enuEnableTriggeringMode+0x68>
	case Free_Running_mode:
		SFIOR&=~(7<<5);
    1030:	a0 e5       	ldi	r26, 0x50	; 80
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e0 e5       	ldi	r30, 0x50	; 80
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8f 71       	andi	r24, 0x1F	; 31
    103c:	8c 93       	st	X, r24
    103e:	0e c0       	rjmp	.+28     	; 0x105c <ADC_enuEnableTriggeringMode+0x68>

		break;
	case EXT_Request:
		SFIOR&=~(7<<5);
    1040:	a0 e5       	ldi	r26, 0x50	; 80
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e0 e5       	ldi	r30, 0x50	; 80
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8f 71       	andi	r24, 0x1F	; 31
    104c:	8c 93       	st	X, r24
		SFIOR|=(2<<5);
    104e:	a0 e5       	ldi	r26, 0x50	; 80
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e0 e5       	ldi	r30, 0x50	; 80
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	80 64       	ori	r24, 0x40	; 64
    105a:	8c 93       	st	X, r24

		break;
	}
	ADCSRA |=(1<<5);
    105c:	a6 e2       	ldi	r26, 0x26	; 38
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e6 e2       	ldi	r30, 0x26	; 38
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	80 62       	ori	r24, 0x20	; 32
    1068:	8c 93       	st	X, r24



	Local_enuErrorstate = ES_OK;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorstate;
    106e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <ADC_enuDisableTriggeringMode>:


ES_t ADC_enuDisableTriggeringMode(){
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	0f 92       	push	r0
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1088:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA&=~(1<<5);
    108a:	a6 e2       	ldi	r26, 0x26	; 38
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e6 e2       	ldi	r30, 0x26	; 38
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8f 7d       	andi	r24, 0xDF	; 223
    1096:	8c 93       	st	X, r24


	Local_enuErrorstate = ES_OK;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    109c:	89 81       	ldd	r24, Y+1	; 0x01
}
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <ADC_enuEnableInterruptMode>:


ES_t ADC_enuEnableInterruptMode(void){
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    10b0:	19 82       	std	Y+1, r1	; 0x01

		ADCSRA|=(1<<3);
    10b2:	a6 e2       	ldi	r26, 0x26	; 38
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e6 e2       	ldi	r30, 0x26	; 38
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	88 60       	ori	r24, 0x08	; 8
    10be:	8c 93       	st	X, r24


		Local_enuErrorstate = ES_OK;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorstate;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c6:	0f 90       	pop	r0
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <ADC_enuDisableInterruptMode>:
ES_t ADC_enuDisableInterruptMode(void){
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	0f 92       	push	r0
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    10d8:	19 82       	std	Y+1, r1	; 0x01

		ADCSRA&=~(1<<3);
    10da:	a6 e2       	ldi	r26, 0x26	; 38
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e6 e2       	ldi	r30, 0x26	; 38
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	87 7f       	andi	r24, 0xF7	; 247
    10e6:	8c 93       	st	X, r24


		Local_enuErrorstate = ES_OK;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorstate;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01

}
    10ee:	0f 90       	pop	r0
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <ADC_CallBack>:
ES_t  ADC_CallBack(void (*Copy_fun_ptr) (void), void * Copy_pvidAppParameter ){
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <ADC_CallBack+0x6>
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <ADC_CallBack+0x8>
    10fe:	0f 92       	push	r0
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	9b 83       	std	Y+3, r25	; 0x03
    1106:	8a 83       	std	Y+2, r24	; 0x02
    1108:	7d 83       	std	Y+5, r23	; 0x05
    110a:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    110c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_fun_ptr!=NULL && Copy_pvidAppParameter!=NULL){
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	9b 81       	ldd	r25, Y+3	; 0x03
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	91 f0       	breq	.+36     	; 0x113a <ADC_CallBack+0x44>
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	71 f0       	breq	.+28     	; 0x113a <ADC_CallBack+0x44>
		ADC_GpFun=Copy_fun_ptr;
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	9b 81       	ldd	r25, Y+3	; 0x03
    1122:	90 93 79 01 	sts	0x0179, r25
    1126:	80 93 78 01 	sts	0x0178, r24
		ADC_Gparameter=Copy_pvidAppParameter;
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	9d 81       	ldd	r25, Y+5	; 0x05
    112e:	90 93 7b 01 	sts	0x017B, r25
    1132:	80 93 7a 01 	sts	0x017A, r24
		Local_enuErrorstate = ES_OK;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	89 83       	std	Y+1, r24	; 0x01

	}

				return Local_enuErrorstate;
    113a:	89 81       	ldd	r24, Y+1	; 0x01

}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <__vector_16>:
ISR(VECT_ADC){
    114c:	1f 92       	push	r1
    114e:	0f 92       	push	r0
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	0f 92       	push	r0
    1154:	11 24       	eor	r1, r1
    1156:	2f 93       	push	r18
    1158:	3f 93       	push	r19
    115a:	4f 93       	push	r20
    115c:	5f 93       	push	r21
    115e:	6f 93       	push	r22
    1160:	7f 93       	push	r23
    1162:	8f 93       	push	r24
    1164:	9f 93       	push	r25
    1166:	af 93       	push	r26
    1168:	bf 93       	push	r27
    116a:	ef 93       	push	r30
    116c:	ff 93       	push	r31
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
if(ADC_GpFun!=NULL){
    1176:	80 91 78 01 	lds	r24, 0x0178
    117a:	90 91 79 01 	lds	r25, 0x0179
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	49 f0       	breq	.+18     	; 0x1194 <__vector_16+0x48>
	ADC_GpFun(ADC_Gparameter);
    1182:	e0 91 78 01 	lds	r30, 0x0178
    1186:	f0 91 79 01 	lds	r31, 0x0179
    118a:	80 91 7a 01 	lds	r24, 0x017A
    118e:	90 91 7b 01 	lds	r25, 0x017B
    1192:	09 95       	icall
}


}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	ff 91       	pop	r31
    119a:	ef 91       	pop	r30
    119c:	bf 91       	pop	r27
    119e:	af 91       	pop	r26
    11a0:	9f 91       	pop	r25
    11a2:	8f 91       	pop	r24
    11a4:	7f 91       	pop	r23
    11a6:	6f 91       	pop	r22
    11a8:	5f 91       	pop	r21
    11aa:	4f 91       	pop	r20
    11ac:	3f 91       	pop	r19
    11ae:	2f 91       	pop	r18
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	0f 90       	pop	r0
    11b6:	1f 90       	pop	r1
    11b8:	18 95       	reti

000011ba <GIE_enuEnable>:
 */
#include "../../LIB/stdTypes.h"
#include "../../LIB/errorStates.h"
#include "GIE_priv.h"

ES_t GIE_enuEnable(){
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	0f 92       	push	r0
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    11c4:	19 82       	std	Y+1, r1	; 0x01

	SREG|= (1<<7);
    11c6:	af e5       	ldi	r26, 0x5F	; 95
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ef e5       	ldi	r30, 0x5F	; 95
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 68       	ori	r24, 0x80	; 128
    11d2:	8c 93       	st	X, r24
	Local_enuErrorstate = ES_OK;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	89 83       	std	Y+1, r24	; 0x01

		return Local_enuErrorstate;
    11d8:	89 81       	ldd	r24, Y+1	; 0x01

}
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <GIE_enuDisable>:
ES_t GIE_enuDisable(){
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	0f 92       	push	r0
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    11ec:	19 82       	std	Y+1, r1	; 0x01
    SREG&=~(1<<7);
    11ee:	af e5       	ldi	r26, 0x5F	; 95
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	ef e5       	ldi	r30, 0x5F	; 95
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	8f 77       	andi	r24, 0x7F	; 127
    11fa:	8c 93       	st	X, r24
    Local_enuErrorstate = ES_OK;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	89 83       	std	Y+1, r24	; 0x01
			return Local_enuErrorstate;
    1200:	89 81       	ldd	r24, Y+1	; 0x01
}
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <EXTI_intialiation>:

void (*pfunINTFun0)(void)=NULL;
void (*pfunINTFun1)(void)=NULL;
void (*pfunINTFun2)(void)=NULL;

ES_t EXTI_intialiation(){
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	0f 92       	push	r0
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorstate = ES_NOK;
    1214:	19 82       	std	Y+1, r1	; 0x01

	MCUCR &=~(15<<0); // CLEAR BIT 0 1 2 3 (INT0 & INT1)
    1216:	a5 e5       	ldi	r26, 0x55	; 85
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e5 e5       	ldi	r30, 0x55	; 85
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	80 7f       	andi	r24, 0xF0	; 240
    1222:	8c 93       	st	X, r24
#elif  INT0_MODE == LOW_LEVEL
	MCUCR|=LOW_LEVEL;
#elif  INT0_MODE == RISING_EDGE
	MCUCR|=RISING_EDGE;
#elif  INT0_MODE == ANY_LOGIC
	MCUCR|=ANY_LOGIC;
    1224:	a5 e5       	ldi	r26, 0x55	; 85
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e5 e5       	ldi	r30, 0x55	; 85
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	81 60       	ori	r24, 0x01	; 1
    1230:	8c 93       	st	X, r24
#elif  INT1_MODE == LOW_LEVEL
	MCUCR|=(LOW_LEVEL<<2);
#elif  INT1_MODE == RISING_EDGE
	MCUCR|=(RISING_EDGE<<2);
#elif  INT1_MODE == ANY_LOGIC
	MCUCR|=(ANY_LOGIC<<2);
    1232:	a5 e5       	ldi	r26, 0x55	; 85
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e5       	ldi	r30, 0x55	; 85
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	84 60       	ori	r24, 0x04	; 4
    123e:	8c 93       	st	X, r24
#endif


#if INT0_STATE == ACTIVE
	GICR |=(1<<6);
    1240:	ab e5       	ldi	r26, 0x5B	; 91
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	eb e5       	ldi	r30, 0x5B	; 91
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 64       	ori	r24, 0x40	; 64
    124c:	8c 93       	st	X, r24
#endif



#if INT1_STATE == ACTIVE
	GICR |=(1<<7);
    124e:	ab e5       	ldi	r26, 0x5B	; 91
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	eb e5       	ldi	r30, 0x5B	; 91
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	80 68       	ori	r24, 0x80	; 128
    125a:	8c 93       	st	X, r24
#elif  INT1_STATE == DEACTIVE
	GICR &=~(1<<7);
#endif

#if INT2_STATE == ACTIVE
	GICR |=(1<<5);
    125c:	ab e5       	ldi	r26, 0x5B	; 91
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	eb e5       	ldi	r30, 0x5B	; 91
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	80 62       	ori	r24, 0x20	; 32
    1268:	8c 93       	st	X, r24
#elif  INT2_STATE == DEACTIVE
	GICR &=~(1<<5);
#endif

	GIFR|=(7<<5);     //CLEAR FLAGS IN BIT 5,6,7
    126a:	aa e5       	ldi	r26, 0x5A	; 90
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	ea e5       	ldi	r30, 0x5A	; 90
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	80 6e       	ori	r24, 0xE0	; 224
    1276:	8c 93       	st	X, r24


		return Local_enuErrorstate;
    1278:	89 81       	ldd	r24, Y+1	; 0x01


}
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <EXTI_Enable_INT>:
ES_t  EXTI_Enable_INT(u8 Copy_u8EXTI_ID){
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <EXTI_Enable_INT+0x6>
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    128e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8EXTI_ID < 4)
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	84 30       	cpi	r24, 0x04	; 4
    1294:	68 f5       	brcc	.+90     	; 0x12f0 <EXTI_Enable_INT+0x6e>
		{
			if (Copy_u8EXTI_ID ==0)
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	88 23       	and	r24, r24
    129a:	41 f4       	brne	.+16     	; 0x12ac <EXTI_Enable_INT+0x2a>
			{

				GICR |= (1<<6);
    129c:	ab e5       	ldi	r26, 0x5B	; 91
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	eb e5       	ldi	r30, 0x5B	; 91
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 64       	ori	r24, 0x40	; 64
    12a8:	8c 93       	st	X, r24
    12aa:	20 c0       	rjmp	.+64     	; 0x12ec <EXTI_Enable_INT+0x6a>
			}
			else if (Copy_u8EXTI_ID ==1)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	41 f4       	brne	.+16     	; 0x12c2 <EXTI_Enable_INT+0x40>
			{
				GICR |= (1<<7);
    12b2:	ab e5       	ldi	r26, 0x5B	; 91
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	eb e5       	ldi	r30, 0x5B	; 91
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	80 68       	ori	r24, 0x80	; 128
    12be:	8c 93       	st	X, r24
    12c0:	15 c0       	rjmp	.+42     	; 0x12ec <EXTI_Enable_INT+0x6a>
			}
			else if (Copy_u8EXTI_ID ==2)
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	82 30       	cpi	r24, 0x02	; 2
    12c6:	41 f4       	brne	.+16     	; 0x12d8 <EXTI_Enable_INT+0x56>
			{
				GICR |= (1<<5);
    12c8:	ab e5       	ldi	r26, 0x5B	; 91
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	eb e5       	ldi	r30, 0x5B	; 91
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	80 62       	ori	r24, 0x20	; 32
    12d4:	8c 93       	st	X, r24
    12d6:	0a c0       	rjmp	.+20     	; 0x12ec <EXTI_Enable_INT+0x6a>
			}
			else if(Copy_u8EXTI_ID==GLOBAL){
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	39 f4       	brne	.+14     	; 0x12ec <EXTI_Enable_INT+0x6a>
			           SREG|= (1<<7);
    12de:	af e5       	ldi	r26, 0x5F	; 95
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	ef e5       	ldi	r30, 0x5F	; 95
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	80 68       	ori	r24, 0x80	; 128
    12ea:	8c 93       	st	X, r24

	         }
			 Local_enuErrorstate = ES_OK;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorstate;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <EXTI_Disable_INT>:
ES_t  EXTI_Disable_INT(u8 Copy_u8EXTI_ID){
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <EXTI_Disable_INT+0x6>
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1308:	19 82       	std	Y+1, r1	; 0x01
		if (Copy_u8EXTI_ID < 4)
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	84 30       	cpi	r24, 0x04	; 4
    130e:	68 f5       	brcc	.+90     	; 0x136a <EXTI_Disable_INT+0x6e>
			{
			if (Copy_u8EXTI_ID ==0)
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	88 23       	and	r24, r24
    1314:	41 f4       	brne	.+16     	; 0x1326 <EXTI_Disable_INT+0x2a>
							{

								GICR &= ~(1<<6);
    1316:	ab e5       	ldi	r26, 0x5B	; 91
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	eb e5       	ldi	r30, 0x5B	; 91
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8f 7b       	andi	r24, 0xBF	; 191
    1322:	8c 93       	st	X, r24
    1324:	20 c0       	rjmp	.+64     	; 0x1366 <EXTI_Disable_INT+0x6a>
							}
							else if (Copy_u8EXTI_ID ==1)
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	41 f4       	brne	.+16     	; 0x133c <EXTI_Disable_INT+0x40>
							{
								GICR &=~(1<<7);
    132c:	ab e5       	ldi	r26, 0x5B	; 91
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	eb e5       	ldi	r30, 0x5B	; 91
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8f 77       	andi	r24, 0x7F	; 127
    1338:	8c 93       	st	X, r24
    133a:	15 c0       	rjmp	.+42     	; 0x1366 <EXTI_Disable_INT+0x6a>
							}
							else if (Copy_u8EXTI_ID ==2)
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	82 30       	cpi	r24, 0x02	; 2
    1340:	41 f4       	brne	.+16     	; 0x1352 <EXTI_Disable_INT+0x56>
							{
								GICR &=~(1<<5);
    1342:	ab e5       	ldi	r26, 0x5B	; 91
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	eb e5       	ldi	r30, 0x5B	; 91
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8f 7d       	andi	r24, 0xDF	; 223
    134e:	8c 93       	st	X, r24
    1350:	0a c0       	rjmp	.+20     	; 0x1366 <EXTI_Disable_INT+0x6a>
							}
							else if(Copy_u8EXTI_ID==GLOBAL){
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	83 30       	cpi	r24, 0x03	; 3
    1356:	39 f4       	brne	.+14     	; 0x1366 <EXTI_Disable_INT+0x6a>
                                    SREG&=~(1<<7);
    1358:	af e5       	ldi	r26, 0x5F	; 95
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	ef e5       	ldi	r30, 0x5F	; 95
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	8f 77       	andi	r24, 0x7F	; 127
    1364:	8c 93       	st	X, r24
							}
				 Local_enuErrorstate = ES_OK;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	89 83       	std	Y+1, r24	; 0x01
			}

		return Local_enuErrorstate;
    136a:	89 81       	ldd	r24, Y+1	; 0x01


}
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <EXTI_CallBack>:

ES_t  EXTI_CallBack(void (*Copy_fun_ptr) (void),u8 Copy_u8EXTI_ID ){
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <EXTI_CallBack+0x6>
    137c:	00 d0       	rcall	.+0      	; 0x137e <EXTI_CallBack+0x8>
    137e:	00 d0       	rcall	.+0      	; 0x1380 <EXTI_CallBack+0xa>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	9b 83       	std	Y+3, r25	; 0x03
    1386:	8a 83       	std	Y+2, r24	; 0x02
    1388:	6c 83       	std	Y+4, r22	; 0x04

	ES_t Local_enuErrorstate = ES_NOK;
    138a:	19 82       	std	Y+1, r1	; 0x01


	if (Copy_fun_ptr != NULL && Copy_u8EXTI_ID <3)
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	9b 81       	ldd	r25, Y+3	; 0x03
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	61 f1       	breq	.+88     	; 0x13ec <EXTI_CallBack+0x76>
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	83 30       	cpi	r24, 0x03	; 3
    1398:	48 f5       	brcc	.+82     	; 0x13ec <EXTI_CallBack+0x76>
		{
		switch(Copy_u8EXTI_ID){
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3e 83       	std	Y+6, r19	; 0x06
    13a2:	2d 83       	std	Y+5, r18	; 0x05
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	81 f0       	breq	.+32     	; 0x13ce <EXTI_CallBack+0x58>
    13ae:	2d 81       	ldd	r18, Y+5	; 0x05
    13b0:	3e 81       	ldd	r19, Y+6	; 0x06
    13b2:	22 30       	cpi	r18, 0x02	; 2
    13b4:	31 05       	cpc	r19, r1
    13b6:	91 f0       	breq	.+36     	; 0x13dc <EXTI_CallBack+0x66>
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	a1 f4       	brne	.+40     	; 0x13e8 <EXTI_CallBack+0x72>
		case INT0:
		      pfunINTFun0=Copy_fun_ptr;
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	9b 81       	ldd	r25, Y+3	; 0x03
    13c4:	90 93 7d 01 	sts	0x017D, r25
    13c8:	80 93 7c 01 	sts	0x017C, r24
    13cc:	0d c0       	rjmp	.+26     	; 0x13e8 <EXTI_CallBack+0x72>
		      break;
		case INT1:
				 pfunINTFun1=Copy_fun_ptr;
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	9b 81       	ldd	r25, Y+3	; 0x03
    13d2:	90 93 7f 01 	sts	0x017F, r25
    13d6:	80 93 7e 01 	sts	0x017E, r24
    13da:	06 c0       	rjmp	.+12     	; 0x13e8 <EXTI_CallBack+0x72>
				 break;
		case INT2:
			 pfunINTFun2=Copy_fun_ptr;
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	9b 81       	ldd	r25, Y+3	; 0x03
    13e0:	90 93 81 01 	sts	0x0181, r25
    13e4:	80 93 80 01 	sts	0x0180, r24
		     break;

		}
		      Local_enuErrorstate = ES_OK;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	89 83       	std	Y+1, r24	; 0x01

		}

			return Local_enuErrorstate;
    13ec:	89 81       	ldd	r24, Y+1	; 0x01


}
    13ee:	26 96       	adiw	r28, 0x06	; 6
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <__vector_1>:


ISR(VECT_INT0){
    1400:	1f 92       	push	r1
    1402:	0f 92       	push	r0
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	0f 92       	push	r0
    1408:	11 24       	eor	r1, r1
    140a:	2f 93       	push	r18
    140c:	3f 93       	push	r19
    140e:	4f 93       	push	r20
    1410:	5f 93       	push	r21
    1412:	6f 93       	push	r22
    1414:	7f 93       	push	r23
    1416:	8f 93       	push	r24
    1418:	9f 93       	push	r25
    141a:	af 93       	push	r26
    141c:	bf 93       	push	r27
    141e:	ef 93       	push	r30
    1420:	ff 93       	push	r31
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
	if(pfunINTFun0!=NULL){
    142a:	80 91 7c 01 	lds	r24, 0x017C
    142e:	90 91 7d 01 	lds	r25, 0x017D
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	29 f0       	breq	.+10     	; 0x1440 <__vector_1+0x40>
		pfunINTFun0();
    1436:	e0 91 7c 01 	lds	r30, 0x017C
    143a:	f0 91 7d 01 	lds	r31, 0x017D
    143e:	09 95       	icall
	}

}
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	ff 91       	pop	r31
    1446:	ef 91       	pop	r30
    1448:	bf 91       	pop	r27
    144a:	af 91       	pop	r26
    144c:	9f 91       	pop	r25
    144e:	8f 91       	pop	r24
    1450:	7f 91       	pop	r23
    1452:	6f 91       	pop	r22
    1454:	5f 91       	pop	r21
    1456:	4f 91       	pop	r20
    1458:	3f 91       	pop	r19
    145a:	2f 91       	pop	r18
    145c:	0f 90       	pop	r0
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	0f 90       	pop	r0
    1462:	1f 90       	pop	r1
    1464:	18 95       	reti

00001466 <__vector_2>:


ISR(VECT_INT1){
    1466:	1f 92       	push	r1
    1468:	0f 92       	push	r0
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	0f 92       	push	r0
    146e:	11 24       	eor	r1, r1
    1470:	2f 93       	push	r18
    1472:	3f 93       	push	r19
    1474:	4f 93       	push	r20
    1476:	5f 93       	push	r21
    1478:	6f 93       	push	r22
    147a:	7f 93       	push	r23
    147c:	8f 93       	push	r24
    147e:	9f 93       	push	r25
    1480:	af 93       	push	r26
    1482:	bf 93       	push	r27
    1484:	ef 93       	push	r30
    1486:	ff 93       	push	r31
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
	if(pfunINTFun1!=NULL){
    1490:	80 91 7e 01 	lds	r24, 0x017E
    1494:	90 91 7f 01 	lds	r25, 0x017F
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	29 f0       	breq	.+10     	; 0x14a6 <__vector_2+0x40>
		pfunINTFun1();
    149c:	e0 91 7e 01 	lds	r30, 0x017E
    14a0:	f0 91 7f 01 	lds	r31, 0x017F
    14a4:	09 95       	icall
	}

}
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	ff 91       	pop	r31
    14ac:	ef 91       	pop	r30
    14ae:	bf 91       	pop	r27
    14b0:	af 91       	pop	r26
    14b2:	9f 91       	pop	r25
    14b4:	8f 91       	pop	r24
    14b6:	7f 91       	pop	r23
    14b8:	6f 91       	pop	r22
    14ba:	5f 91       	pop	r21
    14bc:	4f 91       	pop	r20
    14be:	3f 91       	pop	r19
    14c0:	2f 91       	pop	r18
    14c2:	0f 90       	pop	r0
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	0f 90       	pop	r0
    14c8:	1f 90       	pop	r1
    14ca:	18 95       	reti

000014cc <__vector_3>:


ISR(VECT_INT2){
    14cc:	1f 92       	push	r1
    14ce:	0f 92       	push	r0
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	0f 92       	push	r0
    14d4:	11 24       	eor	r1, r1
    14d6:	2f 93       	push	r18
    14d8:	3f 93       	push	r19
    14da:	4f 93       	push	r20
    14dc:	5f 93       	push	r21
    14de:	6f 93       	push	r22
    14e0:	7f 93       	push	r23
    14e2:	8f 93       	push	r24
    14e4:	9f 93       	push	r25
    14e6:	af 93       	push	r26
    14e8:	bf 93       	push	r27
    14ea:	ef 93       	push	r30
    14ec:	ff 93       	push	r31
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
	if(pfunINTFun2!=NULL){
    14f6:	80 91 80 01 	lds	r24, 0x0180
    14fa:	90 91 81 01 	lds	r25, 0x0181
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	29 f0       	breq	.+10     	; 0x150c <__vector_3+0x40>
		pfunINTFun2();
    1502:	e0 91 80 01 	lds	r30, 0x0180
    1506:	f0 91 81 01 	lds	r31, 0x0181
    150a:	09 95       	icall
	}

}
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	ff 91       	pop	r31
    1512:	ef 91       	pop	r30
    1514:	bf 91       	pop	r27
    1516:	af 91       	pop	r26
    1518:	9f 91       	pop	r25
    151a:	8f 91       	pop	r24
    151c:	7f 91       	pop	r23
    151e:	6f 91       	pop	r22
    1520:	5f 91       	pop	r21
    1522:	4f 91       	pop	r20
    1524:	3f 91       	pop	r19
    1526:	2f 91       	pop	r18
    1528:	0f 90       	pop	r0
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	0f 90       	pop	r0
    152e:	1f 90       	pop	r1
    1530:	18 95       	reti

00001532 <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	0f 92       	push	r0
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    153c:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    153e:	ea e3       	ldi	r30, 0x3A	; 58
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	8f ef       	ldi	r24, 0xFF	; 255
    1544:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    1546:	e7 e3       	ldi	r30, 0x37	; 55
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	8f ef       	ldi	r24, 0xFF	; 255
    154c:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    154e:	e4 e3       	ldi	r30, 0x34	; 52
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	86 e9       	ldi	r24, 0x96	; 150
    1554:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    1556:	e1 e3       	ldi	r30, 0x31	; 49
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	82 e9       	ldi	r24, 0x92	; 146
    155c:	80 83       	st	Z, r24

	PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    155e:	eb e3       	ldi	r30, 0x3B	; 59
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	10 82       	st	Z, r1

	Local_enuErrorstate = ES_OK;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    1568:	89 81       	ldd	r24, Y+1	; 0x01
}
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	00 d0       	rcall	.+0      	; 0x1578 <DIO_enuSetPortDirection+0x6>
    1578:	00 d0       	rcall	.+0      	; 0x157a <DIO_enuSetPortDirection+0x8>
    157a:	0f 92       	push	r0
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	8a 83       	std	Y+2, r24	; 0x02
    1582:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1584:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	84 30       	cpi	r24, 0x04	; 4
    158a:	a8 f5       	brcc	.+106    	; 0x15f6 <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	3d 83       	std	Y+5, r19	; 0x05
    1594:	2c 83       	std	Y+4, r18	; 0x04
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
    1598:	9d 81       	ldd	r25, Y+5	; 0x05
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	91 05       	cpc	r25, r1
    159e:	d1 f0       	breq	.+52     	; 0x15d4 <DIO_enuSetPortDirection+0x62>
    15a0:	2c 81       	ldd	r18, Y+4	; 0x04
    15a2:	3d 81       	ldd	r19, Y+5	; 0x05
    15a4:	22 30       	cpi	r18, 0x02	; 2
    15a6:	31 05       	cpc	r19, r1
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <DIO_enuSetPortDirection+0x42>
    15aa:	8c 81       	ldd	r24, Y+4	; 0x04
    15ac:	9d 81       	ldd	r25, Y+5	; 0x05
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	61 f0       	breq	.+24     	; 0x15ca <DIO_enuSetPortDirection+0x58>
    15b2:	1e c0       	rjmp	.+60     	; 0x15f0 <DIO_enuSetPortDirection+0x7e>
    15b4:	2c 81       	ldd	r18, Y+4	; 0x04
    15b6:	3d 81       	ldd	r19, Y+5	; 0x05
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	81 f0       	breq	.+32     	; 0x15de <DIO_enuSetPortDirection+0x6c>
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
    15c0:	9d 81       	ldd	r25, Y+5	; 0x05
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	91 05       	cpc	r25, r1
    15c6:	81 f0       	breq	.+32     	; 0x15e8 <DIO_enuSetPortDirection+0x76>
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    15ca:	ea e3       	ldi	r30, 0x3A	; 58
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	80 83       	st	Z, r24
    15d2:	0e c0       	rjmp	.+28     	; 0x15f0 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    15d4:	e7 e3       	ldi	r30, 0x37	; 55
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	80 83       	st	Z, r24
    15dc:	09 c0       	rjmp	.+18     	; 0x15f0 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    15de:	e4 e3       	ldi	r30, 0x34	; 52
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	80 83       	st	Z, r24
    15e6:	04 c0       	rjmp	.+8      	; 0x15f0 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    15e8:	e1 e3       	ldi	r30, 0x31	; 49
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    15f6:	83 e0       	ldi	r24, 0x03	; 3
    15f8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <DIO_enuSetPortValue+0x6>
    1612:	00 d0       	rcall	.+0      	; 0x1614 <DIO_enuSetPortValue+0x8>
    1614:	0f 92       	push	r0
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	8a 83       	std	Y+2, r24	; 0x02
    161c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    161e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	84 30       	cpi	r24, 0x04	; 4
    1624:	a8 f5       	brcc	.+106    	; 0x1690 <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	3d 83       	std	Y+5, r19	; 0x05
    162e:	2c 83       	std	Y+4, r18	; 0x04
    1630:	8c 81       	ldd	r24, Y+4	; 0x04
    1632:	9d 81       	ldd	r25, Y+5	; 0x05
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	91 05       	cpc	r25, r1
    1638:	d1 f0       	breq	.+52     	; 0x166e <DIO_enuSetPortValue+0x62>
    163a:	2c 81       	ldd	r18, Y+4	; 0x04
    163c:	3d 81       	ldd	r19, Y+5	; 0x05
    163e:	22 30       	cpi	r18, 0x02	; 2
    1640:	31 05       	cpc	r19, r1
    1642:	2c f4       	brge	.+10     	; 0x164e <DIO_enuSetPortValue+0x42>
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	9d 81       	ldd	r25, Y+5	; 0x05
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	61 f0       	breq	.+24     	; 0x1664 <DIO_enuSetPortValue+0x58>
    164c:	1e c0       	rjmp	.+60     	; 0x168a <DIO_enuSetPortValue+0x7e>
    164e:	2c 81       	ldd	r18, Y+4	; 0x04
    1650:	3d 81       	ldd	r19, Y+5	; 0x05
    1652:	22 30       	cpi	r18, 0x02	; 2
    1654:	31 05       	cpc	r19, r1
    1656:	81 f0       	breq	.+32     	; 0x1678 <DIO_enuSetPortValue+0x6c>
    1658:	8c 81       	ldd	r24, Y+4	; 0x04
    165a:	9d 81       	ldd	r25, Y+5	; 0x05
    165c:	83 30       	cpi	r24, 0x03	; 3
    165e:	91 05       	cpc	r25, r1
    1660:	81 f0       	breq	.+32     	; 0x1682 <DIO_enuSetPortValue+0x76>
    1662:	13 c0       	rjmp	.+38     	; 0x168a <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    1664:	eb e3       	ldi	r30, 0x3B	; 59
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	80 83       	st	Z, r24
    166c:	0e c0       	rjmp	.+28     	; 0x168a <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    166e:	e8 e3       	ldi	r30, 0x38	; 56
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	80 83       	st	Z, r24
    1676:	09 c0       	rjmp	.+18     	; 0x168a <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    1678:	e5 e3       	ldi	r30, 0x35	; 53
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	80 83       	st	Z, r24
    1680:	04 c0       	rjmp	.+8      	; 0x168a <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    1682:	e2 e3       	ldi	r30, 0x32	; 50
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1690:	83 e0       	ldi	r24, 0x03	; 3
    1692:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1694:	89 81       	ldd	r24, Y+1	; 0x01
}
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <DIO_enuTogPortValue+0x6>
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <DIO_enuTogPortValue+0x8>
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    16b4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	84 30       	cpi	r24, 0x04	; 4
    16ba:	08 f0       	brcs	.+2      	; 0x16be <DIO_enuTogPortValue+0x18>
    16bc:	41 c0       	rjmp	.+130    	; 0x1740 <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	3c 83       	std	Y+4, r19	; 0x04
    16c6:	2b 83       	std	Y+3, r18	; 0x03
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	91 05       	cpc	r25, r1
    16d0:	e9 f0       	breq	.+58     	; 0x170c <DIO_enuTogPortValue+0x66>
    16d2:	2b 81       	ldd	r18, Y+3	; 0x03
    16d4:	3c 81       	ldd	r19, Y+4	; 0x04
    16d6:	22 30       	cpi	r18, 0x02	; 2
    16d8:	31 05       	cpc	r19, r1
    16da:	2c f4       	brge	.+10     	; 0x16e6 <DIO_enuTogPortValue+0x40>
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	61 f0       	breq	.+24     	; 0x16fc <DIO_enuTogPortValue+0x56>
    16e4:	2a c0       	rjmp	.+84     	; 0x173a <DIO_enuTogPortValue+0x94>
    16e6:	2b 81       	ldd	r18, Y+3	; 0x03
    16e8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ea:	22 30       	cpi	r18, 0x02	; 2
    16ec:	31 05       	cpc	r19, r1
    16ee:	b1 f0       	breq	.+44     	; 0x171c <DIO_enuTogPortValue+0x76>
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	83 30       	cpi	r24, 0x03	; 3
    16f6:	91 05       	cpc	r25, r1
    16f8:	c9 f0       	breq	.+50     	; 0x172c <DIO_enuTogPortValue+0x86>
    16fa:	1f c0       	rjmp	.+62     	; 0x173a <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    16fc:	ab e3       	ldi	r26, 0x3B	; 59
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	eb e3       	ldi	r30, 0x3B	; 59
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	80 95       	com	r24
    1708:	8c 93       	st	X, r24
    170a:	17 c0       	rjmp	.+46     	; 0x173a <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    170c:	a8 e3       	ldi	r26, 0x38	; 56
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e8 e3       	ldi	r30, 0x38	; 56
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	80 95       	com	r24
    1718:	8c 93       	st	X, r24
    171a:	0f c0       	rjmp	.+30     	; 0x173a <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    171c:	a5 e3       	ldi	r26, 0x35	; 53
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e5 e3       	ldi	r30, 0x35	; 53
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	80 95       	com	r24
    1728:	8c 93       	st	X, r24
    172a:	07 c0       	rjmp	.+14     	; 0x173a <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    172c:	a2 e3       	ldi	r26, 0x32	; 50
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e2 e3       	ldi	r30, 0x32	; 50
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	80 95       	com	r24
    1738:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1740:	83 e0       	ldi	r24, 0x03	; 3
    1742:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1744:	89 81       	ldd	r24, Y+1	; 0x01
}
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	00 d0       	rcall	.+0      	; 0x175a <DIO_enuGetPortValue+0x6>
    175a:	00 d0       	rcall	.+0      	; 0x175c <DIO_enuGetPortValue+0x8>
    175c:	00 d0       	rcall	.+0      	; 0x175e <DIO_enuGetPortValue+0xa>
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	8a 83       	std	Y+2, r24	; 0x02
    1764:	7c 83       	std	Y+4, r23	; 0x04
    1766:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1768:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	09 f4       	brne	.+2      	; 0x1774 <DIO_enuGetPortValue+0x20>
    1772:	43 c0       	rjmp	.+134    	; 0x17fa <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	84 30       	cpi	r24, 0x04	; 4
    1778:	e8 f5       	brcc	.+122    	; 0x17f4 <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	3e 83       	std	Y+6, r19	; 0x06
    1782:	2d 83       	std	Y+5, r18	; 0x05
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	91 05       	cpc	r25, r1
    178c:	e1 f0       	breq	.+56     	; 0x17c6 <DIO_enuGetPortValue+0x72>
    178e:	2d 81       	ldd	r18, Y+5	; 0x05
    1790:	3e 81       	ldd	r19, Y+6	; 0x06
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	2c f4       	brge	.+10     	; 0x17a2 <DIO_enuGetPortValue+0x4e>
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	9e 81       	ldd	r25, Y+6	; 0x06
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	61 f0       	breq	.+24     	; 0x17b8 <DIO_enuGetPortValue+0x64>
    17a0:	26 c0       	rjmp	.+76     	; 0x17ee <DIO_enuGetPortValue+0x9a>
    17a2:	2d 81       	ldd	r18, Y+5	; 0x05
    17a4:	3e 81       	ldd	r19, Y+6	; 0x06
    17a6:	22 30       	cpi	r18, 0x02	; 2
    17a8:	31 05       	cpc	r19, r1
    17aa:	a1 f0       	breq	.+40     	; 0x17d4 <DIO_enuGetPortValue+0x80>
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	83 30       	cpi	r24, 0x03	; 3
    17b2:	91 05       	cpc	r25, r1
    17b4:	b1 f0       	breq	.+44     	; 0x17e2 <DIO_enuGetPortValue+0x8e>
    17b6:	1b c0       	rjmp	.+54     	; 0x17ee <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    17b8:	e9 e3       	ldi	r30, 0x39	; 57
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	eb 81       	ldd	r30, Y+3	; 0x03
    17c0:	fc 81       	ldd	r31, Y+4	; 0x04
    17c2:	80 83       	st	Z, r24
    17c4:	14 c0       	rjmp	.+40     	; 0x17ee <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    17c6:	e6 e3       	ldi	r30, 0x36	; 54
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	eb 81       	ldd	r30, Y+3	; 0x03
    17ce:	fc 81       	ldd	r31, Y+4	; 0x04
    17d0:	80 83       	st	Z, r24
    17d2:	0d c0       	rjmp	.+26     	; 0x17ee <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    17d4:	e3 e3       	ldi	r30, 0x33	; 51
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	eb 81       	ldd	r30, Y+3	; 0x03
    17dc:	fc 81       	ldd	r31, Y+4	; 0x04
    17de:	80 83       	st	Z, r24
    17e0:	06 c0       	rjmp	.+12     	; 0x17ee <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    17e2:	e0 e3       	ldi	r30, 0x30	; 48
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	eb 81       	ldd	r30, Y+3	; 0x03
    17ea:	fc 81       	ldd	r31, Y+4	; 0x04
    17ec:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	05 c0       	rjmp	.+10     	; 0x17fe <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    17fa:	82 e0       	ldi	r24, 0x02	; 2
    17fc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1800:	26 96       	adiw	r28, 0x06	; 6
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	00 d0       	rcall	.+0      	; 0x1818 <DIO_enuSetPinDirection+0x6>
    1818:	00 d0       	rcall	.+0      	; 0x181a <DIO_enuSetPinDirection+0x8>
    181a:	00 d0       	rcall	.+0      	; 0x181c <DIO_enuSetPinDirection+0xa>
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	8a 83       	std	Y+2, r24	; 0x02
    1822:	6b 83       	std	Y+3, r22	; 0x03
    1824:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1826:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	84 30       	cpi	r24, 0x04	; 4
    182c:	08 f0       	brcs	.+2      	; 0x1830 <DIO_enuSetPinDirection+0x1e>
    182e:	d1 c0       	rjmp	.+418    	; 0x19d2 <DIO_enuSetPinDirection+0x1c0>
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	88 30       	cpi	r24, 0x08	; 8
    1834:	08 f0       	brcs	.+2      	; 0x1838 <DIO_enuSetPinDirection+0x26>
    1836:	cd c0       	rjmp	.+410    	; 0x19d2 <DIO_enuSetPinDirection+0x1c0>
    1838:	8c 81       	ldd	r24, Y+4	; 0x04
    183a:	82 30       	cpi	r24, 0x02	; 2
    183c:	08 f0       	brcs	.+2      	; 0x1840 <DIO_enuSetPinDirection+0x2e>
    183e:	c9 c0       	rjmp	.+402    	; 0x19d2 <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	3e 83       	std	Y+6, r19	; 0x06
    1848:	2d 83       	std	Y+5, r18	; 0x05
    184a:	6d 81       	ldd	r22, Y+5	; 0x05
    184c:	7e 81       	ldd	r23, Y+6	; 0x06
    184e:	61 30       	cpi	r22, 0x01	; 1
    1850:	71 05       	cpc	r23, r1
    1852:	09 f4       	brne	.+2      	; 0x1856 <DIO_enuSetPinDirection+0x44>
    1854:	41 c0       	rjmp	.+130    	; 0x18d8 <DIO_enuSetPinDirection+0xc6>
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	82 30       	cpi	r24, 0x02	; 2
    185c:	91 05       	cpc	r25, r1
    185e:	34 f4       	brge	.+12     	; 0x186c <DIO_enuSetPinDirection+0x5a>
    1860:	2d 81       	ldd	r18, Y+5	; 0x05
    1862:	3e 81       	ldd	r19, Y+6	; 0x06
    1864:	21 15       	cp	r18, r1
    1866:	31 05       	cpc	r19, r1
    1868:	71 f0       	breq	.+28     	; 0x1886 <DIO_enuSetPinDirection+0x74>
    186a:	b0 c0       	rjmp	.+352    	; 0x19cc <DIO_enuSetPinDirection+0x1ba>
    186c:	6d 81       	ldd	r22, Y+5	; 0x05
    186e:	7e 81       	ldd	r23, Y+6	; 0x06
    1870:	62 30       	cpi	r22, 0x02	; 2
    1872:	71 05       	cpc	r23, r1
    1874:	09 f4       	brne	.+2      	; 0x1878 <DIO_enuSetPinDirection+0x66>
    1876:	59 c0       	rjmp	.+178    	; 0x192a <DIO_enuSetPinDirection+0x118>
    1878:	8d 81       	ldd	r24, Y+5	; 0x05
    187a:	9e 81       	ldd	r25, Y+6	; 0x06
    187c:	83 30       	cpi	r24, 0x03	; 3
    187e:	91 05       	cpc	r25, r1
    1880:	09 f4       	brne	.+2      	; 0x1884 <DIO_enuSetPinDirection+0x72>
    1882:	7c c0       	rjmp	.+248    	; 0x197c <DIO_enuSetPinDirection+0x16a>
    1884:	a3 c0       	rjmp	.+326    	; 0x19cc <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1886:	aa e3       	ldi	r26, 0x3A	; 58
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	ea e3       	ldi	r30, 0x3A	; 58
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	48 2f       	mov	r20, r24
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <DIO_enuSetPinDirection+0x90>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	2a 95       	dec	r18
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <DIO_enuSetPinDirection+0x8c>
    18a6:	80 95       	com	r24
    18a8:	84 23       	and	r24, r20
    18aa:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    18ac:	aa e3       	ldi	r26, 0x3A	; 58
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	ea e3       	ldi	r30, 0x3A	; 58
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	48 2f       	mov	r20, r24
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	b9 01       	movw	r22, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <DIO_enuSetPinDirection+0xba>
    18c8:	66 0f       	add	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	8a 95       	dec	r24
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <DIO_enuSetPinDirection+0xb6>
    18d0:	cb 01       	movw	r24, r22
    18d2:	84 2b       	or	r24, r20
    18d4:	8c 93       	st	X, r24
    18d6:	7a c0       	rjmp	.+244    	; 0x19cc <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    18d8:	a7 e3       	ldi	r26, 0x37	; 55
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e7 e3       	ldi	r30, 0x37	; 55
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_enuSetPinDirection+0xe2>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	2a 95       	dec	r18
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <DIO_enuSetPinDirection+0xde>
    18f8:	80 95       	com	r24
    18fa:	84 23       	and	r24, r20
    18fc:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    18fe:	a7 e3       	ldi	r26, 0x37	; 55
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e7 e3       	ldi	r30, 0x37	; 55
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	48 2f       	mov	r20, r24
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	b9 01       	movw	r22, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_enuSetPinDirection+0x10c>
    191a:	66 0f       	add	r22, r22
    191c:	77 1f       	adc	r23, r23
    191e:	8a 95       	dec	r24
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_enuSetPinDirection+0x108>
    1922:	cb 01       	movw	r24, r22
    1924:	84 2b       	or	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	51 c0       	rjmp	.+162    	; 0x19cc <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    192a:	a4 e3       	ldi	r26, 0x34	; 52
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e4 e3       	ldi	r30, 0x34	; 52
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_enuSetPinDirection+0x134>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	2a 95       	dec	r18
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_enuSetPinDirection+0x130>
    194a:	80 95       	com	r24
    194c:	84 23       	and	r24, r20
    194e:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    1950:	a4 e3       	ldi	r26, 0x34	; 52
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e4 e3       	ldi	r30, 0x34	; 52
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8c 81       	ldd	r24, Y+4	; 0x04
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	b9 01       	movw	r22, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <DIO_enuSetPinDirection+0x15e>
    196c:	66 0f       	add	r22, r22
    196e:	77 1f       	adc	r23, r23
    1970:	8a 95       	dec	r24
    1972:	e2 f7       	brpl	.-8      	; 0x196c <DIO_enuSetPinDirection+0x15a>
    1974:	cb 01       	movw	r24, r22
    1976:	84 2b       	or	r24, r20
    1978:	8c 93       	st	X, r24
    197a:	28 c0       	rjmp	.+80     	; 0x19cc <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    197c:	a1 e3       	ldi	r26, 0x31	; 49
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e1 e3       	ldi	r30, 0x31	; 49
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <DIO_enuSetPinDirection+0x186>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	2a 95       	dec	r18
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <DIO_enuSetPinDirection+0x182>
    199c:	80 95       	com	r24
    199e:	84 23       	and	r24, r20
    19a0:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    19a2:	a1 e3       	ldi	r26, 0x31	; 49
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e1 e3       	ldi	r30, 0x31	; 49
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	88 2f       	mov	r24, r24
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	b9 01       	movw	r22, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <DIO_enuSetPinDirection+0x1b0>
    19be:	66 0f       	add	r22, r22
    19c0:	77 1f       	adc	r23, r23
    19c2:	8a 95       	dec	r24
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <DIO_enuSetPinDirection+0x1ac>
    19c6:	cb 01       	movw	r24, r22
    19c8:	84 2b       	or	r24, r20
    19ca:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    19d2:	83 e0       	ldi	r24, 0x03	; 3
    19d4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d8:	26 96       	adiw	r28, 0x06	; 6
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <DIO_enuSetPinValue+0x6>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <DIO_enuSetPinValue+0x8>
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <DIO_enuSetPinValue+0xa>
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	8a 83       	std	Y+2, r24	; 0x02
    19fa:	6b 83       	std	Y+3, r22	; 0x03
    19fc:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    19fe:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	84 30       	cpi	r24, 0x04	; 4
    1a04:	08 f0       	brcs	.+2      	; 0x1a08 <DIO_enuSetPinValue+0x1e>
    1a06:	d1 c0       	rjmp	.+418    	; 0x1baa <DIO_enuSetPinValue+0x1c0>
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	88 30       	cpi	r24, 0x08	; 8
    1a0c:	08 f0       	brcs	.+2      	; 0x1a10 <DIO_enuSetPinValue+0x26>
    1a0e:	cd c0       	rjmp	.+410    	; 0x1baa <DIO_enuSetPinValue+0x1c0>
    1a10:	8c 81       	ldd	r24, Y+4	; 0x04
    1a12:	82 30       	cpi	r24, 0x02	; 2
    1a14:	08 f0       	brcs	.+2      	; 0x1a18 <DIO_enuSetPinValue+0x2e>
    1a16:	c9 c0       	rjmp	.+402    	; 0x1baa <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	3e 83       	std	Y+6, r19	; 0x06
    1a20:	2d 83       	std	Y+5, r18	; 0x05
    1a22:	6d 81       	ldd	r22, Y+5	; 0x05
    1a24:	7e 81       	ldd	r23, Y+6	; 0x06
    1a26:	61 30       	cpi	r22, 0x01	; 1
    1a28:	71 05       	cpc	r23, r1
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <DIO_enuSetPinValue+0x44>
    1a2c:	41 c0       	rjmp	.+130    	; 0x1ab0 <DIO_enuSetPinValue+0xc6>
    1a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a30:	9e 81       	ldd	r25, Y+6	; 0x06
    1a32:	82 30       	cpi	r24, 0x02	; 2
    1a34:	91 05       	cpc	r25, r1
    1a36:	34 f4       	brge	.+12     	; 0x1a44 <DIO_enuSetPinValue+0x5a>
    1a38:	2d 81       	ldd	r18, Y+5	; 0x05
    1a3a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a3c:	21 15       	cp	r18, r1
    1a3e:	31 05       	cpc	r19, r1
    1a40:	71 f0       	breq	.+28     	; 0x1a5e <DIO_enuSetPinValue+0x74>
    1a42:	b0 c0       	rjmp	.+352    	; 0x1ba4 <DIO_enuSetPinValue+0x1ba>
    1a44:	6d 81       	ldd	r22, Y+5	; 0x05
    1a46:	7e 81       	ldd	r23, Y+6	; 0x06
    1a48:	62 30       	cpi	r22, 0x02	; 2
    1a4a:	71 05       	cpc	r23, r1
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <DIO_enuSetPinValue+0x66>
    1a4e:	59 c0       	rjmp	.+178    	; 0x1b02 <DIO_enuSetPinValue+0x118>
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	9e 81       	ldd	r25, Y+6	; 0x06
    1a54:	83 30       	cpi	r24, 0x03	; 3
    1a56:	91 05       	cpc	r25, r1
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <DIO_enuSetPinValue+0x72>
    1a5a:	7c c0       	rjmp	.+248    	; 0x1b54 <DIO_enuSetPinValue+0x16a>
    1a5c:	a3 c0       	rjmp	.+326    	; 0x1ba4 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1a5e:	ab e3       	ldi	r26, 0x3B	; 59
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	eb e3       	ldi	r30, 0x3B	; 59
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	48 2f       	mov	r20, r24
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <DIO_enuSetPinValue+0x90>
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	2a 95       	dec	r18
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <DIO_enuSetPinValue+0x8c>
    1a7e:	80 95       	com	r24
    1a80:	84 23       	and	r24, r20
    1a82:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    1a84:	ab e3       	ldi	r26, 0x3B	; 59
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	eb e3       	ldi	r30, 0x3B	; 59
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	48 2f       	mov	r20, r24
    1a90:	8c 81       	ldd	r24, Y+4	; 0x04
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	88 2f       	mov	r24, r24
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	b9 01       	movw	r22, r18
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <DIO_enuSetPinValue+0xba>
    1aa0:	66 0f       	add	r22, r22
    1aa2:	77 1f       	adc	r23, r23
    1aa4:	8a 95       	dec	r24
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <DIO_enuSetPinValue+0xb6>
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	84 2b       	or	r24, r20
    1aac:	8c 93       	st	X, r24
    1aae:	7a c0       	rjmp	.+244    	; 0x1ba4 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1ab0:	a8 e3       	ldi	r26, 0x38	; 56
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e8 e3       	ldi	r30, 0x38	; 56
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	48 2f       	mov	r20, r24
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <DIO_enuSetPinValue+0xe2>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	2a 95       	dec	r18
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <DIO_enuSetPinValue+0xde>
    1ad0:	80 95       	com	r24
    1ad2:	84 23       	and	r24, r20
    1ad4:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    1ad6:	a8 e3       	ldi	r26, 0x38	; 56
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e8 e3       	ldi	r30, 0x38	; 56
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	48 2f       	mov	r20, r24
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	88 2f       	mov	r24, r24
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	b9 01       	movw	r22, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <DIO_enuSetPinValue+0x10c>
    1af2:	66 0f       	add	r22, r22
    1af4:	77 1f       	adc	r23, r23
    1af6:	8a 95       	dec	r24
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <DIO_enuSetPinValue+0x108>
    1afa:	cb 01       	movw	r24, r22
    1afc:	84 2b       	or	r24, r20
    1afe:	8c 93       	st	X, r24
    1b00:	51 c0       	rjmp	.+162    	; 0x1ba4 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1b02:	a5 e3       	ldi	r26, 0x35	; 53
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e5 e3       	ldi	r30, 0x35	; 53
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	48 2f       	mov	r20, r24
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <DIO_enuSetPinValue+0x134>
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	2a 95       	dec	r18
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <DIO_enuSetPinValue+0x130>
    1b22:	80 95       	com	r24
    1b24:	84 23       	and	r24, r20
    1b26:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    1b28:	a5 e3       	ldi	r26, 0x35	; 53
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e5 e3       	ldi	r30, 0x35	; 53
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	48 2f       	mov	r20, r24
    1b34:	8c 81       	ldd	r24, Y+4	; 0x04
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	88 2f       	mov	r24, r24
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	b9 01       	movw	r22, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <DIO_enuSetPinValue+0x15e>
    1b44:	66 0f       	add	r22, r22
    1b46:	77 1f       	adc	r23, r23
    1b48:	8a 95       	dec	r24
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <DIO_enuSetPinValue+0x15a>
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	84 2b       	or	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	28 c0       	rjmp	.+80     	; 0x1ba4 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1b54:	a2 e3       	ldi	r26, 0x32	; 50
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e2 e3       	ldi	r30, 0x32	; 50
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <DIO_enuSetPinValue+0x186>
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	2a 95       	dec	r18
    1b72:	e2 f7       	brpl	.-8      	; 0x1b6c <DIO_enuSetPinValue+0x182>
    1b74:	80 95       	com	r24
    1b76:	84 23       	and	r24, r20
    1b78:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    1b7a:	a2 e3       	ldi	r26, 0x32	; 50
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e2 e3       	ldi	r30, 0x32	; 50
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	48 2f       	mov	r20, r24
    1b86:	8c 81       	ldd	r24, Y+4	; 0x04
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	88 2f       	mov	r24, r24
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	b9 01       	movw	r22, r18
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <DIO_enuSetPinValue+0x1b0>
    1b96:	66 0f       	add	r22, r22
    1b98:	77 1f       	adc	r23, r23
    1b9a:	8a 95       	dec	r24
    1b9c:	e2 f7       	brpl	.-8      	; 0x1b96 <DIO_enuSetPinValue+0x1ac>
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	84 2b       	or	r24, r20
    1ba2:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1baa:	83 e0       	ldi	r24, 0x03	; 3
    1bac:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb0:	26 96       	adiw	r28, 0x06	; 6
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <DIO_enuTogPin+0x6>
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <DIO_enuTogPin+0x8>
    1bca:	0f 92       	push	r0
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	8a 83       	std	Y+2, r24	; 0x02
    1bd2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1bd4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	84 30       	cpi	r24, 0x04	; 4
    1bda:	08 f0       	brcs	.+2      	; 0x1bde <DIO_enuTogPin+0x1c>
    1bdc:	75 c0       	rjmp	.+234    	; 0x1cc8 <DIO_enuTogPin+0x106>
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	88 30       	cpi	r24, 0x08	; 8
    1be2:	08 f0       	brcs	.+2      	; 0x1be6 <DIO_enuTogPin+0x24>
    1be4:	71 c0       	rjmp	.+226    	; 0x1cc8 <DIO_enuTogPin+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	3d 83       	std	Y+5, r19	; 0x05
    1bee:	2c 83       	std	Y+4, r18	; 0x04
    1bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	49 f1       	breq	.+82     	; 0x1c4c <DIO_enuTogPin+0x8a>
    1bfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1bfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1bfe:	22 30       	cpi	r18, 0x02	; 2
    1c00:	31 05       	cpc	r19, r1
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <DIO_enuTogPin+0x4c>
    1c04:	8c 81       	ldd	r24, Y+4	; 0x04
    1c06:	9d 81       	ldd	r25, Y+5	; 0x05
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	61 f0       	breq	.+24     	; 0x1c24 <DIO_enuTogPin+0x62>
    1c0c:	5a c0       	rjmp	.+180    	; 0x1cc2 <DIO_enuTogPin+0x100>
    1c0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c10:	3d 81       	ldd	r19, Y+5	; 0x05
    1c12:	22 30       	cpi	r18, 0x02	; 2
    1c14:	31 05       	cpc	r19, r1
    1c16:	71 f1       	breq	.+92     	; 0x1c74 <DIO_enuTogPin+0xb2>
    1c18:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1c:	83 30       	cpi	r24, 0x03	; 3
    1c1e:	91 05       	cpc	r25, r1
    1c20:	e9 f1       	breq	.+122    	; 0x1c9c <DIO_enuTogPin+0xda>
    1c22:	4f c0       	rjmp	.+158    	; 0x1cc2 <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1c24:	ab e3       	ldi	r26, 0x3B	; 59
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	eb e3       	ldi	r30, 0x3B	; 59
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <DIO_enuTogPin+0x80>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <DIO_enuTogPin+0x7c>
    1c46:	84 27       	eor	r24, r20
    1c48:	8c 93       	st	X, r24
    1c4a:	3b c0       	rjmp	.+118    	; 0x1cc2 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1c4c:	a8 e3       	ldi	r26, 0x38	; 56
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e8 e3       	ldi	r30, 0x38	; 56
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	48 2f       	mov	r20, r24
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	02 2e       	mov	r0, r18
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <DIO_enuTogPin+0xa8>
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	0a 94       	dec	r0
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <DIO_enuTogPin+0xa4>
    1c6e:	84 27       	eor	r24, r20
    1c70:	8c 93       	st	X, r24
    1c72:	27 c0       	rjmp	.+78     	; 0x1cc2 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1c74:	a5 e3       	ldi	r26, 0x35	; 53
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e5 e3       	ldi	r30, 0x35	; 53
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	48 2f       	mov	r20, r24
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	02 2e       	mov	r0, r18
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <DIO_enuTogPin+0xd0>
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	0a 94       	dec	r0
    1c94:	e2 f7       	brpl	.-8      	; 0x1c8e <DIO_enuTogPin+0xcc>
    1c96:	84 27       	eor	r24, r20
    1c98:	8c 93       	st	X, r24
    1c9a:	13 c0       	rjmp	.+38     	; 0x1cc2 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1c9c:	a2 e3       	ldi	r26, 0x32	; 50
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e2 e3       	ldi	r30, 0x32	; 50
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	48 2f       	mov	r20, r24
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	02 2e       	mov	r0, r18
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <DIO_enuTogPin+0xf8>
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	0a 94       	dec	r0
    1cbc:	e2 f7       	brpl	.-8      	; 0x1cb6 <DIO_enuTogPin+0xf4>
    1cbe:	84 27       	eor	r24, r20
    1cc0:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1cc8:	83 e0       	ldi	r24, 0x03	; 3
    1cca:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	27 97       	sbiw	r28, 0x07	; 7
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	8a 83       	std	Y+2, r24	; 0x02
    1cf4:	6b 83       	std	Y+3, r22	; 0x03
    1cf6:	5d 83       	std	Y+5, r21	; 0x05
    1cf8:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1cfa:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    1cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <DIO_enuGetPinValue+0x28>
    1d04:	7e c0       	rjmp	.+252    	; 0x1e02 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	84 30       	cpi	r24, 0x04	; 4
    1d0a:	08 f0       	brcs	.+2      	; 0x1d0e <DIO_enuGetPinValue+0x30>
    1d0c:	77 c0       	rjmp	.+238    	; 0x1dfc <DIO_enuGetPinValue+0x11e>
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	88 30       	cpi	r24, 0x08	; 8
    1d12:	08 f0       	brcs	.+2      	; 0x1d16 <DIO_enuGetPinValue+0x38>
    1d14:	73 c0       	rjmp	.+230    	; 0x1dfc <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	3f 83       	std	Y+7, r19	; 0x07
    1d1e:	2e 83       	std	Y+6, r18	; 0x06
    1d20:	4e 81       	ldd	r20, Y+6	; 0x06
    1d22:	5f 81       	ldd	r21, Y+7	; 0x07
    1d24:	41 30       	cpi	r20, 0x01	; 1
    1d26:	51 05       	cpc	r21, r1
    1d28:	59 f1       	breq	.+86     	; 0x1d80 <DIO_enuGetPinValue+0xa2>
    1d2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d2e:	82 30       	cpi	r24, 0x02	; 2
    1d30:	91 05       	cpc	r25, r1
    1d32:	34 f4       	brge	.+12     	; 0x1d40 <DIO_enuGetPinValue+0x62>
    1d34:	2e 81       	ldd	r18, Y+6	; 0x06
    1d36:	3f 81       	ldd	r19, Y+7	; 0x07
    1d38:	21 15       	cp	r18, r1
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	69 f0       	breq	.+26     	; 0x1d58 <DIO_enuGetPinValue+0x7a>
    1d3e:	5b c0       	rjmp	.+182    	; 0x1df6 <DIO_enuGetPinValue+0x118>
    1d40:	4e 81       	ldd	r20, Y+6	; 0x06
    1d42:	5f 81       	ldd	r21, Y+7	; 0x07
    1d44:	42 30       	cpi	r20, 0x02	; 2
    1d46:	51 05       	cpc	r21, r1
    1d48:	79 f1       	breq	.+94     	; 0x1da8 <DIO_enuGetPinValue+0xca>
    1d4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d4e:	83 30       	cpi	r24, 0x03	; 3
    1d50:	91 05       	cpc	r25, r1
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <DIO_enuGetPinValue+0x78>
    1d54:	3d c0       	rjmp	.+122    	; 0x1dd0 <DIO_enuGetPinValue+0xf2>
    1d56:	4f c0       	rjmp	.+158    	; 0x1df6 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    1d58:	e9 e3       	ldi	r30, 0x39	; 57
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a9 01       	movw	r20, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <DIO_enuGetPinValue+0x92>
    1d6c:	55 95       	asr	r21
    1d6e:	47 95       	ror	r20
    1d70:	8a 95       	dec	r24
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <DIO_enuGetPinValue+0x8e>
    1d74:	ca 01       	movw	r24, r20
    1d76:	81 70       	andi	r24, 0x01	; 1
    1d78:	ec 81       	ldd	r30, Y+4	; 0x04
    1d7a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d7c:	80 83       	st	Z, r24
    1d7e:	3b c0       	rjmp	.+118    	; 0x1df6 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    1d80:	e6 e3       	ldi	r30, 0x36	; 54
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	88 2f       	mov	r24, r24
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	a9 01       	movw	r20, r18
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <DIO_enuGetPinValue+0xba>
    1d94:	55 95       	asr	r21
    1d96:	47 95       	ror	r20
    1d98:	8a 95       	dec	r24
    1d9a:	e2 f7       	brpl	.-8      	; 0x1d94 <DIO_enuGetPinValue+0xb6>
    1d9c:	ca 01       	movw	r24, r20
    1d9e:	81 70       	andi	r24, 0x01	; 1
    1da0:	ec 81       	ldd	r30, Y+4	; 0x04
    1da2:	fd 81       	ldd	r31, Y+5	; 0x05
    1da4:	80 83       	st	Z, r24
    1da6:	27 c0       	rjmp	.+78     	; 0x1df6 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    1da8:	e3 e3       	ldi	r30, 0x33	; 51
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a9 01       	movw	r20, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <DIO_enuGetPinValue+0xe2>
    1dbc:	55 95       	asr	r21
    1dbe:	47 95       	ror	r20
    1dc0:	8a 95       	dec	r24
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <DIO_enuGetPinValue+0xde>
    1dc4:	ca 01       	movw	r24, r20
    1dc6:	81 70       	andi	r24, 0x01	; 1
    1dc8:	ec 81       	ldd	r30, Y+4	; 0x04
    1dca:	fd 81       	ldd	r31, Y+5	; 0x05
    1dcc:	80 83       	st	Z, r24
    1dce:	13 c0       	rjmp	.+38     	; 0x1df6 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    1dd0:	e0 e3       	ldi	r30, 0x30	; 48
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	88 2f       	mov	r24, r24
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	a9 01       	movw	r20, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <DIO_enuGetPinValue+0x10a>
    1de4:	55 95       	asr	r21
    1de6:	47 95       	ror	r20
    1de8:	8a 95       	dec	r24
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <DIO_enuGetPinValue+0x106>
    1dec:	ca 01       	movw	r24, r20
    1dee:	81 70       	andi	r24, 0x01	; 1
    1df0:	ec 81       	ldd	r30, Y+4	; 0x04
    1df2:	fd 81       	ldd	r31, Y+5	; 0x05
    1df4:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	05 c0       	rjmp	.+10     	; 0x1e06 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    1dfc:	83 e0       	ldi	r24, 0x03	; 3
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e08:	27 96       	adiw	r28, 0x07	; 7
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <TH_enuInit>:
#include "../../LIB/stdTypes.h"
#include "../../MCAL/DIO/DIO_int.h"

#include "TH_config.h"
#include "TH_priv.h"
ES_t TH_enuInit(){
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	0f 92       	push	r0
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1e24:	19 82       	std	Y+1, r1	; 0x01
#if positive_pin_channel ==ADC0 && negative_pin_channel==NOT_CONNECTED
     DIO_enuSetPinDirection(DIO_u8PORTA,ADC0,DIO_u8INPUT);
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	60 e0       	ldi	r22, 0x00	; 0
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_enuSetPinDirection>
     Local_enuErrorstate = ES_OK;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	89 83       	std	Y+1, r24	; 0x01
#else
#error " ERROR "
#endif
			return Local_enuErrorstate;
    1e34:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e36:	0f 90       	pop	r0
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <TH_enuGetTem>:
ES_t TH_enuGetTem(u16 ADC_read,s32* temperature){
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <TH_enuGetTem+0x6>
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <TH_enuGetTem+0x8>
    1e46:	0f 92       	push	r0
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
    1e4c:	9b 83       	std	Y+3, r25	; 0x03
    1e4e:	8a 83       	std	Y+2, r24	; 0x02
    1e50:	7d 83       	std	Y+5, r23	; 0x05
    1e52:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1e54:	19 82       	std	Y+1, r1	; 0x01
	*temperature=(ADC_read*4.88)/10.0;
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5a:	cc 01       	movw	r24, r24
    1e5c:	a0 e0       	ldi	r26, 0x00	; 0
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	bc 01       	movw	r22, r24
    1e62:	cd 01       	movw	r24, r26
    1e64:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	26 ef       	ldi	r18, 0xF6	; 246
    1e72:	38 e2       	ldi	r19, 0x28	; 40
    1e74:	4c e9       	ldi	r20, 0x9C	; 156
    1e76:	50 e4       	ldi	r21, 0x40	; 64
    1e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	bc 01       	movw	r22, r24
    1e82:	cd 01       	movw	r24, r26
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e2       	ldi	r20, 0x20	; 32
    1e8a:	51 e4       	ldi	r21, 0x41	; 65
    1e8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	bc 01       	movw	r22, r24
    1e96:	cd 01       	movw	r24, r26
    1e98:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ea2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ea4:	80 83       	st	Z, r24
    1ea6:	91 83       	std	Z+1, r25	; 0x01
    1ea8:	a2 83       	std	Z+2, r26	; 0x02
    1eaa:	b3 83       	std	Z+3, r27	; 0x03

				return Local_enuErrorstate;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	e9 97       	sbiw	r28, 0x39	; 57
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1ed2:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	61 e0       	ldi	r22, 0x01	; 1
    1ed8:	41 e0       	ldi	r20, 0x01	; 1
    1eda:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	62 e0       	ldi	r22, 0x02	; 2
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	63 e0       	ldi	r22, 0x03	; 3
    1eec:	41 e0       	ldi	r20, 0x01	; 1
    1eee:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    1ef2:	82 e0       	ldi	r24, 0x02	; 2
    1ef4:	67 e0       	ldi	r22, 0x07	; 7
    1ef6:	41 e0       	ldi	r20, 0x01	; 1
    1ef8:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	66 e0       	ldi	r22, 0x06	; 6
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1f06:	82 e0       	ldi	r24, 0x02	; 2
    1f08:	65 e0       	ldi	r22, 0x05	; 5
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1f10:	82 e0       	ldi	r24, 0x02	; 2
    1f12:	64 e0       	ldi	r22, 0x04	; 4
    1f14:	41 e0       	ldi	r20, 0x01	; 1
    1f16:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_enuSetPinDirection>
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	ac e0       	ldi	r26, 0x0C	; 12
    1f20:	b2 e4       	ldi	r27, 0x42	; 66
    1f22:	8d ab       	std	Y+53, r24	; 0x35
    1f24:	9e ab       	std	Y+54, r25	; 0x36
    1f26:	af ab       	std	Y+55, r26	; 0x37
    1f28:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f2c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f2e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f30:	98 ad       	ldd	r25, Y+56	; 0x38
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4a e7       	ldi	r20, 0x7A	; 122
    1f38:	53 e4       	ldi	r21, 0x43	; 67
    1f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	89 ab       	std	Y+49, r24	; 0x31
    1f44:	9a ab       	std	Y+50, r25	; 0x32
    1f46:	ab ab       	std	Y+51, r26	; 0x33
    1f48:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f50:	9c a9       	ldd	r25, Y+52	; 0x34
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	2c f4       	brge	.+10     	; 0x1f6c <LCD_enuInit+0xae>
		__ticks = 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	98 ab       	std	Y+48, r25	; 0x30
    1f68:	8f a7       	std	Y+47, r24	; 0x2f
    1f6a:	3f c0       	rjmp	.+126    	; 0x1fea <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    1f6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f70:	8b a9       	ldd	r24, Y+51	; 0x33
    1f72:	9c a9       	ldd	r25, Y+52	; 0x34
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	3f ef       	ldi	r19, 0xFF	; 255
    1f78:	4f e7       	ldi	r20, 0x7F	; 127
    1f7a:	57 e4       	ldi	r21, 0x47	; 71
    1f7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f80:	18 16       	cp	r1, r24
    1f82:	4c f5       	brge	.+82     	; 0x1fd6 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f84:	6d a9       	ldd	r22, Y+53	; 0x35
    1f86:	7e a9       	ldd	r23, Y+54	; 0x36
    1f88:	8f a9       	ldd	r24, Y+55	; 0x37
    1f8a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e2       	ldi	r20, 0x20	; 32
    1f92:	51 e4       	ldi	r21, 0x41	; 65
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	98 ab       	std	Y+48, r25	; 0x30
    1faa:	8f a7       	std	Y+47, r24	; 0x2f
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <LCD_enuInit+0x10e>
    1fae:	89 e1       	ldi	r24, 0x19	; 25
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9e a7       	std	Y+46, r25	; 0x2e
    1fb4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fb6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fb8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <LCD_enuInit+0xfc>
    1fbe:	9e a7       	std	Y+46, r25	; 0x2e
    1fc0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	98 ab       	std	Y+48, r25	; 0x30
    1fca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fce:	98 a9       	ldd	r25, Y+48	; 0x30
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	69 f7       	brne	.-38     	; 0x1fae <LCD_enuInit+0xf0>
    1fd4:	14 c0       	rjmp	.+40     	; 0x1ffe <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fd8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fda:	8b a9       	ldd	r24, Y+51	; 0x33
    1fdc:	9c a9       	ldd	r25, Y+52	; 0x34
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	98 ab       	std	Y+48, r25	; 0x30
    1fe8:	8f a7       	std	Y+47, r24	; 0x2f
    1fea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fec:	98 a9       	ldd	r25, Y+48	; 0x30
    1fee:	9c a7       	std	Y+44, r25	; 0x2c
    1ff0:	8b a7       	std	Y+43, r24	; 0x2b
    1ff2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ff4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <LCD_enuInit+0x138>
    1ffa:	9c a7       	std	Y+44, r25	; 0x2c
    1ffc:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);

	//function set
	LCD_invidSendCommend(0x38);
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
    1ffe:	88 e2       	ldi	r24, 0x28	; 40
    2000:	0e 94 38 16 	call	0x2c70	; 0x2c70 <LCD_invidSendCommend>
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a0 e8       	ldi	r26, 0x80	; 128
    200a:	bf e3       	ldi	r27, 0x3F	; 63
    200c:	8f a3       	std	Y+39, r24	; 0x27
    200e:	98 a7       	std	Y+40, r25	; 0x28
    2010:	a9 a7       	std	Y+41, r26	; 0x29
    2012:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2014:	6f a1       	ldd	r22, Y+39	; 0x27
    2016:	78 a5       	ldd	r23, Y+40	; 0x28
    2018:	89 a5       	ldd	r24, Y+41	; 0x29
    201a:	9a a5       	ldd	r25, Y+42	; 0x2a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a e7       	ldi	r20, 0x7A	; 122
    2022:	53 e4       	ldi	r21, 0x43	; 67
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	8b a3       	std	Y+35, r24	; 0x23
    202e:	9c a3       	std	Y+36, r25	; 0x24
    2030:	ad a3       	std	Y+37, r26	; 0x25
    2032:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2034:	6b a1       	ldd	r22, Y+35	; 0x23
    2036:	7c a1       	ldd	r23, Y+36	; 0x24
    2038:	8d a1       	ldd	r24, Y+37	; 0x25
    203a:	9e a1       	ldd	r25, Y+38	; 0x26
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e8       	ldi	r20, 0x80	; 128
    2042:	5f e3       	ldi	r21, 0x3F	; 63
    2044:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2048:	88 23       	and	r24, r24
    204a:	2c f4       	brge	.+10     	; 0x2056 <LCD_enuInit+0x198>
		__ticks = 1;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	9a a3       	std	Y+34, r25	; 0x22
    2052:	89 a3       	std	Y+33, r24	; 0x21
    2054:	3f c0       	rjmp	.+126    	; 0x20d4 <LCD_enuInit+0x216>
	else if (__tmp > 65535)
    2056:	6b a1       	ldd	r22, Y+35	; 0x23
    2058:	7c a1       	ldd	r23, Y+36	; 0x24
    205a:	8d a1       	ldd	r24, Y+37	; 0x25
    205c:	9e a1       	ldd	r25, Y+38	; 0x26
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	3f ef       	ldi	r19, 0xFF	; 255
    2062:	4f e7       	ldi	r20, 0x7F	; 127
    2064:	57 e4       	ldi	r21, 0x47	; 71
    2066:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    206a:	18 16       	cp	r1, r24
    206c:	4c f5       	brge	.+82     	; 0x20c0 <LCD_enuInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206e:	6f a1       	ldd	r22, Y+39	; 0x27
    2070:	78 a5       	ldd	r23, Y+40	; 0x28
    2072:	89 a5       	ldd	r24, Y+41	; 0x29
    2074:	9a a5       	ldd	r25, Y+42	; 0x2a
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9a a3       	std	Y+34, r25	; 0x22
    2094:	89 a3       	std	Y+33, r24	; 0x21
    2096:	0f c0       	rjmp	.+30     	; 0x20b6 <LCD_enuInit+0x1f8>
    2098:	89 e1       	ldi	r24, 0x19	; 25
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	98 a3       	std	Y+32, r25	; 0x20
    209e:	8f 8f       	std	Y+31, r24	; 0x1f
    20a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20a2:	98 a1       	ldd	r25, Y+32	; 0x20
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <LCD_enuInit+0x1e6>
    20a8:	98 a3       	std	Y+32, r25	; 0x20
    20aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ac:	89 a1       	ldd	r24, Y+33	; 0x21
    20ae:	9a a1       	ldd	r25, Y+34	; 0x22
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	9a a3       	std	Y+34, r25	; 0x22
    20b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b6:	89 a1       	ldd	r24, Y+33	; 0x21
    20b8:	9a a1       	ldd	r25, Y+34	; 0x22
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	69 f7       	brne	.-38     	; 0x2098 <LCD_enuInit+0x1da>
    20be:	14 c0       	rjmp	.+40     	; 0x20e8 <LCD_enuInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c0:	6b a1       	ldd	r22, Y+35	; 0x23
    20c2:	7c a1       	ldd	r23, Y+36	; 0x24
    20c4:	8d a1       	ldd	r24, Y+37	; 0x25
    20c6:	9e a1       	ldd	r25, Y+38	; 0x26
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9a a3       	std	Y+34, r25	; 0x22
    20d2:	89 a3       	std	Y+33, r24	; 0x21
    20d4:	89 a1       	ldd	r24, Y+33	; 0x21
    20d6:	9a a1       	ldd	r25, Y+34	; 0x22
    20d8:	9e 8f       	std	Y+30, r25	; 0x1e
    20da:	8d 8f       	std	Y+29, r24	; 0x1d
    20dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <LCD_enuInit+0x222>
    20e4:	9e 8f       	std	Y+30, r25	; 0x1e
    20e6:	8d 8f       	std	Y+29, r24	; 0x1d
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    20e8:	8f e0       	ldi	r24, 0x0F	; 15
    20ea:	0e 94 38 16 	call	0x2c70	; 0x2c70 <LCD_invidSendCommend>
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	a0 e8       	ldi	r26, 0x80	; 128
    20f4:	bf e3       	ldi	r27, 0x3F	; 63
    20f6:	89 8f       	std	Y+25, r24	; 0x19
    20f8:	9a 8f       	std	Y+26, r25	; 0x1a
    20fa:	ab 8f       	std	Y+27, r26	; 0x1b
    20fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2100:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2102:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2104:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	4a e7       	ldi	r20, 0x7A	; 122
    210c:	53 e4       	ldi	r21, 0x43	; 67
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	8d 8b       	std	Y+21, r24	; 0x15
    2118:	9e 8b       	std	Y+22, r25	; 0x16
    211a:	af 8b       	std	Y+23, r26	; 0x17
    211c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    211e:	6d 89       	ldd	r22, Y+21	; 0x15
    2120:	7e 89       	ldd	r23, Y+22	; 0x16
    2122:	8f 89       	ldd	r24, Y+23	; 0x17
    2124:	98 8d       	ldd	r25, Y+24	; 0x18
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f e3       	ldi	r21, 0x3F	; 63
    212e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2132:	88 23       	and	r24, r24
    2134:	2c f4       	brge	.+10     	; 0x2140 <LCD_enuInit+0x282>
		__ticks = 1;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9c 8b       	std	Y+20, r25	; 0x14
    213c:	8b 8b       	std	Y+19, r24	; 0x13
    213e:	3f c0       	rjmp	.+126    	; 0x21be <LCD_enuInit+0x300>
	else if (__tmp > 65535)
    2140:	6d 89       	ldd	r22, Y+21	; 0x15
    2142:	7e 89       	ldd	r23, Y+22	; 0x16
    2144:	8f 89       	ldd	r24, Y+23	; 0x17
    2146:	98 8d       	ldd	r25, Y+24	; 0x18
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	3f ef       	ldi	r19, 0xFF	; 255
    214c:	4f e7       	ldi	r20, 0x7F	; 127
    214e:	57 e4       	ldi	r21, 0x47	; 71
    2150:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2154:	18 16       	cp	r1, r24
    2156:	4c f5       	brge	.+82     	; 0x21aa <LCD_enuInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2158:	69 8d       	ldd	r22, Y+25	; 0x19
    215a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    215c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    215e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e2       	ldi	r20, 0x20	; 32
    2166:	51 e4       	ldi	r21, 0x41	; 65
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	bc 01       	movw	r22, r24
    2172:	cd 01       	movw	r24, r26
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	9c 8b       	std	Y+20, r25	; 0x14
    217e:	8b 8b       	std	Y+19, r24	; 0x13
    2180:	0f c0       	rjmp	.+30     	; 0x21a0 <LCD_enuInit+0x2e2>
    2182:	89 e1       	ldi	r24, 0x19	; 25
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9a 8b       	std	Y+18, r25	; 0x12
    2188:	89 8b       	std	Y+17, r24	; 0x11
    218a:	89 89       	ldd	r24, Y+17	; 0x11
    218c:	9a 89       	ldd	r25, Y+18	; 0x12
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <LCD_enuInit+0x2d0>
    2192:	9a 8b       	std	Y+18, r25	; 0x12
    2194:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2196:	8b 89       	ldd	r24, Y+19	; 0x13
    2198:	9c 89       	ldd	r25, Y+20	; 0x14
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	9c 8b       	std	Y+20, r25	; 0x14
    219e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a0:	8b 89       	ldd	r24, Y+19	; 0x13
    21a2:	9c 89       	ldd	r25, Y+20	; 0x14
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	69 f7       	brne	.-38     	; 0x2182 <LCD_enuInit+0x2c4>
    21a8:	14 c0       	rjmp	.+40     	; 0x21d2 <LCD_enuInit+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21aa:	6d 89       	ldd	r22, Y+21	; 0x15
    21ac:	7e 89       	ldd	r23, Y+22	; 0x16
    21ae:	8f 89       	ldd	r24, Y+23	; 0x17
    21b0:	98 8d       	ldd	r25, Y+24	; 0x18
    21b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	9c 8b       	std	Y+20, r25	; 0x14
    21bc:	8b 8b       	std	Y+19, r24	; 0x13
    21be:	8b 89       	ldd	r24, Y+19	; 0x13
    21c0:	9c 89       	ldd	r25, Y+20	; 0x14
    21c2:	98 8b       	std	Y+16, r25	; 0x10
    21c4:	8f 87       	std	Y+15, r24	; 0x0f
    21c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c8:	98 89       	ldd	r25, Y+16	; 0x10
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <LCD_enuInit+0x30c>
    21ce:	98 8b       	std	Y+16, r25	; 0x10
    21d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	0e 94 38 16 	call	0x2c70	; 0x2c70 <LCD_invidSendCommend>
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	a0 e0       	ldi	r26, 0x00	; 0
    21de:	b0 e4       	ldi	r27, 0x40	; 64
    21e0:	8b 87       	std	Y+11, r24	; 0x0b
    21e2:	9c 87       	std	Y+12, r25	; 0x0c
    21e4:	ad 87       	std	Y+13, r26	; 0x0d
    21e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	4a e7       	ldi	r20, 0x7A	; 122
    21f6:	53 e4       	ldi	r21, 0x43	; 67
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	8f 83       	std	Y+7, r24	; 0x07
    2202:	98 87       	std	Y+8, r25	; 0x08
    2204:	a9 87       	std	Y+9, r26	; 0x09
    2206:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2208:	6f 81       	ldd	r22, Y+7	; 0x07
    220a:	78 85       	ldd	r23, Y+8	; 0x08
    220c:	89 85       	ldd	r24, Y+9	; 0x09
    220e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e8       	ldi	r20, 0x80	; 128
    2216:	5f e3       	ldi	r21, 0x3F	; 63
    2218:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    221c:	88 23       	and	r24, r24
    221e:	2c f4       	brge	.+10     	; 0x222a <LCD_enuInit+0x36c>
		__ticks = 1;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9e 83       	std	Y+6, r25	; 0x06
    2226:	8d 83       	std	Y+5, r24	; 0x05
    2228:	3f c0       	rjmp	.+126    	; 0x22a8 <LCD_enuInit+0x3ea>
	else if (__tmp > 65535)
    222a:	6f 81       	ldd	r22, Y+7	; 0x07
    222c:	78 85       	ldd	r23, Y+8	; 0x08
    222e:	89 85       	ldd	r24, Y+9	; 0x09
    2230:	9a 85       	ldd	r25, Y+10	; 0x0a
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	3f ef       	ldi	r19, 0xFF	; 255
    2236:	4f e7       	ldi	r20, 0x7F	; 127
    2238:	57 e4       	ldi	r21, 0x47	; 71
    223a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    223e:	18 16       	cp	r1, r24
    2240:	4c f5       	brge	.+82     	; 0x2294 <LCD_enuInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2242:	6b 85       	ldd	r22, Y+11	; 0x0b
    2244:	7c 85       	ldd	r23, Y+12	; 0x0c
    2246:	8d 85       	ldd	r24, Y+13	; 0x0d
    2248:	9e 85       	ldd	r25, Y+14	; 0x0e
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e2       	ldi	r20, 0x20	; 32
    2250:	51 e4       	ldi	r21, 0x41	; 65
    2252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	9e 83       	std	Y+6, r25	; 0x06
    2268:	8d 83       	std	Y+5, r24	; 0x05
    226a:	0f c0       	rjmp	.+30     	; 0x228a <LCD_enuInit+0x3cc>
    226c:	89 e1       	ldi	r24, 0x19	; 25
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	9c 83       	std	Y+4, r25	; 0x04
    2272:	8b 83       	std	Y+3, r24	; 0x03
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	9c 81       	ldd	r25, Y+4	; 0x04
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <LCD_enuInit+0x3ba>
    227c:	9c 83       	std	Y+4, r25	; 0x04
    227e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	9e 81       	ldd	r25, Y+6	; 0x06
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	9e 83       	std	Y+6, r25	; 0x06
    2288:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	69 f7       	brne	.-38     	; 0x226c <LCD_enuInit+0x3ae>
    2292:	14 c0       	rjmp	.+40     	; 0x22bc <LCD_enuInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2294:	6f 81       	ldd	r22, Y+7	; 0x07
    2296:	78 85       	ldd	r23, Y+8	; 0x08
    2298:	89 85       	ldd	r24, Y+9	; 0x09
    229a:	9a 85       	ldd	r25, Y+10	; 0x0a
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9e 83       	std	Y+6, r25	; 0x06
    22a6:	8d 83       	std	Y+5, r24	; 0x05
    22a8:	8d 81       	ldd	r24, Y+5	; 0x05
    22aa:	9e 81       	ldd	r25, Y+6	; 0x06
    22ac:	9a 83       	std	Y+2, r25	; 0x02
    22ae:	89 83       	std	Y+1, r24	; 0x01
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	9a 81       	ldd	r25, Y+2	; 0x02
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <LCD_enuInit+0x3f6>
    22b8:	9a 83       	std	Y+2, r25	; 0x02
    22ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    22bc:	86 e0       	ldi	r24, 0x06	; 6
    22be:	0e 94 38 16 	call	0x2c70	; 0x2c70 <LCD_invidSendCommend>

	return Local_enuErrorState;
    22c2:	89 ad       	ldd	r24, Y+57	; 0x39
}
    22c4:	e9 96       	adiw	r28, 0x39	; 57
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	00 d0       	rcall	.+0      	; 0x22dc <LCD_enuDisplayChar+0x6>
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    22e2:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	61 e0       	ldi	r22, 0x01	; 1
    22e8:	41 e0       	ldi	r20, 0x01	; 1
    22ea:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_vidLatch>

	return Local_enuErrorState;
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	00 d0       	rcall	.+0      	; 0x2306 <LCD_enuSendCommand+0x6>
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    230c:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	61 e0       	ldi	r22, 0x01	; 1
    2312:	40 e0       	ldi	r20, 0x00	; 0
    2314:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_vidLatch>


	return Local_enuErrorState;
    231e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <LCD_enuDisplayIntegerNum>:


ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	2b 97       	sbiw	r28, 0x0b	; 11
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	68 87       	std	Y+8, r22	; 0x08
    2340:	79 87       	std	Y+9, r23	; 0x09
    2342:	8a 87       	std	Y+10, r24	; 0x0a
    2344:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
    2346:	1f 82       	std	Y+7, r1	; 0x07

	s32 Local_s32Reverse=0;
    2348:	1b 82       	std	Y+3, r1	; 0x03
    234a:	1c 82       	std	Y+4, r1	; 0x04
    234c:	1d 82       	std	Y+5, r1	; 0x05
    234e:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    2350:	1a 82       	std	Y+2, r1	; 0x02
    2352:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num <0)
    2354:	88 85       	ldd	r24, Y+8	; 0x08
    2356:	99 85       	ldd	r25, Y+9	; 0x09
    2358:	aa 85       	ldd	r26, Y+10	; 0x0a
    235a:	bb 85       	ldd	r27, Y+11	; 0x0b
    235c:	bb 23       	and	r27, r27
    235e:	0c f0       	brlt	.+2      	; 0x2362 <LCD_enuDisplayIntegerNum+0x38>
    2360:	57 c0       	rjmp	.+174    	; 0x2410 <LCD_enuDisplayIntegerNum+0xe6>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	61 e0       	ldi	r22, 0x01	; 1
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
		LCD_vidLatch('-');
    236c:	8d e2       	ldi	r24, 0x2D	; 45
    236e:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    2372:	88 85       	ldd	r24, Y+8	; 0x08
    2374:	99 85       	ldd	r25, Y+9	; 0x09
    2376:	aa 85       	ldd	r26, Y+10	; 0x0a
    2378:	bb 85       	ldd	r27, Y+11	; 0x0b
    237a:	b0 95       	com	r27
    237c:	a0 95       	com	r26
    237e:	90 95       	com	r25
    2380:	81 95       	neg	r24
    2382:	9f 4f       	sbci	r25, 0xFF	; 255
    2384:	af 4f       	sbci	r26, 0xFF	; 255
    2386:	bf 4f       	sbci	r27, 0xFF	; 255
    2388:	88 87       	std	Y+8, r24	; 0x08
    238a:	99 87       	std	Y+9, r25	; 0x09
    238c:	aa 87       	std	Y+10, r26	; 0x0a
    238e:	bb 87       	std	Y+11, r27	; 0x0b
    2390:	3f c0       	rjmp	.+126    	; 0x2410 <LCD_enuDisplayIntegerNum+0xe6>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    2392:	88 85       	ldd	r24, Y+8	; 0x08
    2394:	99 85       	ldd	r25, Y+9	; 0x09
    2396:	aa 85       	ldd	r26, Y+10	; 0x0a
    2398:	bb 85       	ldd	r27, Y+11	; 0x0b
    239a:	2a e0       	ldi	r18, 0x0A	; 10
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	0e 94 a0 19 	call	0x3340	; 0x3340 <__divmodsi4>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	9c 81       	ldd	r25, Y+4	; 0x04
    23b4:	ad 81       	ldd	r26, Y+5	; 0x05
    23b6:	be 81       	ldd	r27, Y+6	; 0x06
    23b8:	2a e0       	ldi	r18, 0x0A	; 10
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	50 e0       	ldi	r21, 0x00	; 0
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	0e 94 81 19 	call	0x3302	; 0x3302 <__mulsi3>
    23c8:	9b 01       	movw	r18, r22
    23ca:	ac 01       	movw	r20, r24
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	a0 e0       	ldi	r26, 0x00	; 0
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	82 0f       	add	r24, r18
    23d8:	93 1f       	adc	r25, r19
    23da:	a4 1f       	adc	r26, r20
    23dc:	b5 1f       	adc	r27, r21
    23de:	8b 83       	std	Y+3, r24	; 0x03
    23e0:	9c 83       	std	Y+4, r25	; 0x04
    23e2:	ad 83       	std	Y+5, r26	; 0x05
    23e4:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    23e6:	88 85       	ldd	r24, Y+8	; 0x08
    23e8:	99 85       	ldd	r25, Y+9	; 0x09
    23ea:	aa 85       	ldd	r26, Y+10	; 0x0a
    23ec:	bb 85       	ldd	r27, Y+11	; 0x0b
    23ee:	2a e0       	ldi	r18, 0x0A	; 10
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e0       	ldi	r20, 0x00	; 0
    23f4:	50 e0       	ldi	r21, 0x00	; 0
    23f6:	bc 01       	movw	r22, r24
    23f8:	cd 01       	movw	r24, r26
    23fa:	0e 94 a0 19 	call	0x3340	; 0x3340 <__divmodsi4>
    23fe:	da 01       	movw	r26, r20
    2400:	c9 01       	movw	r24, r18
    2402:	88 87       	std	Y+8, r24	; 0x08
    2404:	99 87       	std	Y+9, r25	; 0x09
    2406:	aa 87       	std	Y+10, r26	; 0x0a
    2408:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	8f 5f       	subi	r24, 0xFF	; 255
    240e:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    2410:	88 85       	ldd	r24, Y+8	; 0x08
    2412:	99 85       	ldd	r25, Y+9	; 0x09
    2414:	aa 85       	ldd	r26, Y+10	; 0x0a
    2416:	bb 85       	ldd	r27, Y+11	; 0x0b
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	a1 05       	cpc	r26, r1
    241c:	b1 05       	cpc	r27, r1
    241e:	09 f0       	breq	.+2      	; 0x2422 <LCD_enuDisplayIntegerNum+0xf8>
    2420:	b8 cf       	rjmp	.-144    	; 0x2392 <LCD_enuDisplayIntegerNum+0x68>
    2422:	2d c0       	rjmp	.+90     	; 0x247e <LCD_enuDisplayIntegerNum+0x154>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	ad 81       	ldd	r26, Y+5	; 0x05
    242a:	be 81       	ldd	r27, Y+6	; 0x06
    242c:	2a e0       	ldi	r18, 0x0A	; 10
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	50 e0       	ldi	r21, 0x00	; 0
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	0e 94 a0 19 	call	0x3340	; 0x3340 <__divmodsi4>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	61 e0       	ldi	r22, 0x01	; 1
    2446:	41 e0       	ldi	r20, 0x01	; 1
    2448:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    244c:	8a 81       	ldd	r24, Y+2	; 0x02
    244e:	80 5d       	subi	r24, 0xD0	; 208
    2450:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_vidLatch>
		Local_s32Reverse /= 10;
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	ad 81       	ldd	r26, Y+5	; 0x05
    245a:	be 81       	ldd	r27, Y+6	; 0x06
    245c:	2a e0       	ldi	r18, 0x0A	; 10
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	50 e0       	ldi	r21, 0x00	; 0
    2464:	bc 01       	movw	r22, r24
    2466:	cd 01       	movw	r24, r26
    2468:	0e 94 a0 19 	call	0x3340	; 0x3340 <__divmodsi4>
    246c:	da 01       	movw	r26, r20
    246e:	c9 01       	movw	r24, r18
    2470:	8b 83       	std	Y+3, r24	; 0x03
    2472:	9c 83       	std	Y+4, r25	; 0x04
    2474:	ad 83       	std	Y+5, r26	; 0x05
    2476:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	81 50       	subi	r24, 0x01	; 1
    247c:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	88 23       	and	r24, r24
    2482:	81 f6       	brne	.-96     	; 0x2424 <LCD_enuDisplayIntegerNum+0xfa>
		LCD_vidLatch(Local_u8Remainder + '0');
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
    2484:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2486:	2b 96       	adiw	r28, 0x0b	; 11
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <LCD_vidLatch>:




static void LCD_vidLatch(u8 Copy_u8Data)
{
    2498:	0f 93       	push	r16
    249a:	1f 93       	push	r17
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	c5 55       	subi	r28, 0x55	; 85
    24a6:	d0 40       	sbci	r29, 0x00	; 0
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	fe 01       	movw	r30, r28
    24b4:	eb 5a       	subi	r30, 0xAB	; 171
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 83       	st	Z, r24
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	62 e0       	ldi	r22, 0x02	; 2
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	63 e0       	ldi	r22, 0x03	; 3
    24c8:	40 e0       	ldi	r20, 0x00	; 0
    24ca:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    24ce:	fe 01       	movw	r30, r28
    24d0:	eb 5a       	subi	r30, 0xAB	; 171
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 81       	ld	r24, Z
    24d6:	98 2f       	mov	r25, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	99 27       	eor	r25, r25
    24dc:	99 1f       	adc	r25, r25
    24de:	82 e0       	ldi	r24, 0x02	; 2
    24e0:	67 e0       	ldi	r22, 0x07	; 7
    24e2:	49 2f       	mov	r20, r25
    24e4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    24e8:	fe 01       	movw	r30, r28
    24ea:	eb 5a       	subi	r30, 0xAB	; 171
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 81       	ld	r24, Z
    24f0:	82 95       	swap	r24
    24f2:	86 95       	lsr	r24
    24f4:	86 95       	lsr	r24
    24f6:	83 70       	andi	r24, 0x03	; 3
    24f8:	98 2f       	mov	r25, r24
    24fa:	91 70       	andi	r25, 0x01	; 1
    24fc:	82 e0       	ldi	r24, 0x02	; 2
    24fe:	66 e0       	ldi	r22, 0x06	; 6
    2500:	49 2f       	mov	r20, r25
    2502:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    2506:	fe 01       	movw	r30, r28
    2508:	eb 5a       	subi	r30, 0xAB	; 171
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	80 81       	ld	r24, Z
    250e:	82 95       	swap	r24
    2510:	86 95       	lsr	r24
    2512:	87 70       	andi	r24, 0x07	; 7
    2514:	98 2f       	mov	r25, r24
    2516:	91 70       	andi	r25, 0x01	; 1
    2518:	82 e0       	ldi	r24, 0x02	; 2
    251a:	65 e0       	ldi	r22, 0x05	; 5
    251c:	49 2f       	mov	r20, r25
    251e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    2522:	fe 01       	movw	r30, r28
    2524:	eb 5a       	subi	r30, 0xAB	; 171
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	80 81       	ld	r24, Z
    252a:	82 95       	swap	r24
    252c:	8f 70       	andi	r24, 0x0F	; 15
    252e:	98 2f       	mov	r25, r24
    2530:	91 70       	andi	r25, 0x01	; 1
    2532:	82 e0       	ldi	r24, 0x02	; 2
    2534:	64 e0       	ldi	r22, 0x04	; 4
    2536:	49 2f       	mov	r20, r25
    2538:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));

#elif LCD_MODE == FOUR_BIT
	if (Copy_u8Data == 0x28)
    253c:	fe 01       	movw	r30, r28
    253e:	eb 5a       	subi	r30, 0xAB	; 171
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	80 81       	ld	r24, Z
    2544:	88 32       	cpi	r24, 0x28	; 40
    2546:	09 f0       	breq	.+2      	; 0x254a <LCD_vidLatch+0xb2>
    2548:	79 c1       	rjmp	.+754    	; 0x283c <LCD_vidLatch+0x3a4>
	{
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	63 e0       	ldi	r22, 0x03	; 3
    254e:	41 e0       	ldi	r20, 0x01	; 1
    2550:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
    2554:	fe 01       	movw	r30, r28
    2556:	ef 5a       	subi	r30, 0xAF	; 175
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	a0 e2       	ldi	r26, 0x20	; 32
    2560:	b1 e4       	ldi	r27, 0x41	; 65
    2562:	80 83       	st	Z, r24
    2564:	91 83       	std	Z+1, r25	; 0x01
    2566:	a2 83       	std	Z+2, r26	; 0x02
    2568:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256a:	8e 01       	movw	r16, r28
    256c:	03 5b       	subi	r16, 0xB3	; 179
    256e:	1f 4f       	sbci	r17, 0xFF	; 255
    2570:	fe 01       	movw	r30, r28
    2572:	ef 5a       	subi	r30, 0xAF	; 175
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	4a e7       	ldi	r20, 0x7A	; 122
    2584:	53 e4       	ldi	r21, 0x43	; 67
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	f8 01       	movw	r30, r16
    2590:	80 83       	st	Z, r24
    2592:	91 83       	std	Z+1, r25	; 0x01
    2594:	a2 83       	std	Z+2, r26	; 0x02
    2596:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2598:	fe 01       	movw	r30, r28
    259a:	e3 5b       	subi	r30, 0xB3	; 179
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	60 81       	ld	r22, Z
    25a0:	71 81       	ldd	r23, Z+1	; 0x01
    25a2:	82 81       	ldd	r24, Z+2	; 0x02
    25a4:	93 81       	ldd	r25, Z+3	; 0x03
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e8       	ldi	r20, 0x80	; 128
    25ac:	5f e3       	ldi	r21, 0x3F	; 63
    25ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25b2:	88 23       	and	r24, r24
    25b4:	44 f4       	brge	.+16     	; 0x25c6 <LCD_vidLatch+0x12e>
		__ticks = 1;
    25b6:	fe 01       	movw	r30, r28
    25b8:	e5 5b       	subi	r30, 0xB5	; 181
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	80 83       	st	Z, r24
    25c4:	64 c0       	rjmp	.+200    	; 0x268e <LCD_vidLatch+0x1f6>
	else if (__tmp > 65535)
    25c6:	fe 01       	movw	r30, r28
    25c8:	e3 5b       	subi	r30, 0xB3	; 179
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	60 81       	ld	r22, Z
    25ce:	71 81       	ldd	r23, Z+1	; 0x01
    25d0:	82 81       	ldd	r24, Z+2	; 0x02
    25d2:	93 81       	ldd	r25, Z+3	; 0x03
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	3f ef       	ldi	r19, 0xFF	; 255
    25d8:	4f e7       	ldi	r20, 0x7F	; 127
    25da:	57 e4       	ldi	r21, 0x47	; 71
    25dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25e0:	18 16       	cp	r1, r24
    25e2:	0c f0       	brlt	.+2      	; 0x25e6 <LCD_vidLatch+0x14e>
    25e4:	43 c0       	rjmp	.+134    	; 0x266c <LCD_vidLatch+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e6:	fe 01       	movw	r30, r28
    25e8:	ef 5a       	subi	r30, 0xAF	; 175
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	60 81       	ld	r22, Z
    25ee:	71 81       	ldd	r23, Z+1	; 0x01
    25f0:	82 81       	ldd	r24, Z+2	; 0x02
    25f2:	93 81       	ldd	r25, Z+3	; 0x03
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e2       	ldi	r20, 0x20	; 32
    25fa:	51 e4       	ldi	r21, 0x41	; 65
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	8e 01       	movw	r16, r28
    2606:	05 5b       	subi	r16, 0xB5	; 181
    2608:	1f 4f       	sbci	r17, 0xFF	; 255
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	f8 01       	movw	r30, r16
    2618:	91 83       	std	Z+1, r25	; 0x01
    261a:	80 83       	st	Z, r24
    261c:	1f c0       	rjmp	.+62     	; 0x265c <LCD_vidLatch+0x1c4>
    261e:	fe 01       	movw	r30, r28
    2620:	e7 5b       	subi	r30, 0xB7	; 183
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	89 e1       	ldi	r24, 0x19	; 25
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	80 83       	st	Z, r24
    262c:	fe 01       	movw	r30, r28
    262e:	e7 5b       	subi	r30, 0xB7	; 183
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 81       	ld	r24, Z
    2634:	91 81       	ldd	r25, Z+1	; 0x01
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <LCD_vidLatch+0x19e>
    263a:	fe 01       	movw	r30, r28
    263c:	e7 5b       	subi	r30, 0xB7	; 183
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2644:	de 01       	movw	r26, r28
    2646:	a5 5b       	subi	r26, 0xB5	; 181
    2648:	bf 4f       	sbci	r27, 0xFF	; 255
    264a:	fe 01       	movw	r30, r28
    264c:	e5 5b       	subi	r30, 0xB5	; 181
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	11 96       	adiw	r26, 0x01	; 1
    2658:	9c 93       	st	X, r25
    265a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265c:	fe 01       	movw	r30, r28
    265e:	e5 5b       	subi	r30, 0xB5	; 181
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 81       	ld	r24, Z
    2664:	91 81       	ldd	r25, Z+1	; 0x01
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	d1 f6       	brne	.-76     	; 0x261e <LCD_vidLatch+0x186>
    266a:	27 c0       	rjmp	.+78     	; 0x26ba <LCD_vidLatch+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266c:	8e 01       	movw	r16, r28
    266e:	05 5b       	subi	r16, 0xB5	; 181
    2670:	1f 4f       	sbci	r17, 0xFF	; 255
    2672:	fe 01       	movw	r30, r28
    2674:	e3 5b       	subi	r30, 0xB3	; 179
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	93 81       	ldd	r25, Z+3	; 0x03
    2680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	f8 01       	movw	r30, r16
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	80 83       	st	Z, r24
    268e:	de 01       	movw	r26, r28
    2690:	a9 5b       	subi	r26, 0xB9	; 185
    2692:	bf 4f       	sbci	r27, 0xFF	; 255
    2694:	fe 01       	movw	r30, r28
    2696:	e5 5b       	subi	r30, 0xB5	; 181
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	80 81       	ld	r24, Z
    269c:	91 81       	ldd	r25, Z+1	; 0x01
    269e:	8d 93       	st	X+, r24
    26a0:	9c 93       	st	X, r25
    26a2:	fe 01       	movw	r30, r28
    26a4:	e9 5b       	subi	r30, 0xB9	; 185
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	80 81       	ld	r24, Z
    26aa:	91 81       	ldd	r25, Z+1	; 0x01
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <LCD_vidLatch+0x214>
    26b0:	fe 01       	movw	r30, r28
    26b2:	e9 5b       	subi	r30, 0xB9	; 185
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	91 83       	std	Z+1, r25	; 0x01
    26b8:	80 83       	st	Z, r24
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	63 e0       	ldi	r22, 0x03	; 3
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
    26c4:	fe 01       	movw	r30, r28
    26c6:	ed 5b       	subi	r30, 0xBD	; 189
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	a0 e2       	ldi	r26, 0x20	; 32
    26d0:	b1 e4       	ldi	r27, 0x41	; 65
    26d2:	80 83       	st	Z, r24
    26d4:	91 83       	std	Z+1, r25	; 0x01
    26d6:	a2 83       	std	Z+2, r26	; 0x02
    26d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26da:	8e 01       	movw	r16, r28
    26dc:	01 5c       	subi	r16, 0xC1	; 193
    26de:	1f 4f       	sbci	r17, 0xFF	; 255
    26e0:	fe 01       	movw	r30, r28
    26e2:	ed 5b       	subi	r30, 0xBD	; 189
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	60 81       	ld	r22, Z
    26e8:	71 81       	ldd	r23, Z+1	; 0x01
    26ea:	82 81       	ldd	r24, Z+2	; 0x02
    26ec:	93 81       	ldd	r25, Z+3	; 0x03
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	4a e7       	ldi	r20, 0x7A	; 122
    26f4:	53 e4       	ldi	r21, 0x43	; 67
    26f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	f8 01       	movw	r30, r16
    2700:	80 83       	st	Z, r24
    2702:	91 83       	std	Z+1, r25	; 0x01
    2704:	a2 83       	std	Z+2, r26	; 0x02
    2706:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2708:	fe 01       	movw	r30, r28
    270a:	ff 96       	adiw	r30, 0x3f	; 63
    270c:	60 81       	ld	r22, Z
    270e:	71 81       	ldd	r23, Z+1	; 0x01
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e8       	ldi	r20, 0x80	; 128
    271a:	5f e3       	ldi	r21, 0x3F	; 63
    271c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2720:	88 23       	and	r24, r24
    2722:	2c f4       	brge	.+10     	; 0x272e <LCD_vidLatch+0x296>
		__ticks = 1;
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	9e af       	std	Y+62, r25	; 0x3e
    272a:	8d af       	std	Y+61, r24	; 0x3d
    272c:	46 c0       	rjmp	.+140    	; 0x27ba <LCD_vidLatch+0x322>
	else if (__tmp > 65535)
    272e:	fe 01       	movw	r30, r28
    2730:	ff 96       	adiw	r30, 0x3f	; 63
    2732:	60 81       	ld	r22, Z
    2734:	71 81       	ldd	r23, Z+1	; 0x01
    2736:	82 81       	ldd	r24, Z+2	; 0x02
    2738:	93 81       	ldd	r25, Z+3	; 0x03
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	3f ef       	ldi	r19, 0xFF	; 255
    273e:	4f e7       	ldi	r20, 0x7F	; 127
    2740:	57 e4       	ldi	r21, 0x47	; 71
    2742:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2746:	18 16       	cp	r1, r24
    2748:	64 f5       	brge	.+88     	; 0x27a2 <LCD_vidLatch+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274a:	fe 01       	movw	r30, r28
    274c:	ed 5b       	subi	r30, 0xBD	; 189
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	60 81       	ld	r22, Z
    2752:	71 81       	ldd	r23, Z+1	; 0x01
    2754:	82 81       	ldd	r24, Z+2	; 0x02
    2756:	93 81       	ldd	r25, Z+3	; 0x03
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e2       	ldi	r20, 0x20	; 32
    275e:	51 e4       	ldi	r21, 0x41	; 65
    2760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	bc 01       	movw	r22, r24
    276a:	cd 01       	movw	r24, r26
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	9e af       	std	Y+62, r25	; 0x3e
    2776:	8d af       	std	Y+61, r24	; 0x3d
    2778:	0f c0       	rjmp	.+30     	; 0x2798 <LCD_vidLatch+0x300>
    277a:	89 e1       	ldi	r24, 0x19	; 25
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	9c af       	std	Y+60, r25	; 0x3c
    2780:	8b af       	std	Y+59, r24	; 0x3b
    2782:	8b ad       	ldd	r24, Y+59	; 0x3b
    2784:	9c ad       	ldd	r25, Y+60	; 0x3c
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	f1 f7       	brne	.-4      	; 0x2786 <LCD_vidLatch+0x2ee>
    278a:	9c af       	std	Y+60, r25	; 0x3c
    278c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2790:	9e ad       	ldd	r25, Y+62	; 0x3e
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	9e af       	std	Y+62, r25	; 0x3e
    2796:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2798:	8d ad       	ldd	r24, Y+61	; 0x3d
    279a:	9e ad       	ldd	r25, Y+62	; 0x3e
    279c:	00 97       	sbiw	r24, 0x00	; 0
    279e:	69 f7       	brne	.-38     	; 0x277a <LCD_vidLatch+0x2e2>
    27a0:	16 c0       	rjmp	.+44     	; 0x27ce <LCD_vidLatch+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a2:	fe 01       	movw	r30, r28
    27a4:	ff 96       	adiw	r30, 0x3f	; 63
    27a6:	60 81       	ld	r22, Z
    27a8:	71 81       	ldd	r23, Z+1	; 0x01
    27aa:	82 81       	ldd	r24, Z+2	; 0x02
    27ac:	93 81       	ldd	r25, Z+3	; 0x03
    27ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	9e af       	std	Y+62, r25	; 0x3e
    27b8:	8d af       	std	Y+61, r24	; 0x3d
    27ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    27bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    27be:	9a af       	std	Y+58, r25	; 0x3a
    27c0:	89 af       	std	Y+57, r24	; 0x39
    27c2:	89 ad       	ldd	r24, Y+57	; 0x39
    27c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <LCD_vidLatch+0x32e>
    27ca:	9a af       	std	Y+58, r25	; 0x3a
    27cc:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(10);

		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    27ce:	fe 01       	movw	r30, r28
    27d0:	eb 5a       	subi	r30, 0xAB	; 171
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 81       	ld	r24, Z
    27d6:	98 2f       	mov	r25, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	99 27       	eor	r25, r25
    27dc:	99 1f       	adc	r25, r25
    27de:	82 e0       	ldi	r24, 0x02	; 2
    27e0:	67 e0       	ldi	r22, 0x07	; 7
    27e2:	49 2f       	mov	r20, r25
    27e4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    27e8:	fe 01       	movw	r30, r28
    27ea:	eb 5a       	subi	r30, 0xAB	; 171
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 81       	ld	r24, Z
    27f0:	82 95       	swap	r24
    27f2:	86 95       	lsr	r24
    27f4:	86 95       	lsr	r24
    27f6:	83 70       	andi	r24, 0x03	; 3
    27f8:	98 2f       	mov	r25, r24
    27fa:	91 70       	andi	r25, 0x01	; 1
    27fc:	82 e0       	ldi	r24, 0x02	; 2
    27fe:	66 e0       	ldi	r22, 0x06	; 6
    2800:	49 2f       	mov	r20, r25
    2802:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    2806:	fe 01       	movw	r30, r28
    2808:	eb 5a       	subi	r30, 0xAB	; 171
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	80 81       	ld	r24, Z
    280e:	82 95       	swap	r24
    2810:	86 95       	lsr	r24
    2812:	87 70       	andi	r24, 0x07	; 7
    2814:	98 2f       	mov	r25, r24
    2816:	91 70       	andi	r25, 0x01	; 1
    2818:	82 e0       	ldi	r24, 0x02	; 2
    281a:	65 e0       	ldi	r22, 0x05	; 5
    281c:	49 2f       	mov	r20, r25
    281e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    2822:	fe 01       	movw	r30, r28
    2824:	eb 5a       	subi	r30, 0xAB	; 171
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 81       	ld	r24, Z
    282a:	82 95       	swap	r24
    282c:	8f 70       	andi	r24, 0x0F	; 15
    282e:	98 2f       	mov	r25, r24
    2830:	91 70       	andi	r25, 0x01	; 1
    2832:	82 e0       	ldi	r24, 0x02	; 2
    2834:	64 e0       	ldi	r22, 0x04	; 4
    2836:	49 2f       	mov	r20, r25
    2838:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	}

	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	63 e0       	ldi	r22, 0x03	; 3
    2840:	41 e0       	ldi	r20, 0x01	; 1
    2842:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	a0 e2       	ldi	r26, 0x20	; 32
    284c:	b1 e4       	ldi	r27, 0x41	; 65
    284e:	8d ab       	std	Y+53, r24	; 0x35
    2850:	9e ab       	std	Y+54, r25	; 0x36
    2852:	af ab       	std	Y+55, r26	; 0x37
    2854:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2856:	6d a9       	ldd	r22, Y+53	; 0x35
    2858:	7e a9       	ldd	r23, Y+54	; 0x36
    285a:	8f a9       	ldd	r24, Y+55	; 0x37
    285c:	98 ad       	ldd	r25, Y+56	; 0x38
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	4a e7       	ldi	r20, 0x7A	; 122
    2864:	53 e4       	ldi	r21, 0x43	; 67
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	89 ab       	std	Y+49, r24	; 0x31
    2870:	9a ab       	std	Y+50, r25	; 0x32
    2872:	ab ab       	std	Y+51, r26	; 0x33
    2874:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2876:	69 a9       	ldd	r22, Y+49	; 0x31
    2878:	7a a9       	ldd	r23, Y+50	; 0x32
    287a:	8b a9       	ldd	r24, Y+51	; 0x33
    287c:	9c a9       	ldd	r25, Y+52	; 0x34
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e8       	ldi	r20, 0x80	; 128
    2884:	5f e3       	ldi	r21, 0x3F	; 63
    2886:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    288a:	88 23       	and	r24, r24
    288c:	2c f4       	brge	.+10     	; 0x2898 <LCD_vidLatch+0x400>
		__ticks = 1;
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	98 ab       	std	Y+48, r25	; 0x30
    2894:	8f a7       	std	Y+47, r24	; 0x2f
    2896:	3f c0       	rjmp	.+126    	; 0x2916 <LCD_vidLatch+0x47e>
	else if (__tmp > 65535)
    2898:	69 a9       	ldd	r22, Y+49	; 0x31
    289a:	7a a9       	ldd	r23, Y+50	; 0x32
    289c:	8b a9       	ldd	r24, Y+51	; 0x33
    289e:	9c a9       	ldd	r25, Y+52	; 0x34
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	3f ef       	ldi	r19, 0xFF	; 255
    28a4:	4f e7       	ldi	r20, 0x7F	; 127
    28a6:	57 e4       	ldi	r21, 0x47	; 71
    28a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ac:	18 16       	cp	r1, r24
    28ae:	4c f5       	brge	.+82     	; 0x2902 <LCD_vidLatch+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b0:	6d a9       	ldd	r22, Y+53	; 0x35
    28b2:	7e a9       	ldd	r23, Y+54	; 0x36
    28b4:	8f a9       	ldd	r24, Y+55	; 0x37
    28b6:	98 ad       	ldd	r25, Y+56	; 0x38
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e2       	ldi	r20, 0x20	; 32
    28be:	51 e4       	ldi	r21, 0x41	; 65
    28c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	bc 01       	movw	r22, r24
    28ca:	cd 01       	movw	r24, r26
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	98 ab       	std	Y+48, r25	; 0x30
    28d6:	8f a7       	std	Y+47, r24	; 0x2f
    28d8:	0f c0       	rjmp	.+30     	; 0x28f8 <LCD_vidLatch+0x460>
    28da:	89 e1       	ldi	r24, 0x19	; 25
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	9e a7       	std	Y+46, r25	; 0x2e
    28e0:	8d a7       	std	Y+45, r24	; 0x2d
    28e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    28e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <LCD_vidLatch+0x44e>
    28ea:	9e a7       	std	Y+46, r25	; 0x2e
    28ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f0:	98 a9       	ldd	r25, Y+48	; 0x30
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	98 ab       	std	Y+48, r25	; 0x30
    28f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28fa:	98 a9       	ldd	r25, Y+48	; 0x30
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	69 f7       	brne	.-38     	; 0x28da <LCD_vidLatch+0x442>
    2900:	14 c0       	rjmp	.+40     	; 0x292a <LCD_vidLatch+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2902:	69 a9       	ldd	r22, Y+49	; 0x31
    2904:	7a a9       	ldd	r23, Y+50	; 0x32
    2906:	8b a9       	ldd	r24, Y+51	; 0x33
    2908:	9c a9       	ldd	r25, Y+52	; 0x34
    290a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	98 ab       	std	Y+48, r25	; 0x30
    2914:	8f a7       	std	Y+47, r24	; 0x2f
    2916:	8f a5       	ldd	r24, Y+47	; 0x2f
    2918:	98 a9       	ldd	r25, Y+48	; 0x30
    291a:	9c a7       	std	Y+44, r25	; 0x2c
    291c:	8b a7       	std	Y+43, r24	; 0x2b
    291e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2920:	9c a5       	ldd	r25, Y+44	; 0x2c
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <LCD_vidLatch+0x48a>
    2926:	9c a7       	std	Y+44, r25	; 0x2c
    2928:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	63 e0       	ldi	r22, 0x03	; 3
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	a0 e2       	ldi	r26, 0x20	; 32
    293a:	b1 e4       	ldi	r27, 0x41	; 65
    293c:	8f a3       	std	Y+39, r24	; 0x27
    293e:	98 a7       	std	Y+40, r25	; 0x28
    2940:	a9 a7       	std	Y+41, r26	; 0x29
    2942:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2944:	6f a1       	ldd	r22, Y+39	; 0x27
    2946:	78 a5       	ldd	r23, Y+40	; 0x28
    2948:	89 a5       	ldd	r24, Y+41	; 0x29
    294a:	9a a5       	ldd	r25, Y+42	; 0x2a
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	4a e7       	ldi	r20, 0x7A	; 122
    2952:	53 e4       	ldi	r21, 0x43	; 67
    2954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	8b a3       	std	Y+35, r24	; 0x23
    295e:	9c a3       	std	Y+36, r25	; 0x24
    2960:	ad a3       	std	Y+37, r26	; 0x25
    2962:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2964:	6b a1       	ldd	r22, Y+35	; 0x23
    2966:	7c a1       	ldd	r23, Y+36	; 0x24
    2968:	8d a1       	ldd	r24, Y+37	; 0x25
    296a:	9e a1       	ldd	r25, Y+38	; 0x26
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e8       	ldi	r20, 0x80	; 128
    2972:	5f e3       	ldi	r21, 0x3F	; 63
    2974:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2978:	88 23       	and	r24, r24
    297a:	2c f4       	brge	.+10     	; 0x2986 <LCD_vidLatch+0x4ee>
		__ticks = 1;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9a a3       	std	Y+34, r25	; 0x22
    2982:	89 a3       	std	Y+33, r24	; 0x21
    2984:	3f c0       	rjmp	.+126    	; 0x2a04 <LCD_vidLatch+0x56c>
	else if (__tmp > 65535)
    2986:	6b a1       	ldd	r22, Y+35	; 0x23
    2988:	7c a1       	ldd	r23, Y+36	; 0x24
    298a:	8d a1       	ldd	r24, Y+37	; 0x25
    298c:	9e a1       	ldd	r25, Y+38	; 0x26
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	3f ef       	ldi	r19, 0xFF	; 255
    2992:	4f e7       	ldi	r20, 0x7F	; 127
    2994:	57 e4       	ldi	r21, 0x47	; 71
    2996:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    299a:	18 16       	cp	r1, r24
    299c:	4c f5       	brge	.+82     	; 0x29f0 <LCD_vidLatch+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299e:	6f a1       	ldd	r22, Y+39	; 0x27
    29a0:	78 a5       	ldd	r23, Y+40	; 0x28
    29a2:	89 a5       	ldd	r24, Y+41	; 0x29
    29a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e2       	ldi	r20, 0x20	; 32
    29ac:	51 e4       	ldi	r21, 0x41	; 65
    29ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	bc 01       	movw	r22, r24
    29b8:	cd 01       	movw	r24, r26
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9a a3       	std	Y+34, r25	; 0x22
    29c4:	89 a3       	std	Y+33, r24	; 0x21
    29c6:	0f c0       	rjmp	.+30     	; 0x29e6 <LCD_vidLatch+0x54e>
    29c8:	89 e1       	ldi	r24, 0x19	; 25
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	98 a3       	std	Y+32, r25	; 0x20
    29ce:	8f 8f       	std	Y+31, r24	; 0x1f
    29d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29d2:	98 a1       	ldd	r25, Y+32	; 0x20
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <LCD_vidLatch+0x53c>
    29d8:	98 a3       	std	Y+32, r25	; 0x20
    29da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29dc:	89 a1       	ldd	r24, Y+33	; 0x21
    29de:	9a a1       	ldd	r25, Y+34	; 0x22
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	9a a3       	std	Y+34, r25	; 0x22
    29e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e6:	89 a1       	ldd	r24, Y+33	; 0x21
    29e8:	9a a1       	ldd	r25, Y+34	; 0x22
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	69 f7       	brne	.-38     	; 0x29c8 <LCD_vidLatch+0x530>
    29ee:	14 c0       	rjmp	.+40     	; 0x2a18 <LCD_vidLatch+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f0:	6b a1       	ldd	r22, Y+35	; 0x23
    29f2:	7c a1       	ldd	r23, Y+36	; 0x24
    29f4:	8d a1       	ldd	r24, Y+37	; 0x25
    29f6:	9e a1       	ldd	r25, Y+38	; 0x26
    29f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	9a a3       	std	Y+34, r25	; 0x22
    2a02:	89 a3       	std	Y+33, r24	; 0x21
    2a04:	89 a1       	ldd	r24, Y+33	; 0x21
    2a06:	9a a1       	ldd	r25, Y+34	; 0x22
    2a08:	9e 8f       	std	Y+30, r25	; 0x1e
    2a0a:	8d 8f       	std	Y+29, r24	; 0x1d
    2a0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <LCD_vidLatch+0x578>
    2a14:	9e 8f       	std	Y+30, r25	; 0x1e
    2a16:	8d 8f       	std	Y+29, r24	; 0x1d


	_delay_ms(10);
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>3)&1));
    2a18:	fe 01       	movw	r30, r28
    2a1a:	eb 5a       	subi	r30, 0xAB	; 171
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	80 81       	ld	r24, Z
    2a20:	86 95       	lsr	r24
    2a22:	86 95       	lsr	r24
    2a24:	86 95       	lsr	r24
    2a26:	98 2f       	mov	r25, r24
    2a28:	91 70       	andi	r25, 0x01	; 1
    2a2a:	82 e0       	ldi	r24, 0x02	; 2
    2a2c:	67 e0       	ldi	r22, 0x07	; 7
    2a2e:	49 2f       	mov	r20, r25
    2a30:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>2)&1));
    2a34:	fe 01       	movw	r30, r28
    2a36:	eb 5a       	subi	r30, 0xAB	; 171
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	80 81       	ld	r24, Z
    2a3c:	86 95       	lsr	r24
    2a3e:	86 95       	lsr	r24
    2a40:	98 2f       	mov	r25, r24
    2a42:	91 70       	andi	r25, 0x01	; 1
    2a44:	82 e0       	ldi	r24, 0x02	; 2
    2a46:	66 e0       	ldi	r22, 0x06	; 6
    2a48:	49 2f       	mov	r20, r25
    2a4a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
    2a4e:	fe 01       	movw	r30, r28
    2a50:	eb 5a       	subi	r30, 0xAB	; 171
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	80 81       	ld	r24, Z
    2a56:	86 95       	lsr	r24
    2a58:	98 2f       	mov	r25, r24
    2a5a:	91 70       	andi	r25, 0x01	; 1
    2a5c:	82 e0       	ldi	r24, 0x02	; 2
    2a5e:	65 e0       	ldi	r22, 0x05	; 5
    2a60:	49 2f       	mov	r20, r25
    2a62:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
    2a66:	fe 01       	movw	r30, r28
    2a68:	eb 5a       	subi	r30, 0xAB	; 171
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	80 81       	ld	r24, Z
    2a6e:	98 2f       	mov	r25, r24
    2a70:	91 70       	andi	r25, 0x01	; 1
    2a72:	82 e0       	ldi	r24, 0x02	; 2
    2a74:	64 e0       	ldi	r22, 0x04	; 4
    2a76:	49 2f       	mov	r20, r25
    2a78:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	63 e0       	ldi	r22, 0x03	; 3
    2a80:	41 e0       	ldi	r20, 0x01	; 1
    2a82:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a0 e2       	ldi	r26, 0x20	; 32
    2a8c:	b1 e4       	ldi	r27, 0x41	; 65
    2a8e:	89 8f       	std	Y+25, r24	; 0x19
    2a90:	9a 8f       	std	Y+26, r25	; 0x1a
    2a92:	ab 8f       	std	Y+27, r26	; 0x1b
    2a94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a96:	69 8d       	ldd	r22, Y+25	; 0x19
    2a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	4a e7       	ldi	r20, 0x7A	; 122
    2aa4:	53 e4       	ldi	r21, 0x43	; 67
    2aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	8d 8b       	std	Y+21, r24	; 0x15
    2ab0:	9e 8b       	std	Y+22, r25	; 0x16
    2ab2:	af 8b       	std	Y+23, r26	; 0x17
    2ab4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    2aba:	8f 89       	ldd	r24, Y+23	; 0x17
    2abc:	98 8d       	ldd	r25, Y+24	; 0x18
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e8       	ldi	r20, 0x80	; 128
    2ac4:	5f e3       	ldi	r21, 0x3F	; 63
    2ac6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aca:	88 23       	and	r24, r24
    2acc:	2c f4       	brge	.+10     	; 0x2ad8 <LCD_vidLatch+0x640>
		__ticks = 1;
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	9c 8b       	std	Y+20, r25	; 0x14
    2ad4:	8b 8b       	std	Y+19, r24	; 0x13
    2ad6:	3f c0       	rjmp	.+126    	; 0x2b56 <LCD_vidLatch+0x6be>
	else if (__tmp > 65535)
    2ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    2ada:	7e 89       	ldd	r23, Y+22	; 0x16
    2adc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ade:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	3f ef       	ldi	r19, 0xFF	; 255
    2ae4:	4f e7       	ldi	r20, 0x7F	; 127
    2ae6:	57 e4       	ldi	r21, 0x47	; 71
    2ae8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aec:	18 16       	cp	r1, r24
    2aee:	4c f5       	brge	.+82     	; 0x2b42 <LCD_vidLatch+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af0:	69 8d       	ldd	r22, Y+25	; 0x19
    2af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e2       	ldi	r20, 0x20	; 32
    2afe:	51 e4       	ldi	r21, 0x41	; 65
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	bc 01       	movw	r22, r24
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	9c 8b       	std	Y+20, r25	; 0x14
    2b16:	8b 8b       	std	Y+19, r24	; 0x13
    2b18:	0f c0       	rjmp	.+30     	; 0x2b38 <LCD_vidLatch+0x6a0>
    2b1a:	89 e1       	ldi	r24, 0x19	; 25
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9a 8b       	std	Y+18, r25	; 0x12
    2b20:	89 8b       	std	Y+17, r24	; 0x11
    2b22:	89 89       	ldd	r24, Y+17	; 0x11
    2b24:	9a 89       	ldd	r25, Y+18	; 0x12
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <LCD_vidLatch+0x68e>
    2b2a:	9a 8b       	std	Y+18, r25	; 0x12
    2b2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b30:	9c 89       	ldd	r25, Y+20	; 0x14
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	9c 8b       	std	Y+20, r25	; 0x14
    2b36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b38:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	69 f7       	brne	.-38     	; 0x2b1a <LCD_vidLatch+0x682>
    2b40:	14 c0       	rjmp	.+40     	; 0x2b6a <LCD_vidLatch+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b42:	6d 89       	ldd	r22, Y+21	; 0x15
    2b44:	7e 89       	ldd	r23, Y+22	; 0x16
    2b46:	8f 89       	ldd	r24, Y+23	; 0x17
    2b48:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9c 8b       	std	Y+20, r25	; 0x14
    2b54:	8b 8b       	std	Y+19, r24	; 0x13
    2b56:	8b 89       	ldd	r24, Y+19	; 0x13
    2b58:	9c 89       	ldd	r25, Y+20	; 0x14
    2b5a:	98 8b       	std	Y+16, r25	; 0x10
    2b5c:	8f 87       	std	Y+15, r24	; 0x0f
    2b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b60:	98 89       	ldd	r25, Y+16	; 0x10
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <LCD_vidLatch+0x6ca>
    2b66:	98 8b       	std	Y+16, r25	; 0x10
    2b68:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	63 e0       	ldi	r22, 0x03	; 3
    2b6e:	40 e0       	ldi	r20, 0x00	; 0
    2b70:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	a0 e2       	ldi	r26, 0x20	; 32
    2b7a:	b1 e4       	ldi	r27, 0x41	; 65
    2b7c:	8b 87       	std	Y+11, r24	; 0x0b
    2b7e:	9c 87       	std	Y+12, r25	; 0x0c
    2b80:	ad 87       	std	Y+13, r26	; 0x0d
    2b82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4a e7       	ldi	r20, 0x7A	; 122
    2b92:	53 e4       	ldi	r21, 0x43	; 67
    2b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	8f 83       	std	Y+7, r24	; 0x07
    2b9e:	98 87       	std	Y+8, r25	; 0x08
    2ba0:	a9 87       	std	Y+9, r26	; 0x09
    2ba2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba6:	78 85       	ldd	r23, Y+8	; 0x08
    2ba8:	89 85       	ldd	r24, Y+9	; 0x09
    2baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e8       	ldi	r20, 0x80	; 128
    2bb2:	5f e3       	ldi	r21, 0x3F	; 63
    2bb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bb8:	88 23       	and	r24, r24
    2bba:	2c f4       	brge	.+10     	; 0x2bc6 <LCD_vidLatch+0x72e>
		__ticks = 1;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	9e 83       	std	Y+6, r25	; 0x06
    2bc2:	8d 83       	std	Y+5, r24	; 0x05
    2bc4:	3f c0       	rjmp	.+126    	; 0x2c44 <LCD_vidLatch+0x7ac>
	else if (__tmp > 65535)
    2bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc8:	78 85       	ldd	r23, Y+8	; 0x08
    2bca:	89 85       	ldd	r24, Y+9	; 0x09
    2bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	3f ef       	ldi	r19, 0xFF	; 255
    2bd2:	4f e7       	ldi	r20, 0x7F	; 127
    2bd4:	57 e4       	ldi	r21, 0x47	; 71
    2bd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bda:	18 16       	cp	r1, r24
    2bdc:	4c f5       	brge	.+82     	; 0x2c30 <LCD_vidLatch+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e2       	ldi	r20, 0x20	; 32
    2bec:	51 e4       	ldi	r21, 0x41	; 65
    2bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
    2c06:	0f c0       	rjmp	.+30     	; 0x2c26 <LCD_vidLatch+0x78e>
    2c08:	89 e1       	ldi	r24, 0x19	; 25
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	9c 83       	std	Y+4, r25	; 0x04
    2c0e:	8b 83       	std	Y+3, r24	; 0x03
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	9c 81       	ldd	r25, Y+4	; 0x04
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <LCD_vidLatch+0x77c>
    2c18:	9c 83       	std	Y+4, r25	; 0x04
    2c1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	9e 83       	std	Y+6, r25	; 0x06
    2c24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c26:	8d 81       	ldd	r24, Y+5	; 0x05
    2c28:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	69 f7       	brne	.-38     	; 0x2c08 <LCD_vidLatch+0x770>
    2c2e:	14 c0       	rjmp	.+40     	; 0x2c58 <LCD_vidLatch+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c30:	6f 81       	ldd	r22, Y+7	; 0x07
    2c32:	78 85       	ldd	r23, Y+8	; 0x08
    2c34:	89 85       	ldd	r24, Y+9	; 0x09
    2c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9e 83       	std	Y+6, r25	; 0x06
    2c42:	8d 83       	std	Y+5, r24	; 0x05
    2c44:	8d 81       	ldd	r24, Y+5	; 0x05
    2c46:	9e 81       	ldd	r25, Y+6	; 0x06
    2c48:	9a 83       	std	Y+2, r25	; 0x02
    2c4a:	89 83       	std	Y+1, r24	; 0x01
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <LCD_vidLatch+0x7b8>
    2c54:	9a 83       	std	Y+2, r25	; 0x02
    2c56:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    2c58:	cb 5a       	subi	r28, 0xAB	; 171
    2c5a:	df 4f       	sbci	r29, 0xFF	; 255
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	cd bf       	out	0x3d, r28	; 61
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	08 95       	ret

00002c70 <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    2c70:	df 93       	push	r29
    2c72:	cf 93       	push	r28
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    2c78:	ab 97       	sbiw	r28, 0x2b	; 43
    2c7a:	0f b6       	in	r0, 0x3f	; 63
    2c7c:	f8 94       	cli
    2c7e:	de bf       	out	0x3e, r29	; 62
    2c80:	0f be       	out	0x3f, r0	; 63
    2c82:	cd bf       	out	0x3d, r28	; 61
    2c84:	8b a7       	std	Y+43, r24	; 0x2b
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	61 e0       	ldi	r22, 0x01	; 1
    2c8a:	40 e0       	ldi	r20, 0x00	; 0
    2c8c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	62 e0       	ldi	r22, 0x02	; 2
    2c94:	40 e0       	ldi	r20, 0x00	; 0
    2c96:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	63 e0       	ldi	r22, 0x03	; 3
    2c9e:	40 e0       	ldi	r20, 0x00	; 0
    2ca0:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    2ca4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ca6:	98 2f       	mov	r25, r24
    2ca8:	99 1f       	adc	r25, r25
    2caa:	99 27       	eor	r25, r25
    2cac:	99 1f       	adc	r25, r25
    2cae:	82 e0       	ldi	r24, 0x02	; 2
    2cb0:	67 e0       	ldi	r22, 0x07	; 7
    2cb2:	49 2f       	mov	r20, r25
    2cb4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    2cb8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cba:	82 95       	swap	r24
    2cbc:	86 95       	lsr	r24
    2cbe:	86 95       	lsr	r24
    2cc0:	83 70       	andi	r24, 0x03	; 3
    2cc2:	98 2f       	mov	r25, r24
    2cc4:	91 70       	andi	r25, 0x01	; 1
    2cc6:	82 e0       	ldi	r24, 0x02	; 2
    2cc8:	66 e0       	ldi	r22, 0x06	; 6
    2cca:	49 2f       	mov	r20, r25
    2ccc:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    2cd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cd2:	82 95       	swap	r24
    2cd4:	86 95       	lsr	r24
    2cd6:	87 70       	andi	r24, 0x07	; 7
    2cd8:	98 2f       	mov	r25, r24
    2cda:	91 70       	andi	r25, 0x01	; 1
    2cdc:	82 e0       	ldi	r24, 0x02	; 2
    2cde:	65 e0       	ldi	r22, 0x05	; 5
    2ce0:	49 2f       	mov	r20, r25
    2ce2:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    2ce6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ce8:	82 95       	swap	r24
    2cea:	8f 70       	andi	r24, 0x0F	; 15
    2cec:	98 2f       	mov	r25, r24
    2cee:	91 70       	andi	r25, 0x01	; 1
    2cf0:	82 e0       	ldi	r24, 0x02	; 2
    2cf2:	64 e0       	ldi	r22, 0x04	; 4
    2cf4:	49 2f       	mov	r20, r25
    2cf6:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));

#elif LCD_MODE == FOUR_BIT

	if(Copy_u8Command == 0x28)
    2cfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cfc:	88 32       	cpi	r24, 0x28	; 40
    2cfe:	09 f0       	breq	.+2      	; 0x2d02 <LCD_invidSendCommend+0x92>
    2d00:	a7 c0       	rjmp	.+334    	; 0x2e50 <LCD_invidSendCommend+0x1e0>
	{
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	63 e0       	ldi	r22, 0x03	; 3
    2d06:	41 e0       	ldi	r20, 0x01	; 1
    2d08:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	a0 e2       	ldi	r26, 0x20	; 32
    2d12:	b1 e4       	ldi	r27, 0x41	; 65
    2d14:	8f a3       	std	Y+39, r24	; 0x27
    2d16:	98 a7       	std	Y+40, r25	; 0x28
    2d18:	a9 a7       	std	Y+41, r26	; 0x29
    2d1a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d1e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d20:	89 a5       	ldd	r24, Y+41	; 0x29
    2d22:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	4a e7       	ldi	r20, 0x7A	; 122
    2d2a:	53 e4       	ldi	r21, 0x43	; 67
    2d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	8b a3       	std	Y+35, r24	; 0x23
    2d36:	9c a3       	std	Y+36, r25	; 0x24
    2d38:	ad a3       	std	Y+37, r26	; 0x25
    2d3a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d3c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d3e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d40:	8d a1       	ldd	r24, Y+37	; 0x25
    2d42:	9e a1       	ldd	r25, Y+38	; 0x26
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e8       	ldi	r20, 0x80	; 128
    2d4a:	5f e3       	ldi	r21, 0x3F	; 63
    2d4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d50:	88 23       	and	r24, r24
    2d52:	2c f4       	brge	.+10     	; 0x2d5e <LCD_invidSendCommend+0xee>
		__ticks = 1;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9a a3       	std	Y+34, r25	; 0x22
    2d5a:	89 a3       	std	Y+33, r24	; 0x21
    2d5c:	3f c0       	rjmp	.+126    	; 0x2ddc <LCD_invidSendCommend+0x16c>
	else if (__tmp > 65535)
    2d5e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d60:	7c a1       	ldd	r23, Y+36	; 0x24
    2d62:	8d a1       	ldd	r24, Y+37	; 0x25
    2d64:	9e a1       	ldd	r25, Y+38	; 0x26
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	3f ef       	ldi	r19, 0xFF	; 255
    2d6a:	4f e7       	ldi	r20, 0x7F	; 127
    2d6c:	57 e4       	ldi	r21, 0x47	; 71
    2d6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d72:	18 16       	cp	r1, r24
    2d74:	4c f5       	brge	.+82     	; 0x2dc8 <LCD_invidSendCommend+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d76:	6f a1       	ldd	r22, Y+39	; 0x27
    2d78:	78 a5       	ldd	r23, Y+40	; 0x28
    2d7a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e2       	ldi	r20, 0x20	; 32
    2d84:	51 e4       	ldi	r21, 0x41	; 65
    2d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	bc 01       	movw	r22, r24
    2d90:	cd 01       	movw	r24, r26
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	9a a3       	std	Y+34, r25	; 0x22
    2d9c:	89 a3       	std	Y+33, r24	; 0x21
    2d9e:	0f c0       	rjmp	.+30     	; 0x2dbe <LCD_invidSendCommend+0x14e>
    2da0:	89 e1       	ldi	r24, 0x19	; 25
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	98 a3       	std	Y+32, r25	; 0x20
    2da6:	8f 8f       	std	Y+31, r24	; 0x1f
    2da8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2daa:	98 a1       	ldd	r25, Y+32	; 0x20
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <LCD_invidSendCommend+0x13c>
    2db0:	98 a3       	std	Y+32, r25	; 0x20
    2db2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db4:	89 a1       	ldd	r24, Y+33	; 0x21
    2db6:	9a a1       	ldd	r25, Y+34	; 0x22
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	9a a3       	std	Y+34, r25	; 0x22
    2dbc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbe:	89 a1       	ldd	r24, Y+33	; 0x21
    2dc0:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	69 f7       	brne	.-38     	; 0x2da0 <LCD_invidSendCommend+0x130>
    2dc6:	14 c0       	rjmp	.+40     	; 0x2df0 <LCD_invidSendCommend+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc8:	6b a1       	ldd	r22, Y+35	; 0x23
    2dca:	7c a1       	ldd	r23, Y+36	; 0x24
    2dcc:	8d a1       	ldd	r24, Y+37	; 0x25
    2dce:	9e a1       	ldd	r25, Y+38	; 0x26
    2dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9a a3       	std	Y+34, r25	; 0x22
    2dda:	89 a3       	std	Y+33, r24	; 0x21
    2ddc:	89 a1       	ldd	r24, Y+33	; 0x21
    2dde:	9a a1       	ldd	r25, Y+34	; 0x22
    2de0:	9e 8f       	std	Y+30, r25	; 0x1e
    2de2:	8d 8f       	std	Y+29, r24	; 0x1d
    2de4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2de6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <LCD_invidSendCommend+0x178>
    2dec:	9e 8f       	std	Y+30, r25	; 0x1e
    2dee:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	63 e0       	ldi	r22, 0x03	; 3
    2df4:	40 e0       	ldi	r20, 0x00	; 0
    2df6:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>

		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    2dfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dfc:	98 2f       	mov	r25, r24
    2dfe:	99 1f       	adc	r25, r25
    2e00:	99 27       	eor	r25, r25
    2e02:	99 1f       	adc	r25, r25
    2e04:	82 e0       	ldi	r24, 0x02	; 2
    2e06:	67 e0       	ldi	r22, 0x07	; 7
    2e08:	49 2f       	mov	r20, r25
    2e0a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    2e0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e10:	82 95       	swap	r24
    2e12:	86 95       	lsr	r24
    2e14:	86 95       	lsr	r24
    2e16:	83 70       	andi	r24, 0x03	; 3
    2e18:	98 2f       	mov	r25, r24
    2e1a:	91 70       	andi	r25, 0x01	; 1
    2e1c:	82 e0       	ldi	r24, 0x02	; 2
    2e1e:	66 e0       	ldi	r22, 0x06	; 6
    2e20:	49 2f       	mov	r20, r25
    2e22:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    2e26:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e28:	82 95       	swap	r24
    2e2a:	86 95       	lsr	r24
    2e2c:	87 70       	andi	r24, 0x07	; 7
    2e2e:	98 2f       	mov	r25, r24
    2e30:	91 70       	andi	r25, 0x01	; 1
    2e32:	82 e0       	ldi	r24, 0x02	; 2
    2e34:	65 e0       	ldi	r22, 0x05	; 5
    2e36:	49 2f       	mov	r20, r25
    2e38:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    2e3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e3e:	82 95       	swap	r24
    2e40:	8f 70       	andi	r24, 0x0F	; 15
    2e42:	98 2f       	mov	r25, r24
    2e44:	91 70       	andi	r25, 0x01	; 1
    2e46:	82 e0       	ldi	r24, 0x02	; 2
    2e48:	64 e0       	ldi	r22, 0x04	; 4
    2e4a:	49 2f       	mov	r20, r25
    2e4c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	}
	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	63 e0       	ldi	r22, 0x03	; 3
    2e54:	41 e0       	ldi	r20, 0x01	; 1
    2e56:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	a0 e2       	ldi	r26, 0x20	; 32
    2e60:	b1 e4       	ldi	r27, 0x41	; 65
    2e62:	89 8f       	std	Y+25, r24	; 0x19
    2e64:	9a 8f       	std	Y+26, r25	; 0x1a
    2e66:	ab 8f       	std	Y+27, r26	; 0x1b
    2e68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	4a e7       	ldi	r20, 0x7A	; 122
    2e78:	53 e4       	ldi	r21, 0x43	; 67
    2e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	8d 8b       	std	Y+21, r24	; 0x15
    2e84:	9e 8b       	std	Y+22, r25	; 0x16
    2e86:	af 8b       	std	Y+23, r26	; 0x17
    2e88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e90:	98 8d       	ldd	r25, Y+24	; 0x18
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e8       	ldi	r20, 0x80	; 128
    2e98:	5f e3       	ldi	r21, 0x3F	; 63
    2e9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e9e:	88 23       	and	r24, r24
    2ea0:	2c f4       	brge	.+10     	; 0x2eac <LCD_invidSendCommend+0x23c>
		__ticks = 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	9c 8b       	std	Y+20, r25	; 0x14
    2ea8:	8b 8b       	std	Y+19, r24	; 0x13
    2eaa:	3f c0       	rjmp	.+126    	; 0x2f2a <LCD_invidSendCommend+0x2ba>
	else if (__tmp > 65535)
    2eac:	6d 89       	ldd	r22, Y+21	; 0x15
    2eae:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	3f ef       	ldi	r19, 0xFF	; 255
    2eb8:	4f e7       	ldi	r20, 0x7F	; 127
    2eba:	57 e4       	ldi	r21, 0x47	; 71
    2ebc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec0:	18 16       	cp	r1, r24
    2ec2:	4c f5       	brge	.+82     	; 0x2f16 <LCD_invidSendCommend+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e2       	ldi	r20, 0x20	; 32
    2ed2:	51 e4       	ldi	r21, 0x41	; 65
    2ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	bc 01       	movw	r22, r24
    2ede:	cd 01       	movw	r24, r26
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9c 8b       	std	Y+20, r25	; 0x14
    2eea:	8b 8b       	std	Y+19, r24	; 0x13
    2eec:	0f c0       	rjmp	.+30     	; 0x2f0c <LCD_invidSendCommend+0x29c>
    2eee:	89 e1       	ldi	r24, 0x19	; 25
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	9a 8b       	std	Y+18, r25	; 0x12
    2ef4:	89 8b       	std	Y+17, r24	; 0x11
    2ef6:	89 89       	ldd	r24, Y+17	; 0x11
    2ef8:	9a 89       	ldd	r25, Y+18	; 0x12
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	f1 f7       	brne	.-4      	; 0x2efa <LCD_invidSendCommend+0x28a>
    2efe:	9a 8b       	std	Y+18, r25	; 0x12
    2f00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f02:	8b 89       	ldd	r24, Y+19	; 0x13
    2f04:	9c 89       	ldd	r25, Y+20	; 0x14
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	9c 8b       	std	Y+20, r25	; 0x14
    2f0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	69 f7       	brne	.-38     	; 0x2eee <LCD_invidSendCommend+0x27e>
    2f14:	14 c0       	rjmp	.+40     	; 0x2f3e <LCD_invidSendCommend+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f16:	6d 89       	ldd	r22, Y+21	; 0x15
    2f18:	7e 89       	ldd	r23, Y+22	; 0x16
    2f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	9c 8b       	std	Y+20, r25	; 0x14
    2f28:	8b 8b       	std	Y+19, r24	; 0x13
    2f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2e:	98 8b       	std	Y+16, r25	; 0x10
    2f30:	8f 87       	std	Y+15, r24	; 0x0f
    2f32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f34:	98 89       	ldd	r25, Y+16	; 0x10
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	f1 f7       	brne	.-4      	; 0x2f36 <LCD_invidSendCommend+0x2c6>
    2f3a:	98 8b       	std	Y+16, r25	; 0x10
    2f3c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	63 e0       	ldi	r22, 0x03	; 3
    2f42:	40 e0       	ldi	r20, 0x00	; 0
    2f44:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>3)&1));
    2f48:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f4a:	86 95       	lsr	r24
    2f4c:	86 95       	lsr	r24
    2f4e:	86 95       	lsr	r24
    2f50:	98 2f       	mov	r25, r24
    2f52:	91 70       	andi	r25, 0x01	; 1
    2f54:	82 e0       	ldi	r24, 0x02	; 2
    2f56:	67 e0       	ldi	r22, 0x07	; 7
    2f58:	49 2f       	mov	r20, r25
    2f5a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
    2f5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f60:	86 95       	lsr	r24
    2f62:	86 95       	lsr	r24
    2f64:	98 2f       	mov	r25, r24
    2f66:	91 70       	andi	r25, 0x01	; 1
    2f68:	82 e0       	ldi	r24, 0x02	; 2
    2f6a:	66 e0       	ldi	r22, 0x06	; 6
    2f6c:	49 2f       	mov	r20, r25
    2f6e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
    2f72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f74:	86 95       	lsr	r24
    2f76:	98 2f       	mov	r25, r24
    2f78:	91 70       	andi	r25, 0x01	; 1
    2f7a:	82 e0       	ldi	r24, 0x02	; 2
    2f7c:	65 e0       	ldi	r22, 0x05	; 5
    2f7e:	49 2f       	mov	r20, r25
    2f80:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));
    2f84:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f86:	98 2f       	mov	r25, r24
    2f88:	91 70       	andi	r25, 0x01	; 1
    2f8a:	82 e0       	ldi	r24, 0x02	; 2
    2f8c:	64 e0       	ldi	r22, 0x04	; 4
    2f8e:	49 2f       	mov	r20, r25
    2f90:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	63 e0       	ldi	r22, 0x03	; 3
    2f98:	41 e0       	ldi	r20, 0x01	; 1
    2f9a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	a0 e2       	ldi	r26, 0x20	; 32
    2fa4:	b1 e4       	ldi	r27, 0x41	; 65
    2fa6:	8b 87       	std	Y+11, r24	; 0x0b
    2fa8:	9c 87       	std	Y+12, r25	; 0x0c
    2faa:	ad 87       	std	Y+13, r26	; 0x0d
    2fac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	4a e7       	ldi	r20, 0x7A	; 122
    2fbc:	53 e4       	ldi	r21, 0x43	; 67
    2fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	8f 83       	std	Y+7, r24	; 0x07
    2fc8:	98 87       	std	Y+8, r25	; 0x08
    2fca:	a9 87       	std	Y+9, r26	; 0x09
    2fcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fce:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd0:	78 85       	ldd	r23, Y+8	; 0x08
    2fd2:	89 85       	ldd	r24, Y+9	; 0x09
    2fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e8       	ldi	r20, 0x80	; 128
    2fdc:	5f e3       	ldi	r21, 0x3F	; 63
    2fde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fe2:	88 23       	and	r24, r24
    2fe4:	2c f4       	brge	.+10     	; 0x2ff0 <LCD_invidSendCommend+0x380>
		__ticks = 1;
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	9e 83       	std	Y+6, r25	; 0x06
    2fec:	8d 83       	std	Y+5, r24	; 0x05
    2fee:	3f c0       	rjmp	.+126    	; 0x306e <LCD_invidSendCommend+0x3fe>
	else if (__tmp > 65535)
    2ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff2:	78 85       	ldd	r23, Y+8	; 0x08
    2ff4:	89 85       	ldd	r24, Y+9	; 0x09
    2ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	3f ef       	ldi	r19, 0xFF	; 255
    2ffc:	4f e7       	ldi	r20, 0x7F	; 127
    2ffe:	57 e4       	ldi	r21, 0x47	; 71
    3000:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3004:	18 16       	cp	r1, r24
    3006:	4c f5       	brge	.+82     	; 0x305a <LCD_invidSendCommend+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3008:	6b 85       	ldd	r22, Y+11	; 0x0b
    300a:	7c 85       	ldd	r23, Y+12	; 0x0c
    300c:	8d 85       	ldd	r24, Y+13	; 0x0d
    300e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	40 e2       	ldi	r20, 0x20	; 32
    3016:	51 e4       	ldi	r21, 0x41	; 65
    3018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	bc 01       	movw	r22, r24
    3022:	cd 01       	movw	r24, r26
    3024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	9e 83       	std	Y+6, r25	; 0x06
    302e:	8d 83       	std	Y+5, r24	; 0x05
    3030:	0f c0       	rjmp	.+30     	; 0x3050 <LCD_invidSendCommend+0x3e0>
    3032:	89 e1       	ldi	r24, 0x19	; 25
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	9c 83       	std	Y+4, r25	; 0x04
    3038:	8b 83       	std	Y+3, r24	; 0x03
    303a:	8b 81       	ldd	r24, Y+3	; 0x03
    303c:	9c 81       	ldd	r25, Y+4	; 0x04
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	f1 f7       	brne	.-4      	; 0x303e <LCD_invidSendCommend+0x3ce>
    3042:	9c 83       	std	Y+4, r25	; 0x04
    3044:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3046:	8d 81       	ldd	r24, Y+5	; 0x05
    3048:	9e 81       	ldd	r25, Y+6	; 0x06
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	9e 83       	std	Y+6, r25	; 0x06
    304e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3050:	8d 81       	ldd	r24, Y+5	; 0x05
    3052:	9e 81       	ldd	r25, Y+6	; 0x06
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	69 f7       	brne	.-38     	; 0x3032 <LCD_invidSendCommend+0x3c2>
    3058:	14 c0       	rjmp	.+40     	; 0x3082 <LCD_invidSendCommend+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305a:	6f 81       	ldd	r22, Y+7	; 0x07
    305c:	78 85       	ldd	r23, Y+8	; 0x08
    305e:	89 85       	ldd	r24, Y+9	; 0x09
    3060:	9a 85       	ldd	r25, Y+10	; 0x0a
    3062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	9e 83       	std	Y+6, r25	; 0x06
    306c:	8d 83       	std	Y+5, r24	; 0x05
    306e:	8d 81       	ldd	r24, Y+5	; 0x05
    3070:	9e 81       	ldd	r25, Y+6	; 0x06
    3072:	9a 83       	std	Y+2, r25	; 0x02
    3074:	89 83       	std	Y+1, r24	; 0x01
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	9a 81       	ldd	r25, Y+2	; 0x02
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	f1 f7       	brne	.-4      	; 0x307a <LCD_invidSendCommend+0x40a>
    307e:	9a 83       	std	Y+2, r25	; 0x02
    3080:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	63 e0       	ldi	r22, 0x03	; 3
    3086:	40 e0       	ldi	r20, 0x00	; 0
    3088:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_enuSetPinValue>
}
    308c:	ab 96       	adiw	r28, 0x2b	; 43
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	de bf       	out	0x3e, r29	; 62
    3094:	0f be       	out	0x3f, r0	; 63
    3096:	cd bf       	out	0x3d, r28	; 61
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	08 95       	ret

0000309e <LCD_Clear>:
void LCD_Clear(){
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62



		LCD_enuSendCommand(0x01);
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	0e 94 80 11 	call	0x2300	; 0x2300 <LCD_enuSendCommand>
		LCD_enuSendCommand(0x80);
    30ac:	80 e8       	ldi	r24, 0x80	; 128
    30ae:	0e 94 80 11 	call	0x2300	; 0x2300 <LCD_enuSendCommand>





}
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	08 95       	ret

000030b8 <LCD_GoTo>:
ES_t LCD_GoTo(u8 Copy_u8X , u8 Copy_u8Y){
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	00 d0       	rcall	.+0      	; 0x30be <LCD_GoTo+0x6>
    30be:	0f 92       	push	r0
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	8a 83       	std	Y+2, r24	; 0x02
    30c6:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    30c8:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8X== 0)
    30ca:	8a 81       	ldd	r24, Y+2	; 0x02
    30cc:	88 23       	and	r24, r24
    30ce:	31 f4       	brne	.+12     	; 0x30dc <LCD_GoTo+0x24>
		{
			Local_enuErrorState = LCD_enuSendCommand((0x80)+Copy_u8Y);
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	80 58       	subi	r24, 0x80	; 128
    30d4:	0e 94 80 11 	call	0x2300	; 0x2300 <LCD_enuSendCommand>
    30d8:	89 83       	std	Y+1, r24	; 0x01
    30da:	0b c0       	rjmp	.+22     	; 0x30f2 <LCD_GoTo+0x3a>
		}
		else if(Copy_u8X== 1)
    30dc:	8a 81       	ldd	r24, Y+2	; 0x02
    30de:	81 30       	cpi	r24, 0x01	; 1
    30e0:	31 f4       	brne	.+12     	; 0x30ee <LCD_GoTo+0x36>
		{
			Local_enuErrorState = LCD_enuSendCommand((0xC0)+Copy_u8Y);
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	80 54       	subi	r24, 0x40	; 64
    30e6:	0e 94 80 11 	call	0x2300	; 0x2300 <LCD_enuSendCommand>
    30ea:	89 83       	std	Y+1, r24	; 0x01
    30ec:	02 c0       	rjmp	.+4      	; 0x30f2 <LCD_GoTo+0x3a>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    30ee:	83 e0       	ldi	r24, 0x03	; 3
    30f0:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorState;
    30f2:	89 81       	ldd	r24, Y+1	; 0x01





}
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	cf 91       	pop	r28
    30fc:	df 91       	pop	r29
    30fe:	08 95       	ret

00003100 <LCD_enuSendString>:


ES_t LCD_enuSendString(char* Copy_pcString)
{
    3100:	df 93       	push	r29
    3102:	cf 93       	push	r28
    3104:	00 d0       	rcall	.+0      	; 0x3106 <LCD_enuSendString+0x6>
    3106:	00 d0       	rcall	.+0      	; 0x3108 <LCD_enuSendString+0x8>
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
    310c:	9c 83       	std	Y+4, r25	; 0x04
    310e:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3110:	1a 82       	std	Y+2, r1	; 0x02
if(Copy_pcString != NULL)
    3112:	8b 81       	ldd	r24, Y+3	; 0x03
    3114:	9c 81       	ldd	r25, Y+4	; 0x04
    3116:	00 97       	sbiw	r24, 0x00	; 0
    3118:	e9 f0       	breq	.+58     	; 0x3154 <LCD_enuSendString+0x54>
{
	u8 Local_u8Iterator=0;
    311a:	19 82       	std	Y+1, r1	; 0x01
    311c:	0f c0       	rjmp	.+30     	; 0x313c <LCD_enuSendString+0x3c>
	while(Copy_pcString[Local_u8Iterator]!='\0')
	{
		Local_enuErrorState = LCD_enuDisplayChar(Copy_pcString[Local_u8Iterator]);
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	28 2f       	mov	r18, r24
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	8b 81       	ldd	r24, Y+3	; 0x03
    3126:	9c 81       	ldd	r25, Y+4	; 0x04
    3128:	fc 01       	movw	r30, r24
    312a:	e2 0f       	add	r30, r18
    312c:	f3 1f       	adc	r31, r19
    312e:	80 81       	ld	r24, Z
    3130:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_enuDisplayChar>
    3134:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Iterator ++;
    3136:	89 81       	ldd	r24, Y+1	; 0x01
    3138:	8f 5f       	subi	r24, 0xFF	; 255
    313a:	89 83       	std	Y+1, r24	; 0x01
{
	ES_t Local_enuErrorState = ES_NOK;
if(Copy_pcString != NULL)
{
	u8 Local_u8Iterator=0;
	while(Copy_pcString[Local_u8Iterator]!='\0')
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	28 2f       	mov	r18, r24
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	8b 81       	ldd	r24, Y+3	; 0x03
    3144:	9c 81       	ldd	r25, Y+4	; 0x04
    3146:	fc 01       	movw	r30, r24
    3148:	e2 0f       	add	r30, r18
    314a:	f3 1f       	adc	r31, r19
    314c:	80 81       	ld	r24, Z
    314e:	88 23       	and	r24, r24
    3150:	31 f7       	brne	.-52     	; 0x311e <LCD_enuSendString+0x1e>
    3152:	02 c0       	rjmp	.+4      	; 0x3158 <LCD_enuSendString+0x58>
	}

}
else
{
	Local_enuErrorState=ES_NULL_POINTER;
    3154:	82 e0       	ldi	r24, 0x02	; 2
    3156:	8a 83       	std	Y+2, r24	; 0x02
}

	return Local_enuErrorState;
    3158:	8a 81       	ldd	r24, Y+2	; 0x02
}
    315a:	0f 90       	pop	r0
    315c:	0f 90       	pop	r0
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	cf 91       	pop	r28
    3164:	df 91       	pop	r29
    3166:	08 95       	ret

00003168 <main>:
#include "../MCAL/DIO/DIO_int.h"
#include "../MCAL/_ADC_/ADC_int.h"
#include "../HAL/LCD/LCD_int.h"
#include "../HAL/Th_LM/TH_int.h"
#include <util/delay.h>
int main(){
    3168:	df 93       	push	r29
    316a:	cf 93       	push	r28
    316c:	cd b7       	in	r28, 0x3d	; 61
    316e:	de b7       	in	r29, 0x3e	; 62
    3170:	64 97       	sbiw	r28, 0x14	; 20
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	cd bf       	out	0x3d, r28	; 61


u16 adcread=0;
    317c:	18 8a       	std	Y+16, r1	; 0x10
    317e:	1f 86       	std	Y+15, r1	; 0x0f
s32 Temp=0;
    3180:	19 8a       	std	Y+17, r1	; 0x11
    3182:	1a 8a       	std	Y+18, r1	; 0x12
    3184:	1b 8a       	std	Y+19, r1	; 0x13
    3186:	1c 8a       	std	Y+20, r1	; 0x14
DIO_enuInit();
    3188:	0e 94 99 0a 	call	0x1532	; 0x1532 <DIO_enuInit>
DIO_enuSetPinDirection(DIO_u8PORTA,DIO_u8PIN0,DIO_u8INPUT);
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	60 e0       	ldi	r22, 0x00	; 0
    3190:	40 e0       	ldi	r20, 0x00	; 0
    3192:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_enuSetPinDirection>
DIO_enuSetPortDirection(DIO_u8PORTD,DIO_u8OUTPUT);
    3196:	83 e0       	ldi	r24, 0x03	; 3
    3198:	61 e0       	ldi	r22, 0x01	; 1
    319a:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DIO_enuSetPortDirection>
ADC_enu_Int();
    319e:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_enu_Int>
LCD_enuInit();
    31a2:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_enuInit>
TH_enuInit();
    31a6:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <TH_enuInit>
ADC_enuSelectChannel(0);
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <ADC_enuSelectChannel>
ADC_enuEnable();
    31b0:	0e 94 66 07 	call	0xecc	; 0xecc <ADC_enuEnable>
ADC_enuDisableTriggeringMode();
    31b4:	0e 94 3f 08 	call	0x107e	; 0x107e <ADC_enuDisableTriggeringMode>
ADC_enuDisableInterruptMode();
    31b8:	0e 94 67 08 	call	0x10ce	; 0x10ce <ADC_enuDisableInterruptMode>
LCD_enuSendCommand(0x0c);
    31bc:	8c e0       	ldi	r24, 0x0C	; 12
    31be:	0e 94 80 11 	call	0x2300	; 0x2300 <LCD_enuSendCommand>
LCD_enuSendString("Temp =");
    31c2:	80 e6       	ldi	r24, 0x60	; 96
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	0e 94 80 18 	call	0x3100	; 0x3100 <LCD_enuSendString>
//

		while(1){
			LCD_GoTo(0,6);
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	66 e0       	ldi	r22, 0x06	; 6
    31ce:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_GoTo>
			LCD_enuSendString("       ");
    31d2:	87 e6       	ldi	r24, 0x67	; 103
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	0e 94 80 18 	call	0x3100	; 0x3100 <LCD_enuSendString>
			LCD_GoTo(0,6);
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	66 e0       	ldi	r22, 0x06	; 6
    31de:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_GoTo>

			ADC_enu_Start_Conversion();
    31e2:	0e 94 40 07 	call	0xe80	; 0xe80 <ADC_enu_Start_Conversion>
			ADC_enu_Read(&adcread);
    31e6:	ce 01       	movw	r24, r28
    31e8:	0f 96       	adiw	r24, 0x0f	; 15
    31ea:	0e 94 bf 07 	call	0xf7e	; 0xf7e <ADC_enu_Read>
          DIO_enuSetPortValue(DIO_u8PORTD,adcread);
    31ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    31f0:	98 89       	ldd	r25, Y+16	; 0x10
    31f2:	98 2f       	mov	r25, r24
    31f4:	83 e0       	ldi	r24, 0x03	; 3
    31f6:	69 2f       	mov	r22, r25
    31f8:	0e 94 06 0b 	call	0x160c	; 0x160c <DIO_enuSetPortValue>
          TH_enuGetTem(adcread,&Temp);
    31fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    31fe:	98 89       	ldd	r25, Y+16	; 0x10
    3200:	9e 01       	movw	r18, r28
    3202:	2f 5e       	subi	r18, 0xEF	; 239
    3204:	3f 4f       	sbci	r19, 0xFF	; 255
    3206:	b9 01       	movw	r22, r18
    3208:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <TH_enuGetTem>
          LCD_enuDisplayIntegerNum(Temp);
    320c:	89 89       	ldd	r24, Y+17	; 0x11
    320e:	9a 89       	ldd	r25, Y+18	; 0x12
    3210:	ab 89       	ldd	r26, Y+19	; 0x13
    3212:	bc 89       	ldd	r27, Y+20	; 0x14
    3214:	bc 01       	movw	r22, r24
    3216:	cd 01       	movw	r24, r26
    3218:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_enuDisplayIntegerNum>
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	aa ef       	ldi	r26, 0xFA	; 250
    3222:	b3 e4       	ldi	r27, 0x43	; 67
    3224:	8b 87       	std	Y+11, r24	; 0x0b
    3226:	9c 87       	std	Y+12, r25	; 0x0c
    3228:	ad 87       	std	Y+13, r26	; 0x0d
    322a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    322c:	6b 85       	ldd	r22, Y+11	; 0x0b
    322e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3230:	8d 85       	ldd	r24, Y+13	; 0x0d
    3232:	9e 85       	ldd	r25, Y+14	; 0x0e
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	4a e7       	ldi	r20, 0x7A	; 122
    323a:	53 e4       	ldi	r21, 0x43	; 67
    323c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	8f 83       	std	Y+7, r24	; 0x07
    3246:	98 87       	std	Y+8, r25	; 0x08
    3248:	a9 87       	std	Y+9, r26	; 0x09
    324a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    324c:	6f 81       	ldd	r22, Y+7	; 0x07
    324e:	78 85       	ldd	r23, Y+8	; 0x08
    3250:	89 85       	ldd	r24, Y+9	; 0x09
    3252:	9a 85       	ldd	r25, Y+10	; 0x0a
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	40 e8       	ldi	r20, 0x80	; 128
    325a:	5f e3       	ldi	r21, 0x3F	; 63
    325c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3260:	88 23       	and	r24, r24
    3262:	2c f4       	brge	.+10     	; 0x326e <main+0x106>
		__ticks = 1;
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	9e 83       	std	Y+6, r25	; 0x06
    326a:	8d 83       	std	Y+5, r24	; 0x05
    326c:	3f c0       	rjmp	.+126    	; 0x32ec <main+0x184>
	else if (__tmp > 65535)
    326e:	6f 81       	ldd	r22, Y+7	; 0x07
    3270:	78 85       	ldd	r23, Y+8	; 0x08
    3272:	89 85       	ldd	r24, Y+9	; 0x09
    3274:	9a 85       	ldd	r25, Y+10	; 0x0a
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	3f ef       	ldi	r19, 0xFF	; 255
    327a:	4f e7       	ldi	r20, 0x7F	; 127
    327c:	57 e4       	ldi	r21, 0x47	; 71
    327e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3282:	18 16       	cp	r1, r24
    3284:	4c f5       	brge	.+82     	; 0x32d8 <main+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3286:	6b 85       	ldd	r22, Y+11	; 0x0b
    3288:	7c 85       	ldd	r23, Y+12	; 0x0c
    328a:	8d 85       	ldd	r24, Y+13	; 0x0d
    328c:	9e 85       	ldd	r25, Y+14	; 0x0e
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e2       	ldi	r20, 0x20	; 32
    3294:	51 e4       	ldi	r21, 0x41	; 65
    3296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	bc 01       	movw	r22, r24
    32a0:	cd 01       	movw	r24, r26
    32a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	9e 83       	std	Y+6, r25	; 0x06
    32ac:	8d 83       	std	Y+5, r24	; 0x05
    32ae:	0f c0       	rjmp	.+30     	; 0x32ce <main+0x166>
    32b0:	89 e1       	ldi	r24, 0x19	; 25
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	9c 83       	std	Y+4, r25	; 0x04
    32b6:	8b 83       	std	Y+3, r24	; 0x03
    32b8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ba:	9c 81       	ldd	r25, Y+4	; 0x04
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	f1 f7       	brne	.-4      	; 0x32bc <main+0x154>
    32c0:	9c 83       	std	Y+4, r25	; 0x04
    32c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32c4:	8d 81       	ldd	r24, Y+5	; 0x05
    32c6:	9e 81       	ldd	r25, Y+6	; 0x06
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	9e 83       	std	Y+6, r25	; 0x06
    32cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ce:	8d 81       	ldd	r24, Y+5	; 0x05
    32d0:	9e 81       	ldd	r25, Y+6	; 0x06
    32d2:	00 97       	sbiw	r24, 0x00	; 0
    32d4:	69 f7       	brne	.-38     	; 0x32b0 <main+0x148>
    32d6:	79 cf       	rjmp	.-270    	; 0x31ca <main+0x62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d8:	6f 81       	ldd	r22, Y+7	; 0x07
    32da:	78 85       	ldd	r23, Y+8	; 0x08
    32dc:	89 85       	ldd	r24, Y+9	; 0x09
    32de:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	9e 83       	std	Y+6, r25	; 0x06
    32ea:	8d 83       	std	Y+5, r24	; 0x05
    32ec:	8d 81       	ldd	r24, Y+5	; 0x05
    32ee:	9e 81       	ldd	r25, Y+6	; 0x06
    32f0:	9a 83       	std	Y+2, r25	; 0x02
    32f2:	89 83       	std	Y+1, r24	; 0x01
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	9a 81       	ldd	r25, Y+2	; 0x02
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	f1 f7       	brne	.-4      	; 0x32f8 <main+0x190>
    32fc:	9a 83       	std	Y+2, r25	; 0x02
    32fe:	89 83       	std	Y+1, r24	; 0x01
    3300:	64 cf       	rjmp	.-312    	; 0x31ca <main+0x62>

00003302 <__mulsi3>:
    3302:	62 9f       	mul	r22, r18
    3304:	d0 01       	movw	r26, r0
    3306:	73 9f       	mul	r23, r19
    3308:	f0 01       	movw	r30, r0
    330a:	82 9f       	mul	r24, r18
    330c:	e0 0d       	add	r30, r0
    330e:	f1 1d       	adc	r31, r1
    3310:	64 9f       	mul	r22, r20
    3312:	e0 0d       	add	r30, r0
    3314:	f1 1d       	adc	r31, r1
    3316:	92 9f       	mul	r25, r18
    3318:	f0 0d       	add	r31, r0
    331a:	83 9f       	mul	r24, r19
    331c:	f0 0d       	add	r31, r0
    331e:	74 9f       	mul	r23, r20
    3320:	f0 0d       	add	r31, r0
    3322:	65 9f       	mul	r22, r21
    3324:	f0 0d       	add	r31, r0
    3326:	99 27       	eor	r25, r25
    3328:	72 9f       	mul	r23, r18
    332a:	b0 0d       	add	r27, r0
    332c:	e1 1d       	adc	r30, r1
    332e:	f9 1f       	adc	r31, r25
    3330:	63 9f       	mul	r22, r19
    3332:	b0 0d       	add	r27, r0
    3334:	e1 1d       	adc	r30, r1
    3336:	f9 1f       	adc	r31, r25
    3338:	bd 01       	movw	r22, r26
    333a:	cf 01       	movw	r24, r30
    333c:	11 24       	eor	r1, r1
    333e:	08 95       	ret

00003340 <__divmodsi4>:
    3340:	97 fb       	bst	r25, 7
    3342:	09 2e       	mov	r0, r25
    3344:	05 26       	eor	r0, r21
    3346:	0e d0       	rcall	.+28     	; 0x3364 <__divmodsi4_neg1>
    3348:	57 fd       	sbrc	r21, 7
    334a:	04 d0       	rcall	.+8      	; 0x3354 <__divmodsi4_neg2>
    334c:	14 d0       	rcall	.+40     	; 0x3376 <__udivmodsi4>
    334e:	0a d0       	rcall	.+20     	; 0x3364 <__divmodsi4_neg1>
    3350:	00 1c       	adc	r0, r0
    3352:	38 f4       	brcc	.+14     	; 0x3362 <__divmodsi4_exit>

00003354 <__divmodsi4_neg2>:
    3354:	50 95       	com	r21
    3356:	40 95       	com	r20
    3358:	30 95       	com	r19
    335a:	21 95       	neg	r18
    335c:	3f 4f       	sbci	r19, 0xFF	; 255
    335e:	4f 4f       	sbci	r20, 0xFF	; 255
    3360:	5f 4f       	sbci	r21, 0xFF	; 255

00003362 <__divmodsi4_exit>:
    3362:	08 95       	ret

00003364 <__divmodsi4_neg1>:
    3364:	f6 f7       	brtc	.-4      	; 0x3362 <__divmodsi4_exit>
    3366:	90 95       	com	r25
    3368:	80 95       	com	r24
    336a:	70 95       	com	r23
    336c:	61 95       	neg	r22
    336e:	7f 4f       	sbci	r23, 0xFF	; 255
    3370:	8f 4f       	sbci	r24, 0xFF	; 255
    3372:	9f 4f       	sbci	r25, 0xFF	; 255
    3374:	08 95       	ret

00003376 <__udivmodsi4>:
    3376:	a1 e2       	ldi	r26, 0x21	; 33
    3378:	1a 2e       	mov	r1, r26
    337a:	aa 1b       	sub	r26, r26
    337c:	bb 1b       	sub	r27, r27
    337e:	fd 01       	movw	r30, r26
    3380:	0d c0       	rjmp	.+26     	; 0x339c <__udivmodsi4_ep>

00003382 <__udivmodsi4_loop>:
    3382:	aa 1f       	adc	r26, r26
    3384:	bb 1f       	adc	r27, r27
    3386:	ee 1f       	adc	r30, r30
    3388:	ff 1f       	adc	r31, r31
    338a:	a2 17       	cp	r26, r18
    338c:	b3 07       	cpc	r27, r19
    338e:	e4 07       	cpc	r30, r20
    3390:	f5 07       	cpc	r31, r21
    3392:	20 f0       	brcs	.+8      	; 0x339c <__udivmodsi4_ep>
    3394:	a2 1b       	sub	r26, r18
    3396:	b3 0b       	sbc	r27, r19
    3398:	e4 0b       	sbc	r30, r20
    339a:	f5 0b       	sbc	r31, r21

0000339c <__udivmodsi4_ep>:
    339c:	66 1f       	adc	r22, r22
    339e:	77 1f       	adc	r23, r23
    33a0:	88 1f       	adc	r24, r24
    33a2:	99 1f       	adc	r25, r25
    33a4:	1a 94       	dec	r1
    33a6:	69 f7       	brne	.-38     	; 0x3382 <__udivmodsi4_loop>
    33a8:	60 95       	com	r22
    33aa:	70 95       	com	r23
    33ac:	80 95       	com	r24
    33ae:	90 95       	com	r25
    33b0:	9b 01       	movw	r18, r22
    33b2:	ac 01       	movw	r20, r24
    33b4:	bd 01       	movw	r22, r26
    33b6:	cf 01       	movw	r24, r30
    33b8:	08 95       	ret

000033ba <__prologue_saves__>:
    33ba:	2f 92       	push	r2
    33bc:	3f 92       	push	r3
    33be:	4f 92       	push	r4
    33c0:	5f 92       	push	r5
    33c2:	6f 92       	push	r6
    33c4:	7f 92       	push	r7
    33c6:	8f 92       	push	r8
    33c8:	9f 92       	push	r9
    33ca:	af 92       	push	r10
    33cc:	bf 92       	push	r11
    33ce:	cf 92       	push	r12
    33d0:	df 92       	push	r13
    33d2:	ef 92       	push	r14
    33d4:	ff 92       	push	r15
    33d6:	0f 93       	push	r16
    33d8:	1f 93       	push	r17
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
    33e2:	ca 1b       	sub	r28, r26
    33e4:	db 0b       	sbc	r29, r27
    33e6:	0f b6       	in	r0, 0x3f	; 63
    33e8:	f8 94       	cli
    33ea:	de bf       	out	0x3e, r29	; 62
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	cd bf       	out	0x3d, r28	; 61
    33f0:	09 94       	ijmp

000033f2 <__epilogue_restores__>:
    33f2:	2a 88       	ldd	r2, Y+18	; 0x12
    33f4:	39 88       	ldd	r3, Y+17	; 0x11
    33f6:	48 88       	ldd	r4, Y+16	; 0x10
    33f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    33fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    33fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    33fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    3400:	9b 84       	ldd	r9, Y+11	; 0x0b
    3402:	aa 84       	ldd	r10, Y+10	; 0x0a
    3404:	b9 84       	ldd	r11, Y+9	; 0x09
    3406:	c8 84       	ldd	r12, Y+8	; 0x08
    3408:	df 80       	ldd	r13, Y+7	; 0x07
    340a:	ee 80       	ldd	r14, Y+6	; 0x06
    340c:	fd 80       	ldd	r15, Y+5	; 0x05
    340e:	0c 81       	ldd	r16, Y+4	; 0x04
    3410:	1b 81       	ldd	r17, Y+3	; 0x03
    3412:	aa 81       	ldd	r26, Y+2	; 0x02
    3414:	b9 81       	ldd	r27, Y+1	; 0x01
    3416:	ce 0f       	add	r28, r30
    3418:	d1 1d       	adc	r29, r1
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	f8 94       	cli
    341e:	de bf       	out	0x3e, r29	; 62
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	ed 01       	movw	r28, r26
    3426:	08 95       	ret

00003428 <_exit>:
    3428:	f8 94       	cli

0000342a <__stop_program>:
    342a:	ff cf       	rjmp	.-2      	; 0x342a <__stop_program>
