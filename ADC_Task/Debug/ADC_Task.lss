
ADC_Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003448  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00003448  000034dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800178  00800178  000035f4  2**0
                  ALLOC
  3 .stab         0000345c  00000000  00000000  000035f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012bc  00000000  00000000  00006a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000809e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a4a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b82f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ca08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000cebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d82c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__vector_1>
       8:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__vector_2>
       c:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c6 18 	call	0x318c	; 0x318c <main>
      8a:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e6       	ldi	r22, 0x6F	; 111
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e9 58       	subi	r30, 0x89	; 137
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_enu_Int>:

static void (*ADC_GpFun)(void*)=NULL;
static void *ADC_Gparameter=NULL;


 ES_t ADC_enu_Int(){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
     e38:	19 82       	std	Y+1, r1	; 0x01
#if Vref == AREF
	ADMUX&=~(3<<6);

#elif Vref == AVCC
	ADMUX&=~(1<<7);
     e3a:	a7 e2       	ldi	r26, 0x27	; 39
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e7 e2       	ldi	r30, 0x27	; 39
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8f 77       	andi	r24, 0x7F	; 127
     e46:	8c 93       	st	X, r24
	ADMUX|=(AVCC<<6);
     e48:	a7 e2       	ldi	r26, 0x27	; 39
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e7 e2       	ldi	r30, 0x27	; 39
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 64       	ori	r24, 0x40	; 64
     e54:	8c 93       	st	X, r24


#if Adjust_Type==Left_Adjust
	ADMUX|=(1<<5);
#elif Adjust_Type==Right_Adjust
	ADMUX&=~(1<<5);
     e56:	a7 e2       	ldi	r26, 0x27	; 39
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e7 e2       	ldi	r30, 0x27	; 39
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8f 7d       	andi	r24, 0xDF	; 223
     e62:	8c 93       	st	X, r24
	ADCSRA |= (5<<0);
#elif prescalar == DIV_FACT64
	ADCSRA &=~ (7<<0);
	ADCSRA |= (6<<0);
#elif prescalar == DIV_FACT128
	ADCSRA |= (7<<0);
     e64:	a6 e2       	ldi	r26, 0x26	; 38
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e6 e2       	ldi	r30, 0x26	; 38
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	87 60       	ori	r24, 0x07	; 7
     e70:	8c 93       	st	X, r24
#endif

	Local_enuErrorstate = ES_OK;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
     e76:	89 81       	ldd	r24, Y+1	; 0x01
}
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <ADC_enu_Start_Conversion>:
ES_t ADC_enu_Start_Conversion(){
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	0f 92       	push	r0
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
     e8a:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA|=(1<<6);
     e8c:	a6 e2       	ldi	r26, 0x26	; 38
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e6 e2       	ldi	r30, 0x26	; 38
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 64       	ori	r24, 0x40	; 64
     e98:	8c 93       	st	X, r24
	while(((ADCSRA>>4)&1)==0);  //polling
     e9a:	e6 e2       	ldi	r30, 0x26	; 38
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	82 95       	swap	r24
     ea2:	8f 70       	andi	r24, 0x0F	; 15
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	81 70       	andi	r24, 0x01	; 1
     eaa:	90 70       	andi	r25, 0x00	; 0
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	a9 f3       	breq	.-22     	; 0xe9a <ADC_enu_Start_Conversion+0x1a>
	ADCSRA|=(1<<4);
     eb0:	a6 e2       	ldi	r26, 0x26	; 38
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e6 e2       	ldi	r30, 0x26	; 38
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	80 61       	ori	r24, 0x10	; 16
     ebc:	8c 93       	st	X, r24
	Local_enuErrorstate = ES_OK;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorstate;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec4:	0f 90       	pop	r0
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <ADC_enuEnable>:
ES_t ADC_enuEnable(){
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	0f 92       	push	r0
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
     ed6:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA|=(1<<7);
     ed8:	a6 e2       	ldi	r26, 0x26	; 38
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e6 e2       	ldi	r30, 0x26	; 38
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 68       	ori	r24, 0x80	; 128
     ee4:	8c 93       	st	X, r24
	Local_enuErrorstate = ES_OK;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	89 83       	std	Y+1, r24	; 0x01
			return Local_enuErrorstate;
     eea:	89 81       	ldd	r24, Y+1	; 0x01
}
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <ADC_enuDisable>:
ES_t ADC_enuDisable(){
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	0f 92       	push	r0
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
     efe:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA&=~(1<<7);
     f00:	a6 e2       	ldi	r26, 0x26	; 38
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e6 e2       	ldi	r30, 0x26	; 38
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8f 77       	andi	r24, 0x7F	; 127
     f0c:	8c 93       	st	X, r24
		Local_enuErrorstate = ES_OK;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01
				return Local_enuErrorstate;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
}
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <ADC_enu_ReadHighVal>:

ES_t ADC_enu_ReadHighVal(u8 *Copy_pu8Value){
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	00 d0       	rcall	.+0      	; 0xf22 <ADC_enu_ReadHighVal+0x6>
     f22:	0f 92       	push	r0
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	9b 83       	std	Y+3, r25	; 0x03
     f2a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
     f2c:	19 82       	std	Y+1, r1	; 0x01
#if Adjust_Type==Left_Adjust
	*Copy_pu8Value=ADCH;
#elif Adjust_Type==Right_Adjust
	*Copy_pu8Value=(ADCL>>2);
     f2e:	e4 e2       	ldi	r30, 0x24	; 36
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	86 95       	lsr	r24
     f36:	86 95       	lsr	r24
     f38:	ea 81       	ldd	r30, Y+2	; 0x02
     f3a:	fb 81       	ldd	r31, Y+3	; 0x03
     f3c:	80 83       	st	Z, r24
	*Copy_pu8Value|=(ADCH<<6);
     f3e:	ea 81       	ldd	r30, Y+2	; 0x02
     f40:	fb 81       	ldd	r31, Y+3	; 0x03
     f42:	80 81       	ld	r24, Z
     f44:	28 2f       	mov	r18, r24
     f46:	e5 e2       	ldi	r30, 0x25	; 37
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	00 24       	eor	r0, r0
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	07 94       	ror	r0
     f58:	96 95       	lsr	r25
     f5a:	87 95       	ror	r24
     f5c:	07 94       	ror	r0
     f5e:	98 2f       	mov	r25, r24
     f60:	80 2d       	mov	r24, r0
     f62:	82 2b       	or	r24, r18
     f64:	ea 81       	ldd	r30, Y+2	; 0x02
     f66:	fb 81       	ldd	r31, Y+3	; 0x03
     f68:	80 83       	st	Z, r24
#endif
	Local_enuErrorstate = ES_OK;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	89 83       	std	Y+1, r24	; 0x01
			return Local_enuErrorstate;
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <ADC_enu_Read>:


ES_t  ADC_enu_Read(u16 *Copy_pu16Value){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <ADC_enu_Read+0x6>
     f82:	0f 92       	push	r0
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	9b 83       	std	Y+3, r25	; 0x03
     f8a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
     f8c:	19 82       	std	Y+1, r1	; 0x01

#if Adjust_Type==Left_Adjust
	*Copy_pu16Value=(ADCL>>6);
	*Copy_pu16Value|=(ADCH<<2);
#elif Adjust_Type==Right_Adjust
	*Copy_pu16Value=ADCADJ;
     f8e:	e4 e2       	ldi	r30, 0x24	; 36
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	91 81       	ldd	r25, Z+1	; 0x01
     f96:	ea 81       	ldd	r30, Y+2	; 0x02
     f98:	fb 81       	ldd	r31, Y+3	; 0x03
     f9a:	91 83       	std	Z+1, r25	; 0x01
     f9c:	80 83       	st	Z, r24
#endif

	Local_enuErrorstate = ES_OK;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <ADC_enuSelectChannel>:


ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID){
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <ADC_enuSelectChannel+0x6>
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
     fbc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8ChannelID<32){
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	80 32       	cpi	r24, 0x20	; 32
     fc2:	88 f4       	brcc	.+34     	; 0xfe6 <ADC_enuSelectChannel+0x36>
	ADMUX&=~(31>>0);
     fc4:	a7 e2       	ldi	r26, 0x27	; 39
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e7 e2       	ldi	r30, 0x27	; 39
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	80 7e       	andi	r24, 0xE0	; 224
     fd0:	8c 93       	st	X, r24
	ADMUX|=Copy_u8ChannelID;
     fd2:	a7 e2       	ldi	r26, 0x27	; 39
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e7 e2       	ldi	r30, 0x27	; 39
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	90 81       	ld	r25, Z
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	89 2b       	or	r24, r25
     fe0:	8c 93       	st	X, r24
	Local_enuErrorstate = ES_OK;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <ADC_enuEnableTriggeringMode>:

ES_t ADC_enuEnableTriggeringMode(u8 Copy_Trigger_Source){
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <ADC_enuEnableTriggeringMode+0x6>
     ff8:	00 d0       	rcall	.+0      	; 0xffa <ADC_enuEnableTriggeringMode+0x8>
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1000:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA &=~(1<<5);
    1002:	a6 e2       	ldi	r26, 0x26	; 38
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e6 e2       	ldi	r30, 0x26	; 38
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	8f 7d       	andi	r24, 0xDF	; 223
    100e:	8c 93       	st	X, r24
	switch(Copy_Trigger_Source){
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	3c 83       	std	Y+4, r19	; 0x04
    1018:	2b 83       	std	Y+3, r18	; 0x03
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	91 05       	cpc	r25, r1
    1022:	01 f1       	breq	.+64     	; 0x1064 <ADC_enuEnableTriggeringMode+0x72>
    1024:	2b 81       	ldd	r18, Y+3	; 0x03
    1026:	3c 81       	ldd	r19, Y+4	; 0x04
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	31 05       	cpc	r19, r1
    102c:	61 f0       	breq	.+24     	; 0x1046 <ADC_enuEnableTriggeringMode+0x54>
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	29 f5       	brne	.+74     	; 0x1080 <ADC_enuEnableTriggeringMode+0x8e>
	case Free_Running_mode:
		SFIOR&=~(7<<5);
    1036:	a0 e5       	ldi	r26, 0x50	; 80
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e0 e5       	ldi	r30, 0x50	; 80
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8f 71       	andi	r24, 0x1F	; 31
    1042:	8c 93       	st	X, r24
    1044:	1d c0       	rjmp	.+58     	; 0x1080 <ADC_enuEnableTriggeringMode+0x8e>

		break;
	case EXT_Request:
		SFIOR&=~(7<<5);
    1046:	a0 e5       	ldi	r26, 0x50	; 80
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e0 e5       	ldi	r30, 0x50	; 80
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8f 71       	andi	r24, 0x1F	; 31
    1052:	8c 93       	st	X, r24
		SFIOR|=(2<<5);
    1054:	a0 e5       	ldi	r26, 0x50	; 80
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e0 e5       	ldi	r30, 0x50	; 80
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	80 64       	ori	r24, 0x40	; 64
    1060:	8c 93       	st	X, r24
    1062:	0e c0       	rjmp	.+28     	; 0x1080 <ADC_enuEnableTriggeringMode+0x8e>

		break;
	case Analog_Comparator:
			SFIOR&=~(7<<5);
    1064:	a0 e5       	ldi	r26, 0x50	; 80
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e0 e5       	ldi	r30, 0x50	; 80
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8f 71       	andi	r24, 0x1F	; 31
    1070:	8c 93       	st	X, r24
			SFIOR|=(1<<5);
    1072:	a0 e5       	ldi	r26, 0x50	; 80
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e0 e5       	ldi	r30, 0x50	; 80
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	80 62       	ori	r24, 0x20	; 32
    107e:	8c 93       	st	X, r24

			break;
	}
	ADCSRA |=(1<<5);
    1080:	a6 e2       	ldi	r26, 0x26	; 38
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e6 e2       	ldi	r30, 0x26	; 38
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	80 62       	ori	r24, 0x20	; 32
    108c:	8c 93       	st	X, r24



	Local_enuErrorstate = ES_OK;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorstate;
    1092:	89 81       	ldd	r24, Y+1	; 0x01
}
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <ADC_enuDisableTriggeringMode>:


ES_t ADC_enuDisableTriggeringMode(){
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	0f 92       	push	r0
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    10ac:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA&=~(1<<5);
    10ae:	a6 e2       	ldi	r26, 0x26	; 38
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e6 e2       	ldi	r30, 0x26	; 38
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8f 7d       	andi	r24, 0xDF	; 223
    10ba:	8c 93       	st	X, r24


	Local_enuErrorstate = ES_OK;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <ADC_enuEnableInterruptMode>:


ES_t ADC_enuEnableInterruptMode(void){
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	0f 92       	push	r0
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    10d4:	19 82       	std	Y+1, r1	; 0x01

		ADCSRA|=(1<<3);
    10d6:	a6 e2       	ldi	r26, 0x26	; 38
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e6 e2       	ldi	r30, 0x26	; 38
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	88 60       	ori	r24, 0x08	; 8
    10e2:	8c 93       	st	X, r24


		Local_enuErrorstate = ES_OK;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorstate;
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <ADC_enuDisableInterruptMode>:
ES_t ADC_enuDisableInterruptMode(void){
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	0f 92       	push	r0
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    10fc:	19 82       	std	Y+1, r1	; 0x01

		ADCSRA&=~(1<<3);
    10fe:	a6 e2       	ldi	r26, 0x26	; 38
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e6 e2       	ldi	r30, 0x26	; 38
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	87 7f       	andi	r24, 0xF7	; 247
    110a:	8c 93       	st	X, r24


		Local_enuErrorstate = ES_OK;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorstate;
    1110:	89 81       	ldd	r24, Y+1	; 0x01

}
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <ADC_CallBack>:
ES_t  ADC_CallBack(void (*Copy_fun_ptr) (void), void * Copy_pvidAppParameter ){
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <ADC_CallBack+0x6>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <ADC_CallBack+0x8>
    1122:	0f 92       	push	r0
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	9b 83       	std	Y+3, r25	; 0x03
    112a:	8a 83       	std	Y+2, r24	; 0x02
    112c:	7d 83       	std	Y+5, r23	; 0x05
    112e:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1130:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_fun_ptr!=NULL && Copy_pvidAppParameter!=NULL){
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	9b 81       	ldd	r25, Y+3	; 0x03
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	91 f0       	breq	.+36     	; 0x115e <ADC_CallBack+0x44>
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	9d 81       	ldd	r25, Y+5	; 0x05
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	71 f0       	breq	.+28     	; 0x115e <ADC_CallBack+0x44>
		ADC_GpFun=Copy_fun_ptr;
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	9b 81       	ldd	r25, Y+3	; 0x03
    1146:	90 93 79 01 	sts	0x0179, r25
    114a:	80 93 78 01 	sts	0x0178, r24
		ADC_Gparameter=Copy_pvidAppParameter;
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	9d 81       	ldd	r25, Y+5	; 0x05
    1152:	90 93 7b 01 	sts	0x017B, r25
    1156:	80 93 7a 01 	sts	0x017A, r24
		Local_enuErrorstate = ES_OK;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	89 83       	std	Y+1, r24	; 0x01

	}

				return Local_enuErrorstate;
    115e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <__vector_16>:
ISR(VECT_ADC){
    1170:	1f 92       	push	r1
    1172:	0f 92       	push	r0
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	0f 92       	push	r0
    1178:	11 24       	eor	r1, r1
    117a:	2f 93       	push	r18
    117c:	3f 93       	push	r19
    117e:	4f 93       	push	r20
    1180:	5f 93       	push	r21
    1182:	6f 93       	push	r22
    1184:	7f 93       	push	r23
    1186:	8f 93       	push	r24
    1188:	9f 93       	push	r25
    118a:	af 93       	push	r26
    118c:	bf 93       	push	r27
    118e:	ef 93       	push	r30
    1190:	ff 93       	push	r31
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
if(ADC_GpFun!=NULL){
    119a:	80 91 78 01 	lds	r24, 0x0178
    119e:	90 91 79 01 	lds	r25, 0x0179
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	49 f0       	breq	.+18     	; 0x11b8 <__vector_16+0x48>
	ADC_GpFun(ADC_Gparameter);
    11a6:	e0 91 78 01 	lds	r30, 0x0178
    11aa:	f0 91 79 01 	lds	r31, 0x0179
    11ae:	80 91 7a 01 	lds	r24, 0x017A
    11b2:	90 91 7b 01 	lds	r25, 0x017B
    11b6:	09 95       	icall
}


}
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	ff 91       	pop	r31
    11be:	ef 91       	pop	r30
    11c0:	bf 91       	pop	r27
    11c2:	af 91       	pop	r26
    11c4:	9f 91       	pop	r25
    11c6:	8f 91       	pop	r24
    11c8:	7f 91       	pop	r23
    11ca:	6f 91       	pop	r22
    11cc:	5f 91       	pop	r21
    11ce:	4f 91       	pop	r20
    11d0:	3f 91       	pop	r19
    11d2:	2f 91       	pop	r18
    11d4:	0f 90       	pop	r0
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	0f 90       	pop	r0
    11da:	1f 90       	pop	r1
    11dc:	18 95       	reti

000011de <GIE_enuEnable>:
 */
#include "../../LIB/stdTypes.h"
#include "../../LIB/errorStates.h"
#include "GIE_priv.h"

ES_t GIE_enuEnable(){
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    11e8:	19 82       	std	Y+1, r1	; 0x01

	SREG|= (1<<7);
    11ea:	af e5       	ldi	r26, 0x5F	; 95
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	ef e5       	ldi	r30, 0x5F	; 95
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	80 68       	ori	r24, 0x80	; 128
    11f6:	8c 93       	st	X, r24
	Local_enuErrorstate = ES_OK;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	89 83       	std	Y+1, r24	; 0x01

		return Local_enuErrorstate;
    11fc:	89 81       	ldd	r24, Y+1	; 0x01

}
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <GIE_enuDisable>:
ES_t GIE_enuDisable(){
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	0f 92       	push	r0
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1210:	19 82       	std	Y+1, r1	; 0x01
    SREG&=~(1<<7);
    1212:	af e5       	ldi	r26, 0x5F	; 95
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	ef e5       	ldi	r30, 0x5F	; 95
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	8f 77       	andi	r24, 0x7F	; 127
    121e:	8c 93       	st	X, r24
    Local_enuErrorstate = ES_OK;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	89 83       	std	Y+1, r24	; 0x01
			return Local_enuErrorstate;
    1224:	89 81       	ldd	r24, Y+1	; 0x01
}
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <EXTI_intialiation>:

void (*pfunINTFun0)(void)=NULL;
void (*pfunINTFun1)(void)=NULL;
void (*pfunINTFun2)(void)=NULL;

ES_t EXTI_intialiation(){
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	0f 92       	push	r0
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorstate = ES_NOK;
    1238:	19 82       	std	Y+1, r1	; 0x01

	MCUCR &=~(15<<0); // CLEAR BIT 0 1 2 3 (INT0 & INT1)
    123a:	a5 e5       	ldi	r26, 0x55	; 85
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e5 e5       	ldi	r30, 0x55	; 85
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	80 7f       	andi	r24, 0xF0	; 240
    1246:	8c 93       	st	X, r24
#elif  INT0_MODE == LOW_LEVEL
	MCUCR|=LOW_LEVEL;
#elif  INT0_MODE == RISING_EDGE
	MCUCR|=RISING_EDGE;
#elif  INT0_MODE == ANY_LOGIC
	MCUCR|=ANY_LOGIC;
    1248:	a5 e5       	ldi	r26, 0x55	; 85
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e5 e5       	ldi	r30, 0x55	; 85
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	81 60       	ori	r24, 0x01	; 1
    1254:	8c 93       	st	X, r24
#elif  INT1_MODE == LOW_LEVEL
	MCUCR|=(LOW_LEVEL<<2);
#elif  INT1_MODE == RISING_EDGE
	MCUCR|=(RISING_EDGE<<2);
#elif  INT1_MODE == ANY_LOGIC
	MCUCR|=(ANY_LOGIC<<2);
    1256:	a5 e5       	ldi	r26, 0x55	; 85
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e5 e5       	ldi	r30, 0x55	; 85
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	84 60       	ori	r24, 0x04	; 4
    1262:	8c 93       	st	X, r24
#endif


#if INT0_STATE == ACTIVE
	GICR |=(1<<6);
    1264:	ab e5       	ldi	r26, 0x5B	; 91
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	eb e5       	ldi	r30, 0x5B	; 91
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	80 64       	ori	r24, 0x40	; 64
    1270:	8c 93       	st	X, r24
#endif



#if INT1_STATE == ACTIVE
	GICR |=(1<<7);
    1272:	ab e5       	ldi	r26, 0x5B	; 91
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	eb e5       	ldi	r30, 0x5B	; 91
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	80 68       	ori	r24, 0x80	; 128
    127e:	8c 93       	st	X, r24
#elif  INT1_STATE == DEACTIVE
	GICR &=~(1<<7);
#endif

#if INT2_STATE == ACTIVE
	GICR |=(1<<5);
    1280:	ab e5       	ldi	r26, 0x5B	; 91
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	eb e5       	ldi	r30, 0x5B	; 91
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	80 62       	ori	r24, 0x20	; 32
    128c:	8c 93       	st	X, r24
#elif  INT2_STATE == DEACTIVE
	GICR &=~(1<<5);
#endif

	GIFR|=(7<<5);     //CLEAR FLAGS IN BIT 5,6,7
    128e:	aa e5       	ldi	r26, 0x5A	; 90
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ea e5       	ldi	r30, 0x5A	; 90
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	80 6e       	ori	r24, 0xE0	; 224
    129a:	8c 93       	st	X, r24


		return Local_enuErrorstate;
    129c:	89 81       	ldd	r24, Y+1	; 0x01


}
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <EXTI_Enable_INT>:
ES_t  EXTI_Enable_INT(u8 Copy_u8EXTI_ID){
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <EXTI_Enable_INT+0x6>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    12b2:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8EXTI_ID < 4)
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	84 30       	cpi	r24, 0x04	; 4
    12b8:	68 f5       	brcc	.+90     	; 0x1314 <EXTI_Enable_INT+0x6e>
		{
			if (Copy_u8EXTI_ID ==0)
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	88 23       	and	r24, r24
    12be:	41 f4       	brne	.+16     	; 0x12d0 <EXTI_Enable_INT+0x2a>
			{

				GICR |= (1<<6);
    12c0:	ab e5       	ldi	r26, 0x5B	; 91
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	eb e5       	ldi	r30, 0x5B	; 91
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	80 64       	ori	r24, 0x40	; 64
    12cc:	8c 93       	st	X, r24
    12ce:	20 c0       	rjmp	.+64     	; 0x1310 <EXTI_Enable_INT+0x6a>
			}
			else if (Copy_u8EXTI_ID ==1)
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	41 f4       	brne	.+16     	; 0x12e6 <EXTI_Enable_INT+0x40>
			{
				GICR |= (1<<7);
    12d6:	ab e5       	ldi	r26, 0x5B	; 91
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	eb e5       	ldi	r30, 0x5B	; 91
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	80 68       	ori	r24, 0x80	; 128
    12e2:	8c 93       	st	X, r24
    12e4:	15 c0       	rjmp	.+42     	; 0x1310 <EXTI_Enable_INT+0x6a>
			}
			else if (Copy_u8EXTI_ID ==2)
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	82 30       	cpi	r24, 0x02	; 2
    12ea:	41 f4       	brne	.+16     	; 0x12fc <EXTI_Enable_INT+0x56>
			{
				GICR |= (1<<5);
    12ec:	ab e5       	ldi	r26, 0x5B	; 91
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	eb e5       	ldi	r30, 0x5B	; 91
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	80 62       	ori	r24, 0x20	; 32
    12f8:	8c 93       	st	X, r24
    12fa:	0a c0       	rjmp	.+20     	; 0x1310 <EXTI_Enable_INT+0x6a>
			}
			else if(Copy_u8EXTI_ID==GLOBAL){
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	39 f4       	brne	.+14     	; 0x1310 <EXTI_Enable_INT+0x6a>
			           SREG|= (1<<7);
    1302:	af e5       	ldi	r26, 0x5F	; 95
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	ef e5       	ldi	r30, 0x5F	; 95
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	80 68       	ori	r24, 0x80	; 128
    130e:	8c 93       	st	X, r24

	         }
			 Local_enuErrorstate = ES_OK;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorstate;
    1314:	89 81       	ldd	r24, Y+1	; 0x01
}
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <EXTI_Disable_INT>:
ES_t  EXTI_Disable_INT(u8 Copy_u8EXTI_ID){
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <EXTI_Disable_INT+0x6>
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    132c:	19 82       	std	Y+1, r1	; 0x01
		if (Copy_u8EXTI_ID < 4)
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	84 30       	cpi	r24, 0x04	; 4
    1332:	68 f5       	brcc	.+90     	; 0x138e <EXTI_Disable_INT+0x6e>
			{
			if (Copy_u8EXTI_ID ==0)
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	88 23       	and	r24, r24
    1338:	41 f4       	brne	.+16     	; 0x134a <EXTI_Disable_INT+0x2a>
							{

								GICR &= ~(1<<6);
    133a:	ab e5       	ldi	r26, 0x5B	; 91
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	eb e5       	ldi	r30, 0x5B	; 91
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	8f 7b       	andi	r24, 0xBF	; 191
    1346:	8c 93       	st	X, r24
    1348:	20 c0       	rjmp	.+64     	; 0x138a <EXTI_Disable_INT+0x6a>
							}
							else if (Copy_u8EXTI_ID ==1)
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	41 f4       	brne	.+16     	; 0x1360 <EXTI_Disable_INT+0x40>
							{
								GICR &=~(1<<7);
    1350:	ab e5       	ldi	r26, 0x5B	; 91
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	eb e5       	ldi	r30, 0x5B	; 91
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8f 77       	andi	r24, 0x7F	; 127
    135c:	8c 93       	st	X, r24
    135e:	15 c0       	rjmp	.+42     	; 0x138a <EXTI_Disable_INT+0x6a>
							}
							else if (Copy_u8EXTI_ID ==2)
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	41 f4       	brne	.+16     	; 0x1376 <EXTI_Disable_INT+0x56>
							{
								GICR &=~(1<<5);
    1366:	ab e5       	ldi	r26, 0x5B	; 91
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	eb e5       	ldi	r30, 0x5B	; 91
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8f 7d       	andi	r24, 0xDF	; 223
    1372:	8c 93       	st	X, r24
    1374:	0a c0       	rjmp	.+20     	; 0x138a <EXTI_Disable_INT+0x6a>
							}
							else if(Copy_u8EXTI_ID==GLOBAL){
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	39 f4       	brne	.+14     	; 0x138a <EXTI_Disable_INT+0x6a>
                                    SREG&=~(1<<7);
    137c:	af e5       	ldi	r26, 0x5F	; 95
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	ef e5       	ldi	r30, 0x5F	; 95
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	8f 77       	andi	r24, 0x7F	; 127
    1388:	8c 93       	st	X, r24
							}
				 Local_enuErrorstate = ES_OK;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	89 83       	std	Y+1, r24	; 0x01
			}

		return Local_enuErrorstate;
    138e:	89 81       	ldd	r24, Y+1	; 0x01


}
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <EXTI_CallBack>:

ES_t  EXTI_CallBack(void (*Copy_fun_ptr) (void),u8 Copy_u8EXTI_ID ){
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <EXTI_CallBack+0x6>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <EXTI_CallBack+0x8>
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <EXTI_CallBack+0xa>
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	9b 83       	std	Y+3, r25	; 0x03
    13aa:	8a 83       	std	Y+2, r24	; 0x02
    13ac:	6c 83       	std	Y+4, r22	; 0x04

	ES_t Local_enuErrorstate = ES_NOK;
    13ae:	19 82       	std	Y+1, r1	; 0x01


	if (Copy_fun_ptr != NULL && Copy_u8EXTI_ID <3)
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	9b 81       	ldd	r25, Y+3	; 0x03
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	61 f1       	breq	.+88     	; 0x1410 <EXTI_CallBack+0x76>
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	83 30       	cpi	r24, 0x03	; 3
    13bc:	48 f5       	brcc	.+82     	; 0x1410 <EXTI_CallBack+0x76>
		{
		switch(Copy_u8EXTI_ID){
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	3e 83       	std	Y+6, r19	; 0x06
    13c6:	2d 83       	std	Y+5, r18	; 0x05
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	91 05       	cpc	r25, r1
    13d0:	81 f0       	breq	.+32     	; 0x13f2 <EXTI_CallBack+0x58>
    13d2:	2d 81       	ldd	r18, Y+5	; 0x05
    13d4:	3e 81       	ldd	r19, Y+6	; 0x06
    13d6:	22 30       	cpi	r18, 0x02	; 2
    13d8:	31 05       	cpc	r19, r1
    13da:	91 f0       	breq	.+36     	; 0x1400 <EXTI_CallBack+0x66>
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	a1 f4       	brne	.+40     	; 0x140c <EXTI_CallBack+0x72>
		case INT0:
		      pfunINTFun0=Copy_fun_ptr;
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	9b 81       	ldd	r25, Y+3	; 0x03
    13e8:	90 93 7d 01 	sts	0x017D, r25
    13ec:	80 93 7c 01 	sts	0x017C, r24
    13f0:	0d c0       	rjmp	.+26     	; 0x140c <EXTI_CallBack+0x72>
		      break;
		case INT1:
				 pfunINTFun1=Copy_fun_ptr;
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	9b 81       	ldd	r25, Y+3	; 0x03
    13f6:	90 93 7f 01 	sts	0x017F, r25
    13fa:	80 93 7e 01 	sts	0x017E, r24
    13fe:	06 c0       	rjmp	.+12     	; 0x140c <EXTI_CallBack+0x72>
				 break;
		case INT2:
			 pfunINTFun2=Copy_fun_ptr;
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	9b 81       	ldd	r25, Y+3	; 0x03
    1404:	90 93 81 01 	sts	0x0181, r25
    1408:	80 93 80 01 	sts	0x0180, r24
		     break;

		}
		      Local_enuErrorstate = ES_OK;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01

		}

			return Local_enuErrorstate;
    1410:	89 81       	ldd	r24, Y+1	; 0x01


}
    1412:	26 96       	adiw	r28, 0x06	; 6
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <__vector_1>:


ISR(VECT_INT0){
    1424:	1f 92       	push	r1
    1426:	0f 92       	push	r0
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	0f 92       	push	r0
    142c:	11 24       	eor	r1, r1
    142e:	2f 93       	push	r18
    1430:	3f 93       	push	r19
    1432:	4f 93       	push	r20
    1434:	5f 93       	push	r21
    1436:	6f 93       	push	r22
    1438:	7f 93       	push	r23
    143a:	8f 93       	push	r24
    143c:	9f 93       	push	r25
    143e:	af 93       	push	r26
    1440:	bf 93       	push	r27
    1442:	ef 93       	push	r30
    1444:	ff 93       	push	r31
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
	if(pfunINTFun0!=NULL){
    144e:	80 91 7c 01 	lds	r24, 0x017C
    1452:	90 91 7d 01 	lds	r25, 0x017D
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	29 f0       	breq	.+10     	; 0x1464 <__vector_1+0x40>
		pfunINTFun0();
    145a:	e0 91 7c 01 	lds	r30, 0x017C
    145e:	f0 91 7d 01 	lds	r31, 0x017D
    1462:	09 95       	icall
	}

}
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	ff 91       	pop	r31
    146a:	ef 91       	pop	r30
    146c:	bf 91       	pop	r27
    146e:	af 91       	pop	r26
    1470:	9f 91       	pop	r25
    1472:	8f 91       	pop	r24
    1474:	7f 91       	pop	r23
    1476:	6f 91       	pop	r22
    1478:	5f 91       	pop	r21
    147a:	4f 91       	pop	r20
    147c:	3f 91       	pop	r19
    147e:	2f 91       	pop	r18
    1480:	0f 90       	pop	r0
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	0f 90       	pop	r0
    1486:	1f 90       	pop	r1
    1488:	18 95       	reti

0000148a <__vector_2>:


ISR(VECT_INT1){
    148a:	1f 92       	push	r1
    148c:	0f 92       	push	r0
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	0f 92       	push	r0
    1492:	11 24       	eor	r1, r1
    1494:	2f 93       	push	r18
    1496:	3f 93       	push	r19
    1498:	4f 93       	push	r20
    149a:	5f 93       	push	r21
    149c:	6f 93       	push	r22
    149e:	7f 93       	push	r23
    14a0:	8f 93       	push	r24
    14a2:	9f 93       	push	r25
    14a4:	af 93       	push	r26
    14a6:	bf 93       	push	r27
    14a8:	ef 93       	push	r30
    14aa:	ff 93       	push	r31
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
	if(pfunINTFun1!=NULL){
    14b4:	80 91 7e 01 	lds	r24, 0x017E
    14b8:	90 91 7f 01 	lds	r25, 0x017F
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	29 f0       	breq	.+10     	; 0x14ca <__vector_2+0x40>
		pfunINTFun1();
    14c0:	e0 91 7e 01 	lds	r30, 0x017E
    14c4:	f0 91 7f 01 	lds	r31, 0x017F
    14c8:	09 95       	icall
	}

}
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	ff 91       	pop	r31
    14d0:	ef 91       	pop	r30
    14d2:	bf 91       	pop	r27
    14d4:	af 91       	pop	r26
    14d6:	9f 91       	pop	r25
    14d8:	8f 91       	pop	r24
    14da:	7f 91       	pop	r23
    14dc:	6f 91       	pop	r22
    14de:	5f 91       	pop	r21
    14e0:	4f 91       	pop	r20
    14e2:	3f 91       	pop	r19
    14e4:	2f 91       	pop	r18
    14e6:	0f 90       	pop	r0
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	0f 90       	pop	r0
    14ec:	1f 90       	pop	r1
    14ee:	18 95       	reti

000014f0 <__vector_3>:


ISR(VECT_INT2){
    14f0:	1f 92       	push	r1
    14f2:	0f 92       	push	r0
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	0f 92       	push	r0
    14f8:	11 24       	eor	r1, r1
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	4f 93       	push	r20
    1500:	5f 93       	push	r21
    1502:	6f 93       	push	r22
    1504:	7f 93       	push	r23
    1506:	8f 93       	push	r24
    1508:	9f 93       	push	r25
    150a:	af 93       	push	r26
    150c:	bf 93       	push	r27
    150e:	ef 93       	push	r30
    1510:	ff 93       	push	r31
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
	if(pfunINTFun2!=NULL){
    151a:	80 91 80 01 	lds	r24, 0x0180
    151e:	90 91 81 01 	lds	r25, 0x0181
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	29 f0       	breq	.+10     	; 0x1530 <__vector_3+0x40>
		pfunINTFun2();
    1526:	e0 91 80 01 	lds	r30, 0x0180
    152a:	f0 91 81 01 	lds	r31, 0x0181
    152e:	09 95       	icall
	}

}
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	ff 91       	pop	r31
    1536:	ef 91       	pop	r30
    1538:	bf 91       	pop	r27
    153a:	af 91       	pop	r26
    153c:	9f 91       	pop	r25
    153e:	8f 91       	pop	r24
    1540:	7f 91       	pop	r23
    1542:	6f 91       	pop	r22
    1544:	5f 91       	pop	r21
    1546:	4f 91       	pop	r20
    1548:	3f 91       	pop	r19
    154a:	2f 91       	pop	r18
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	0f 92       	push	r0
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1560:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    1562:	ea e3       	ldi	r30, 0x3A	; 58
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    156a:	e7 e3       	ldi	r30, 0x37	; 55
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	8f ef       	ldi	r24, 0xFF	; 255
    1570:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    1572:	e4 e3       	ldi	r30, 0x34	; 52
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	86 e9       	ldi	r24, 0x96	; 150
    1578:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    157a:	e1 e3       	ldi	r30, 0x31	; 49
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	82 e9       	ldi	r24, 0x92	; 146
    1580:	80 83       	st	Z, r24

	PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    1582:	eb e3       	ldi	r30, 0x3B	; 59
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	10 82       	st	Z, r1

	Local_enuErrorstate = ES_OK;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    158c:	89 81       	ldd	r24, Y+1	; 0x01
}
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	00 d0       	rcall	.+0      	; 0x159c <DIO_enuSetPortDirection+0x6>
    159c:	00 d0       	rcall	.+0      	; 0x159e <DIO_enuSetPortDirection+0x8>
    159e:	0f 92       	push	r0
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	8a 83       	std	Y+2, r24	; 0x02
    15a6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    15a8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	84 30       	cpi	r24, 0x04	; 4
    15ae:	a8 f5       	brcc	.+106    	; 0x161a <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3d 83       	std	Y+5, r19	; 0x05
    15b8:	2c 83       	std	Y+4, r18	; 0x04
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	91 05       	cpc	r25, r1
    15c2:	d1 f0       	breq	.+52     	; 0x15f8 <DIO_enuSetPortDirection+0x62>
    15c4:	2c 81       	ldd	r18, Y+4	; 0x04
    15c6:	3d 81       	ldd	r19, Y+5	; 0x05
    15c8:	22 30       	cpi	r18, 0x02	; 2
    15ca:	31 05       	cpc	r19, r1
    15cc:	2c f4       	brge	.+10     	; 0x15d8 <DIO_enuSetPortDirection+0x42>
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	9d 81       	ldd	r25, Y+5	; 0x05
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	61 f0       	breq	.+24     	; 0x15ee <DIO_enuSetPortDirection+0x58>
    15d6:	1e c0       	rjmp	.+60     	; 0x1614 <DIO_enuSetPortDirection+0x7e>
    15d8:	2c 81       	ldd	r18, Y+4	; 0x04
    15da:	3d 81       	ldd	r19, Y+5	; 0x05
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	81 f0       	breq	.+32     	; 0x1602 <DIO_enuSetPortDirection+0x6c>
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	9d 81       	ldd	r25, Y+5	; 0x05
    15e6:	83 30       	cpi	r24, 0x03	; 3
    15e8:	91 05       	cpc	r25, r1
    15ea:	81 f0       	breq	.+32     	; 0x160c <DIO_enuSetPortDirection+0x76>
    15ec:	13 c0       	rjmp	.+38     	; 0x1614 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    15ee:	ea e3       	ldi	r30, 0x3A	; 58
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	80 83       	st	Z, r24
    15f6:	0e c0       	rjmp	.+28     	; 0x1614 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    15f8:	e7 e3       	ldi	r30, 0x37	; 55
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	80 83       	st	Z, r24
    1600:	09 c0       	rjmp	.+18     	; 0x1614 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    1602:	e4 e3       	ldi	r30, 0x34	; 52
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	80 83       	st	Z, r24
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    160c:	e1 e3       	ldi	r30, 0x31	; 49
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	02 c0       	rjmp	.+4      	; 0x161e <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    161a:	83 e0       	ldi	r24, 0x03	; 3
    161c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    161e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <DIO_enuSetPortValue+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <DIO_enuSetPortValue+0x8>
    1638:	0f 92       	push	r0
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	8a 83       	std	Y+2, r24	; 0x02
    1640:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1642:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	84 30       	cpi	r24, 0x04	; 4
    1648:	a8 f5       	brcc	.+106    	; 0x16b4 <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3d 83       	std	Y+5, r19	; 0x05
    1652:	2c 83       	std	Y+4, r18	; 0x04
    1654:	8c 81       	ldd	r24, Y+4	; 0x04
    1656:	9d 81       	ldd	r25, Y+5	; 0x05
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	91 05       	cpc	r25, r1
    165c:	d1 f0       	breq	.+52     	; 0x1692 <DIO_enuSetPortValue+0x62>
    165e:	2c 81       	ldd	r18, Y+4	; 0x04
    1660:	3d 81       	ldd	r19, Y+5	; 0x05
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	2c f4       	brge	.+10     	; 0x1672 <DIO_enuSetPortValue+0x42>
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	9d 81       	ldd	r25, Y+5	; 0x05
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	61 f0       	breq	.+24     	; 0x1688 <DIO_enuSetPortValue+0x58>
    1670:	1e c0       	rjmp	.+60     	; 0x16ae <DIO_enuSetPortValue+0x7e>
    1672:	2c 81       	ldd	r18, Y+4	; 0x04
    1674:	3d 81       	ldd	r19, Y+5	; 0x05
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	81 f0       	breq	.+32     	; 0x169c <DIO_enuSetPortValue+0x6c>
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	9d 81       	ldd	r25, Y+5	; 0x05
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	91 05       	cpc	r25, r1
    1684:	81 f0       	breq	.+32     	; 0x16a6 <DIO_enuSetPortValue+0x76>
    1686:	13 c0       	rjmp	.+38     	; 0x16ae <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    1688:	eb e3       	ldi	r30, 0x3B	; 59
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	80 83       	st	Z, r24
    1690:	0e c0       	rjmp	.+28     	; 0x16ae <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    1692:	e8 e3       	ldi	r30, 0x38	; 56
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	80 83       	st	Z, r24
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    169c:	e5 e3       	ldi	r30, 0x35	; 53
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	80 83       	st	Z, r24
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    16a6:	e2 e3       	ldi	r30, 0x32	; 50
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	89 83       	std	Y+1, r24	; 0x01
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <DIO_enuTogPortValue+0x6>
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <DIO_enuTogPortValue+0x8>
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    16d8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	84 30       	cpi	r24, 0x04	; 4
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <DIO_enuTogPortValue+0x18>
    16e0:	41 c0       	rjmp	.+130    	; 0x1764 <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	3c 83       	std	Y+4, r19	; 0x04
    16ea:	2b 83       	std	Y+3, r18	; 0x03
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	9c 81       	ldd	r25, Y+4	; 0x04
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	91 05       	cpc	r25, r1
    16f4:	e9 f0       	breq	.+58     	; 0x1730 <DIO_enuTogPortValue+0x66>
    16f6:	2b 81       	ldd	r18, Y+3	; 0x03
    16f8:	3c 81       	ldd	r19, Y+4	; 0x04
    16fa:	22 30       	cpi	r18, 0x02	; 2
    16fc:	31 05       	cpc	r19, r1
    16fe:	2c f4       	brge	.+10     	; 0x170a <DIO_enuTogPortValue+0x40>
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	61 f0       	breq	.+24     	; 0x1720 <DIO_enuTogPortValue+0x56>
    1708:	2a c0       	rjmp	.+84     	; 0x175e <DIO_enuTogPortValue+0x94>
    170a:	2b 81       	ldd	r18, Y+3	; 0x03
    170c:	3c 81       	ldd	r19, Y+4	; 0x04
    170e:	22 30       	cpi	r18, 0x02	; 2
    1710:	31 05       	cpc	r19, r1
    1712:	b1 f0       	breq	.+44     	; 0x1740 <DIO_enuTogPortValue+0x76>
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	83 30       	cpi	r24, 0x03	; 3
    171a:	91 05       	cpc	r25, r1
    171c:	c9 f0       	breq	.+50     	; 0x1750 <DIO_enuTogPortValue+0x86>
    171e:	1f c0       	rjmp	.+62     	; 0x175e <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    1720:	ab e3       	ldi	r26, 0x3B	; 59
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	eb e3       	ldi	r30, 0x3B	; 59
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	80 95       	com	r24
    172c:	8c 93       	st	X, r24
    172e:	17 c0       	rjmp	.+46     	; 0x175e <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    1730:	a8 e3       	ldi	r26, 0x38	; 56
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e8 e3       	ldi	r30, 0x38	; 56
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	80 95       	com	r24
    173c:	8c 93       	st	X, r24
    173e:	0f c0       	rjmp	.+30     	; 0x175e <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    1740:	a5 e3       	ldi	r26, 0x35	; 53
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e5 e3       	ldi	r30, 0x35	; 53
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	80 95       	com	r24
    174c:	8c 93       	st	X, r24
    174e:	07 c0       	rjmp	.+14     	; 0x175e <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    1750:	a2 e3       	ldi	r26, 0x32	; 50
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e2 e3       	ldi	r30, 0x32	; 50
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	80 95       	com	r24
    175c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1764:	83 e0       	ldi	r24, 0x03	; 3
    1766:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1768:	89 81       	ldd	r24, Y+1	; 0x01
}
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <DIO_enuGetPortValue+0x6>
    177e:	00 d0       	rcall	.+0      	; 0x1780 <DIO_enuGetPortValue+0x8>
    1780:	00 d0       	rcall	.+0      	; 0x1782 <DIO_enuGetPortValue+0xa>
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	8a 83       	std	Y+2, r24	; 0x02
    1788:	7c 83       	std	Y+4, r23	; 0x04
    178a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    178c:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	09 f4       	brne	.+2      	; 0x1798 <DIO_enuGetPortValue+0x20>
    1796:	43 c0       	rjmp	.+134    	; 0x181e <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	84 30       	cpi	r24, 0x04	; 4
    179c:	e8 f5       	brcc	.+122    	; 0x1818 <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	3e 83       	std	Y+6, r19	; 0x06
    17a6:	2d 83       	std	Y+5, r18	; 0x05
    17a8:	8d 81       	ldd	r24, Y+5	; 0x05
    17aa:	9e 81       	ldd	r25, Y+6	; 0x06
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	91 05       	cpc	r25, r1
    17b0:	e1 f0       	breq	.+56     	; 0x17ea <DIO_enuGetPortValue+0x72>
    17b2:	2d 81       	ldd	r18, Y+5	; 0x05
    17b4:	3e 81       	ldd	r19, Y+6	; 0x06
    17b6:	22 30       	cpi	r18, 0x02	; 2
    17b8:	31 05       	cpc	r19, r1
    17ba:	2c f4       	brge	.+10     	; 0x17c6 <DIO_enuGetPortValue+0x4e>
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	61 f0       	breq	.+24     	; 0x17dc <DIO_enuGetPortValue+0x64>
    17c4:	26 c0       	rjmp	.+76     	; 0x1812 <DIO_enuGetPortValue+0x9a>
    17c6:	2d 81       	ldd	r18, Y+5	; 0x05
    17c8:	3e 81       	ldd	r19, Y+6	; 0x06
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	a1 f0       	breq	.+40     	; 0x17f8 <DIO_enuGetPortValue+0x80>
    17d0:	8d 81       	ldd	r24, Y+5	; 0x05
    17d2:	9e 81       	ldd	r25, Y+6	; 0x06
    17d4:	83 30       	cpi	r24, 0x03	; 3
    17d6:	91 05       	cpc	r25, r1
    17d8:	b1 f0       	breq	.+44     	; 0x1806 <DIO_enuGetPortValue+0x8e>
    17da:	1b c0       	rjmp	.+54     	; 0x1812 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    17dc:	e9 e3       	ldi	r30, 0x39	; 57
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	eb 81       	ldd	r30, Y+3	; 0x03
    17e4:	fc 81       	ldd	r31, Y+4	; 0x04
    17e6:	80 83       	st	Z, r24
    17e8:	14 c0       	rjmp	.+40     	; 0x1812 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    17ea:	e6 e3       	ldi	r30, 0x36	; 54
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	eb 81       	ldd	r30, Y+3	; 0x03
    17f2:	fc 81       	ldd	r31, Y+4	; 0x04
    17f4:	80 83       	st	Z, r24
    17f6:	0d c0       	rjmp	.+26     	; 0x1812 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    17f8:	e3 e3       	ldi	r30, 0x33	; 51
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1800:	fc 81       	ldd	r31, Y+4	; 0x04
    1802:	80 83       	st	Z, r24
    1804:	06 c0       	rjmp	.+12     	; 0x1812 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    1806:	e0 e3       	ldi	r30, 0x30	; 48
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	eb 81       	ldd	r30, Y+3	; 0x03
    180e:	fc 81       	ldd	r31, Y+4	; 0x04
    1810:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    1818:	83 e0       	ldi	r24, 0x03	; 3
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    181e:	82 e0       	ldi	r24, 0x02	; 2
    1820:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1822:	89 81       	ldd	r24, Y+1	; 0x01
}
    1824:	26 96       	adiw	r28, 0x06	; 6
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <DIO_enuSetPinDirection+0x6>
    183c:	00 d0       	rcall	.+0      	; 0x183e <DIO_enuSetPinDirection+0x8>
    183e:	00 d0       	rcall	.+0      	; 0x1840 <DIO_enuSetPinDirection+0xa>
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	8a 83       	std	Y+2, r24	; 0x02
    1846:	6b 83       	std	Y+3, r22	; 0x03
    1848:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    184a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	84 30       	cpi	r24, 0x04	; 4
    1850:	08 f0       	brcs	.+2      	; 0x1854 <DIO_enuSetPinDirection+0x1e>
    1852:	d1 c0       	rjmp	.+418    	; 0x19f6 <DIO_enuSetPinDirection+0x1c0>
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	88 30       	cpi	r24, 0x08	; 8
    1858:	08 f0       	brcs	.+2      	; 0x185c <DIO_enuSetPinDirection+0x26>
    185a:	cd c0       	rjmp	.+410    	; 0x19f6 <DIO_enuSetPinDirection+0x1c0>
    185c:	8c 81       	ldd	r24, Y+4	; 0x04
    185e:	82 30       	cpi	r24, 0x02	; 2
    1860:	08 f0       	brcs	.+2      	; 0x1864 <DIO_enuSetPinDirection+0x2e>
    1862:	c9 c0       	rjmp	.+402    	; 0x19f6 <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	3e 83       	std	Y+6, r19	; 0x06
    186c:	2d 83       	std	Y+5, r18	; 0x05
    186e:	6d 81       	ldd	r22, Y+5	; 0x05
    1870:	7e 81       	ldd	r23, Y+6	; 0x06
    1872:	61 30       	cpi	r22, 0x01	; 1
    1874:	71 05       	cpc	r23, r1
    1876:	09 f4       	brne	.+2      	; 0x187a <DIO_enuSetPinDirection+0x44>
    1878:	41 c0       	rjmp	.+130    	; 0x18fc <DIO_enuSetPinDirection+0xc6>
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	9e 81       	ldd	r25, Y+6	; 0x06
    187e:	82 30       	cpi	r24, 0x02	; 2
    1880:	91 05       	cpc	r25, r1
    1882:	34 f4       	brge	.+12     	; 0x1890 <DIO_enuSetPinDirection+0x5a>
    1884:	2d 81       	ldd	r18, Y+5	; 0x05
    1886:	3e 81       	ldd	r19, Y+6	; 0x06
    1888:	21 15       	cp	r18, r1
    188a:	31 05       	cpc	r19, r1
    188c:	71 f0       	breq	.+28     	; 0x18aa <DIO_enuSetPinDirection+0x74>
    188e:	b0 c0       	rjmp	.+352    	; 0x19f0 <DIO_enuSetPinDirection+0x1ba>
    1890:	6d 81       	ldd	r22, Y+5	; 0x05
    1892:	7e 81       	ldd	r23, Y+6	; 0x06
    1894:	62 30       	cpi	r22, 0x02	; 2
    1896:	71 05       	cpc	r23, r1
    1898:	09 f4       	brne	.+2      	; 0x189c <DIO_enuSetPinDirection+0x66>
    189a:	59 c0       	rjmp	.+178    	; 0x194e <DIO_enuSetPinDirection+0x118>
    189c:	8d 81       	ldd	r24, Y+5	; 0x05
    189e:	9e 81       	ldd	r25, Y+6	; 0x06
    18a0:	83 30       	cpi	r24, 0x03	; 3
    18a2:	91 05       	cpc	r25, r1
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <DIO_enuSetPinDirection+0x72>
    18a6:	7c c0       	rjmp	.+248    	; 0x19a0 <DIO_enuSetPinDirection+0x16a>
    18a8:	a3 c0       	rjmp	.+326    	; 0x19f0 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    18aa:	aa e3       	ldi	r26, 0x3A	; 58
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	ea e3       	ldi	r30, 0x3A	; 58
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <DIO_enuSetPinDirection+0x90>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	2a 95       	dec	r18
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <DIO_enuSetPinDirection+0x8c>
    18ca:	80 95       	com	r24
    18cc:	84 23       	and	r24, r20
    18ce:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    18d0:	aa e3       	ldi	r26, 0x3A	; 58
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	ea e3       	ldi	r30, 0x3A	; 58
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	b9 01       	movw	r22, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_enuSetPinDirection+0xba>
    18ec:	66 0f       	add	r22, r22
    18ee:	77 1f       	adc	r23, r23
    18f0:	8a 95       	dec	r24
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <DIO_enuSetPinDirection+0xb6>
    18f4:	cb 01       	movw	r24, r22
    18f6:	84 2b       	or	r24, r20
    18f8:	8c 93       	st	X, r24
    18fa:	7a c0       	rjmp	.+244    	; 0x19f0 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    18fc:	a7 e3       	ldi	r26, 0x37	; 55
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e7 e3       	ldi	r30, 0x37	; 55
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	48 2f       	mov	r20, r24
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <DIO_enuSetPinDirection+0xe2>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	2a 95       	dec	r18
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <DIO_enuSetPinDirection+0xde>
    191c:	80 95       	com	r24
    191e:	84 23       	and	r24, r20
    1920:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    1922:	a7 e3       	ldi	r26, 0x37	; 55
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e7 e3       	ldi	r30, 0x37	; 55
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8c 81       	ldd	r24, Y+4	; 0x04
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	88 2f       	mov	r24, r24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	b9 01       	movw	r22, r18
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <DIO_enuSetPinDirection+0x10c>
    193e:	66 0f       	add	r22, r22
    1940:	77 1f       	adc	r23, r23
    1942:	8a 95       	dec	r24
    1944:	e2 f7       	brpl	.-8      	; 0x193e <DIO_enuSetPinDirection+0x108>
    1946:	cb 01       	movw	r24, r22
    1948:	84 2b       	or	r24, r20
    194a:	8c 93       	st	X, r24
    194c:	51 c0       	rjmp	.+162    	; 0x19f0 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    194e:	a4 e3       	ldi	r26, 0x34	; 52
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e4 e3       	ldi	r30, 0x34	; 52
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	48 2f       	mov	r20, r24
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 c0       	rjmp	.+4      	; 0x196a <DIO_enuSetPinDirection+0x134>
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	2a 95       	dec	r18
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <DIO_enuSetPinDirection+0x130>
    196e:	80 95       	com	r24
    1970:	84 23       	and	r24, r20
    1972:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    1974:	a4 e3       	ldi	r26, 0x34	; 52
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e4 e3       	ldi	r30, 0x34	; 52
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	48 2f       	mov	r20, r24
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	88 2f       	mov	r24, r24
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	b9 01       	movw	r22, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <DIO_enuSetPinDirection+0x15e>
    1990:	66 0f       	add	r22, r22
    1992:	77 1f       	adc	r23, r23
    1994:	8a 95       	dec	r24
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <DIO_enuSetPinDirection+0x15a>
    1998:	cb 01       	movw	r24, r22
    199a:	84 2b       	or	r24, r20
    199c:	8c 93       	st	X, r24
    199e:	28 c0       	rjmp	.+80     	; 0x19f0 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    19a0:	a1 e3       	ldi	r26, 0x31	; 49
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e1 e3       	ldi	r30, 0x31	; 49
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	48 2f       	mov	r20, r24
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <DIO_enuSetPinDirection+0x186>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	2a 95       	dec	r18
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <DIO_enuSetPinDirection+0x182>
    19c0:	80 95       	com	r24
    19c2:	84 23       	and	r24, r20
    19c4:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    19c6:	a1 e3       	ldi	r26, 0x31	; 49
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e1 e3       	ldi	r30, 0x31	; 49
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	b9 01       	movw	r22, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <DIO_enuSetPinDirection+0x1b0>
    19e2:	66 0f       	add	r22, r22
    19e4:	77 1f       	adc	r23, r23
    19e6:	8a 95       	dec	r24
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <DIO_enuSetPinDirection+0x1ac>
    19ea:	cb 01       	movw	r24, r22
    19ec:	84 2b       	or	r24, r20
    19ee:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    19f6:	83 e0       	ldi	r24, 0x03	; 3
    19f8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fc:	26 96       	adiw	r28, 0x06	; 6
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <DIO_enuSetPinValue+0x6>
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <DIO_enuSetPinValue+0x8>
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <DIO_enuSetPinValue+0xa>
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	8a 83       	std	Y+2, r24	; 0x02
    1a1e:	6b 83       	std	Y+3, r22	; 0x03
    1a20:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1a22:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	84 30       	cpi	r24, 0x04	; 4
    1a28:	08 f0       	brcs	.+2      	; 0x1a2c <DIO_enuSetPinValue+0x1e>
    1a2a:	d1 c0       	rjmp	.+418    	; 0x1bce <DIO_enuSetPinValue+0x1c0>
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	88 30       	cpi	r24, 0x08	; 8
    1a30:	08 f0       	brcs	.+2      	; 0x1a34 <DIO_enuSetPinValue+0x26>
    1a32:	cd c0       	rjmp	.+410    	; 0x1bce <DIO_enuSetPinValue+0x1c0>
    1a34:	8c 81       	ldd	r24, Y+4	; 0x04
    1a36:	82 30       	cpi	r24, 0x02	; 2
    1a38:	08 f0       	brcs	.+2      	; 0x1a3c <DIO_enuSetPinValue+0x2e>
    1a3a:	c9 c0       	rjmp	.+402    	; 0x1bce <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	3e 83       	std	Y+6, r19	; 0x06
    1a44:	2d 83       	std	Y+5, r18	; 0x05
    1a46:	6d 81       	ldd	r22, Y+5	; 0x05
    1a48:	7e 81       	ldd	r23, Y+6	; 0x06
    1a4a:	61 30       	cpi	r22, 0x01	; 1
    1a4c:	71 05       	cpc	r23, r1
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <DIO_enuSetPinValue+0x44>
    1a50:	41 c0       	rjmp	.+130    	; 0x1ad4 <DIO_enuSetPinValue+0xc6>
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	82 30       	cpi	r24, 0x02	; 2
    1a58:	91 05       	cpc	r25, r1
    1a5a:	34 f4       	brge	.+12     	; 0x1a68 <DIO_enuSetPinValue+0x5a>
    1a5c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a5e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a60:	21 15       	cp	r18, r1
    1a62:	31 05       	cpc	r19, r1
    1a64:	71 f0       	breq	.+28     	; 0x1a82 <DIO_enuSetPinValue+0x74>
    1a66:	b0 c0       	rjmp	.+352    	; 0x1bc8 <DIO_enuSetPinValue+0x1ba>
    1a68:	6d 81       	ldd	r22, Y+5	; 0x05
    1a6a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a6c:	62 30       	cpi	r22, 0x02	; 2
    1a6e:	71 05       	cpc	r23, r1
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <DIO_enuSetPinValue+0x66>
    1a72:	59 c0       	rjmp	.+178    	; 0x1b26 <DIO_enuSetPinValue+0x118>
    1a74:	8d 81       	ldd	r24, Y+5	; 0x05
    1a76:	9e 81       	ldd	r25, Y+6	; 0x06
    1a78:	83 30       	cpi	r24, 0x03	; 3
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <DIO_enuSetPinValue+0x72>
    1a7e:	7c c0       	rjmp	.+248    	; 0x1b78 <DIO_enuSetPinValue+0x16a>
    1a80:	a3 c0       	rjmp	.+326    	; 0x1bc8 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1a82:	ab e3       	ldi	r26, 0x3B	; 59
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	eb e3       	ldi	r30, 0x3B	; 59
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	48 2f       	mov	r20, r24
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <DIO_enuSetPinValue+0x90>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	2a 95       	dec	r18
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <DIO_enuSetPinValue+0x8c>
    1aa2:	80 95       	com	r24
    1aa4:	84 23       	and	r24, r20
    1aa6:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    1aa8:	ab e3       	ldi	r26, 0x3B	; 59
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	eb e3       	ldi	r30, 0x3B	; 59
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	88 2f       	mov	r24, r24
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	b9 01       	movw	r22, r18
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <DIO_enuSetPinValue+0xba>
    1ac4:	66 0f       	add	r22, r22
    1ac6:	77 1f       	adc	r23, r23
    1ac8:	8a 95       	dec	r24
    1aca:	e2 f7       	brpl	.-8      	; 0x1ac4 <DIO_enuSetPinValue+0xb6>
    1acc:	cb 01       	movw	r24, r22
    1ace:	84 2b       	or	r24, r20
    1ad0:	8c 93       	st	X, r24
    1ad2:	7a c0       	rjmp	.+244    	; 0x1bc8 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1ad4:	a8 e3       	ldi	r26, 0x38	; 56
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e8 e3       	ldi	r30, 0x38	; 56
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	48 2f       	mov	r20, r24
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <DIO_enuSetPinValue+0xe2>
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	2a 95       	dec	r18
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <DIO_enuSetPinValue+0xde>
    1af4:	80 95       	com	r24
    1af6:	84 23       	and	r24, r20
    1af8:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    1afa:	a8 e3       	ldi	r26, 0x38	; 56
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e8 e3       	ldi	r30, 0x38	; 56
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	48 2f       	mov	r20, r24
    1b06:	8c 81       	ldd	r24, Y+4	; 0x04
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	88 2f       	mov	r24, r24
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	b9 01       	movw	r22, r18
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <DIO_enuSetPinValue+0x10c>
    1b16:	66 0f       	add	r22, r22
    1b18:	77 1f       	adc	r23, r23
    1b1a:	8a 95       	dec	r24
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <DIO_enuSetPinValue+0x108>
    1b1e:	cb 01       	movw	r24, r22
    1b20:	84 2b       	or	r24, r20
    1b22:	8c 93       	st	X, r24
    1b24:	51 c0       	rjmp	.+162    	; 0x1bc8 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1b26:	a5 e3       	ldi	r26, 0x35	; 53
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e5 e3       	ldi	r30, 0x35	; 53
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	48 2f       	mov	r20, r24
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <DIO_enuSetPinValue+0x134>
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	2a 95       	dec	r18
    1b44:	e2 f7       	brpl	.-8      	; 0x1b3e <DIO_enuSetPinValue+0x130>
    1b46:	80 95       	com	r24
    1b48:	84 23       	and	r24, r20
    1b4a:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    1b4c:	a5 e3       	ldi	r26, 0x35	; 53
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e5 e3       	ldi	r30, 0x35	; 53
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	48 2f       	mov	r20, r24
    1b58:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	88 2f       	mov	r24, r24
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	b9 01       	movw	r22, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <DIO_enuSetPinValue+0x15e>
    1b68:	66 0f       	add	r22, r22
    1b6a:	77 1f       	adc	r23, r23
    1b6c:	8a 95       	dec	r24
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <DIO_enuSetPinValue+0x15a>
    1b70:	cb 01       	movw	r24, r22
    1b72:	84 2b       	or	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	28 c0       	rjmp	.+80     	; 0x1bc8 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1b78:	a2 e3       	ldi	r26, 0x32	; 50
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e2 e3       	ldi	r30, 0x32	; 50
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <DIO_enuSetPinValue+0x186>
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	2a 95       	dec	r18
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <DIO_enuSetPinValue+0x182>
    1b98:	80 95       	com	r24
    1b9a:	84 23       	and	r24, r20
    1b9c:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    1b9e:	a2 e3       	ldi	r26, 0x32	; 50
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e2 e3       	ldi	r30, 0x32	; 50
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	48 2f       	mov	r20, r24
    1baa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	88 2f       	mov	r24, r24
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	b9 01       	movw	r22, r18
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <DIO_enuSetPinValue+0x1b0>
    1bba:	66 0f       	add	r22, r22
    1bbc:	77 1f       	adc	r23, r23
    1bbe:	8a 95       	dec	r24
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <DIO_enuSetPinValue+0x1ac>
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	84 2b       	or	r24, r20
    1bc6:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1bce:	83 e0       	ldi	r24, 0x03	; 3
    1bd0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd4:	26 96       	adiw	r28, 0x06	; 6
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <DIO_enuTogPin+0x6>
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <DIO_enuTogPin+0x8>
    1bee:	0f 92       	push	r0
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	8a 83       	std	Y+2, r24	; 0x02
    1bf6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1bf8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	84 30       	cpi	r24, 0x04	; 4
    1bfe:	08 f0       	brcs	.+2      	; 0x1c02 <DIO_enuTogPin+0x1c>
    1c00:	75 c0       	rjmp	.+234    	; 0x1cec <DIO_enuTogPin+0x106>
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	88 30       	cpi	r24, 0x08	; 8
    1c06:	08 f0       	brcs	.+2      	; 0x1c0a <DIO_enuTogPin+0x24>
    1c08:	71 c0       	rjmp	.+226    	; 0x1cec <DIO_enuTogPin+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	3d 83       	std	Y+5, r19	; 0x05
    1c12:	2c 83       	std	Y+4, r18	; 0x04
    1c14:	8c 81       	ldd	r24, Y+4	; 0x04
    1c16:	9d 81       	ldd	r25, Y+5	; 0x05
    1c18:	81 30       	cpi	r24, 0x01	; 1
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	49 f1       	breq	.+82     	; 0x1c70 <DIO_enuTogPin+0x8a>
    1c1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c20:	3d 81       	ldd	r19, Y+5	; 0x05
    1c22:	22 30       	cpi	r18, 0x02	; 2
    1c24:	31 05       	cpc	r19, r1
    1c26:	2c f4       	brge	.+10     	; 0x1c32 <DIO_enuTogPin+0x4c>
    1c28:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	61 f0       	breq	.+24     	; 0x1c48 <DIO_enuTogPin+0x62>
    1c30:	5a c0       	rjmp	.+180    	; 0x1ce6 <DIO_enuTogPin+0x100>
    1c32:	2c 81       	ldd	r18, Y+4	; 0x04
    1c34:	3d 81       	ldd	r19, Y+5	; 0x05
    1c36:	22 30       	cpi	r18, 0x02	; 2
    1c38:	31 05       	cpc	r19, r1
    1c3a:	71 f1       	breq	.+92     	; 0x1c98 <DIO_enuTogPin+0xb2>
    1c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c40:	83 30       	cpi	r24, 0x03	; 3
    1c42:	91 05       	cpc	r25, r1
    1c44:	e9 f1       	breq	.+122    	; 0x1cc0 <DIO_enuTogPin+0xda>
    1c46:	4f c0       	rjmp	.+158    	; 0x1ce6 <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1c48:	ab e3       	ldi	r26, 0x3B	; 59
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	eb e3       	ldi	r30, 0x3B	; 59
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	48 2f       	mov	r20, r24
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	02 2e       	mov	r0, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <DIO_enuTogPin+0x80>
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	0a 94       	dec	r0
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <DIO_enuTogPin+0x7c>
    1c6a:	84 27       	eor	r24, r20
    1c6c:	8c 93       	st	X, r24
    1c6e:	3b c0       	rjmp	.+118    	; 0x1ce6 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1c70:	a8 e3       	ldi	r26, 0x38	; 56
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e8 e3       	ldi	r30, 0x38	; 56
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	48 2f       	mov	r20, r24
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	02 2e       	mov	r0, r18
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <DIO_enuTogPin+0xa8>
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	0a 94       	dec	r0
    1c90:	e2 f7       	brpl	.-8      	; 0x1c8a <DIO_enuTogPin+0xa4>
    1c92:	84 27       	eor	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	27 c0       	rjmp	.+78     	; 0x1ce6 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1c98:	a5 e3       	ldi	r26, 0x35	; 53
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e5 e3       	ldi	r30, 0x35	; 53
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 2e       	mov	r0, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <DIO_enuTogPin+0xd0>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	0a 94       	dec	r0
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <DIO_enuTogPin+0xcc>
    1cba:	84 27       	eor	r24, r20
    1cbc:	8c 93       	st	X, r24
    1cbe:	13 c0       	rjmp	.+38     	; 0x1ce6 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1cc0:	a2 e3       	ldi	r26, 0x32	; 50
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e2 e3       	ldi	r30, 0x32	; 50
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	48 2f       	mov	r20, r24
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	02 2e       	mov	r0, r18
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <DIO_enuTogPin+0xf8>
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	0a 94       	dec	r0
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <DIO_enuTogPin+0xf4>
    1ce2:	84 27       	eor	r24, r20
    1ce4:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1cec:	83 e0       	ldi	r24, 0x03	; 3
    1cee:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	27 97       	sbiw	r28, 0x07	; 7
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	8a 83       	std	Y+2, r24	; 0x02
    1d18:	6b 83       	std	Y+3, r22	; 0x03
    1d1a:	5d 83       	std	Y+5, r21	; 0x05
    1d1c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1d1e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    1d20:	8c 81       	ldd	r24, Y+4	; 0x04
    1d22:	9d 81       	ldd	r25, Y+5	; 0x05
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <DIO_enuGetPinValue+0x28>
    1d28:	7e c0       	rjmp	.+252    	; 0x1e26 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	84 30       	cpi	r24, 0x04	; 4
    1d2e:	08 f0       	brcs	.+2      	; 0x1d32 <DIO_enuGetPinValue+0x30>
    1d30:	77 c0       	rjmp	.+238    	; 0x1e20 <DIO_enuGetPinValue+0x11e>
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	88 30       	cpi	r24, 0x08	; 8
    1d36:	08 f0       	brcs	.+2      	; 0x1d3a <DIO_enuGetPinValue+0x38>
    1d38:	73 c0       	rjmp	.+230    	; 0x1e20 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	3f 83       	std	Y+7, r19	; 0x07
    1d42:	2e 83       	std	Y+6, r18	; 0x06
    1d44:	4e 81       	ldd	r20, Y+6	; 0x06
    1d46:	5f 81       	ldd	r21, Y+7	; 0x07
    1d48:	41 30       	cpi	r20, 0x01	; 1
    1d4a:	51 05       	cpc	r21, r1
    1d4c:	59 f1       	breq	.+86     	; 0x1da4 <DIO_enuGetPinValue+0xa2>
    1d4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d50:	9f 81       	ldd	r25, Y+7	; 0x07
    1d52:	82 30       	cpi	r24, 0x02	; 2
    1d54:	91 05       	cpc	r25, r1
    1d56:	34 f4       	brge	.+12     	; 0x1d64 <DIO_enuGetPinValue+0x62>
    1d58:	2e 81       	ldd	r18, Y+6	; 0x06
    1d5a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d5c:	21 15       	cp	r18, r1
    1d5e:	31 05       	cpc	r19, r1
    1d60:	69 f0       	breq	.+26     	; 0x1d7c <DIO_enuGetPinValue+0x7a>
    1d62:	5b c0       	rjmp	.+182    	; 0x1e1a <DIO_enuGetPinValue+0x118>
    1d64:	4e 81       	ldd	r20, Y+6	; 0x06
    1d66:	5f 81       	ldd	r21, Y+7	; 0x07
    1d68:	42 30       	cpi	r20, 0x02	; 2
    1d6a:	51 05       	cpc	r21, r1
    1d6c:	79 f1       	breq	.+94     	; 0x1dcc <DIO_enuGetPinValue+0xca>
    1d6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d70:	9f 81       	ldd	r25, Y+7	; 0x07
    1d72:	83 30       	cpi	r24, 0x03	; 3
    1d74:	91 05       	cpc	r25, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <DIO_enuGetPinValue+0x78>
    1d78:	3d c0       	rjmp	.+122    	; 0x1df4 <DIO_enuGetPinValue+0xf2>
    1d7a:	4f c0       	rjmp	.+158    	; 0x1e1a <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    1d7c:	e9 e3       	ldi	r30, 0x39	; 57
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	88 2f       	mov	r24, r24
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	a9 01       	movw	r20, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_enuGetPinValue+0x92>
    1d90:	55 95       	asr	r21
    1d92:	47 95       	ror	r20
    1d94:	8a 95       	dec	r24
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <DIO_enuGetPinValue+0x8e>
    1d98:	ca 01       	movw	r24, r20
    1d9a:	81 70       	andi	r24, 0x01	; 1
    1d9c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d9e:	fd 81       	ldd	r31, Y+5	; 0x05
    1da0:	80 83       	st	Z, r24
    1da2:	3b c0       	rjmp	.+118    	; 0x1e1a <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    1da4:	e6 e3       	ldi	r30, 0x36	; 54
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	88 2f       	mov	r24, r24
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	a9 01       	movw	r20, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <DIO_enuGetPinValue+0xba>
    1db8:	55 95       	asr	r21
    1dba:	47 95       	ror	r20
    1dbc:	8a 95       	dec	r24
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <DIO_enuGetPinValue+0xb6>
    1dc0:	ca 01       	movw	r24, r20
    1dc2:	81 70       	andi	r24, 0x01	; 1
    1dc4:	ec 81       	ldd	r30, Y+4	; 0x04
    1dc6:	fd 81       	ldd	r31, Y+5	; 0x05
    1dc8:	80 83       	st	Z, r24
    1dca:	27 c0       	rjmp	.+78     	; 0x1e1a <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    1dcc:	e3 e3       	ldi	r30, 0x33	; 51
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a9 01       	movw	r20, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <DIO_enuGetPinValue+0xe2>
    1de0:	55 95       	asr	r21
    1de2:	47 95       	ror	r20
    1de4:	8a 95       	dec	r24
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <DIO_enuGetPinValue+0xde>
    1de8:	ca 01       	movw	r24, r20
    1dea:	81 70       	andi	r24, 0x01	; 1
    1dec:	ec 81       	ldd	r30, Y+4	; 0x04
    1dee:	fd 81       	ldd	r31, Y+5	; 0x05
    1df0:	80 83       	st	Z, r24
    1df2:	13 c0       	rjmp	.+38     	; 0x1e1a <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    1df4:	e0 e3       	ldi	r30, 0x30	; 48
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	88 2f       	mov	r24, r24
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a9 01       	movw	r20, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <DIO_enuGetPinValue+0x10a>
    1e08:	55 95       	asr	r21
    1e0a:	47 95       	ror	r20
    1e0c:	8a 95       	dec	r24
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <DIO_enuGetPinValue+0x106>
    1e10:	ca 01       	movw	r24, r20
    1e12:	81 70       	andi	r24, 0x01	; 1
    1e14:	ec 81       	ldd	r30, Y+4	; 0x04
    1e16:	fd 81       	ldd	r31, Y+5	; 0x05
    1e18:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	05 c0       	rjmp	.+10     	; 0x1e2a <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    1e20:	83 e0       	ldi	r24, 0x03	; 3
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    1e26:	82 e0       	ldi	r24, 0x02	; 2
    1e28:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e2c:	27 96       	adiw	r28, 0x07	; 7
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <TH_enuInit>:
#include "../../LIB/stdTypes.h"
#include "../../MCAL/DIO/DIO_int.h"

#include "TH_config.h"
#include "TH_priv.h"
ES_t TH_enuInit(){
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	0f 92       	push	r0
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1e48:	19 82       	std	Y+1, r1	; 0x01
#if positive_pin_channel <=ADC7 && negative_pin_channel==NOT_CONNECTED
     DIO_enuSetPinDirection(DIO_u8PORTA,positive_pin_channel,DIO_u8INPUT);
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	40 e0       	ldi	r20, 0x00	; 0
    1e50:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_enuSetPinDirection>
     Local_enuErrorstate = ES_OK;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	89 83       	std	Y+1, r24	; 0x01
     DIO_enuSetPinDirection(DIO_u8PORTA,positive_pin_channel,DIO_u8INPUT);
     DIO_enuSetPinDirection(DIO_u8PORTA,negative_pin_channel,DIO_u8INPUT);
         Local_enuErrorstate = ES_OK;
#error " ERROR "
#endif
			return Local_enuErrorstate;
    1e58:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <TH_enuGetTem>:
ES_t TH_enuGetTem(u16 ADC_read,s32* temperature){
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <TH_enuGetTem+0x6>
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <TH_enuGetTem+0x8>
    1e6a:	0f 92       	push	r0
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	9b 83       	std	Y+3, r25	; 0x03
    1e72:	8a 83       	std	Y+2, r24	; 0x02
    1e74:	7d 83       	std	Y+5, r23	; 0x05
    1e76:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1e78:	19 82       	std	Y+1, r1	; 0x01
	*temperature=(ADC_read*4.88)/10.0;
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7e:	cc 01       	movw	r24, r24
    1e80:	a0 e0       	ldi	r26, 0x00	; 0
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	bc 01       	movw	r22, r24
    1e86:	cd 01       	movw	r24, r26
    1e88:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	26 ef       	ldi	r18, 0xF6	; 246
    1e96:	38 e2       	ldi	r19, 0x28	; 40
    1e98:	4c e9       	ldi	r20, 0x9C	; 156
    1e9a:	50 e4       	ldi	r21, 0x40	; 64
    1e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	bc 01       	movw	r22, r24
    1ea6:	cd 01       	movw	r24, r26
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e2       	ldi	r20, 0x20	; 32
    1eae:	51 e4       	ldi	r21, 0x41	; 65
    1eb0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	bc 01       	movw	r22, r24
    1eba:	cd 01       	movw	r24, r26
    1ebc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ec6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ec8:	80 83       	st	Z, r24
    1eca:	91 83       	std	Z+1, r25	; 0x01
    1ecc:	a2 83       	std	Z+2, r26	; 0x02
    1ece:	b3 83       	std	Z+3, r27	; 0x03

				return Local_enuErrorstate;
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	e9 97       	sbiw	r28, 0x39	; 57
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1ef6:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	62 e0       	ldi	r22, 0x02	; 2
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	63 e0       	ldi	r22, 0x03	; 3
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    1f16:	82 e0       	ldi	r24, 0x02	; 2
    1f18:	67 e0       	ldi	r22, 0x07	; 7
    1f1a:	41 e0       	ldi	r20, 0x01	; 1
    1f1c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	66 e0       	ldi	r22, 0x06	; 6
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	65 e0       	ldi	r22, 0x05	; 5
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1f34:	82 e0       	ldi	r24, 0x02	; 2
    1f36:	64 e0       	ldi	r22, 0x04	; 4
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_enuSetPinDirection>
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	ac e0       	ldi	r26, 0x0C	; 12
    1f44:	b2 e4       	ldi	r27, 0x42	; 66
    1f46:	8d ab       	std	Y+53, r24	; 0x35
    1f48:	9e ab       	std	Y+54, r25	; 0x36
    1f4a:	af ab       	std	Y+55, r26	; 0x37
    1f4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f50:	7e a9       	ldd	r23, Y+54	; 0x36
    1f52:	8f a9       	ldd	r24, Y+55	; 0x37
    1f54:	98 ad       	ldd	r25, Y+56	; 0x38
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	4a e7       	ldi	r20, 0x7A	; 122
    1f5c:	53 e4       	ldi	r21, 0x43	; 67
    1f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	89 ab       	std	Y+49, r24	; 0x31
    1f68:	9a ab       	std	Y+50, r25	; 0x32
    1f6a:	ab ab       	std	Y+51, r26	; 0x33
    1f6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f70:	7a a9       	ldd	r23, Y+50	; 0x32
    1f72:	8b a9       	ldd	r24, Y+51	; 0x33
    1f74:	9c a9       	ldd	r25, Y+52	; 0x34
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e8       	ldi	r20, 0x80	; 128
    1f7c:	5f e3       	ldi	r21, 0x3F	; 63
    1f7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f82:	88 23       	and	r24, r24
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <LCD_enuInit+0xae>
		__ticks = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	98 ab       	std	Y+48, r25	; 0x30
    1f8c:	8f a7       	std	Y+47, r24	; 0x2f
    1f8e:	3f c0       	rjmp	.+126    	; 0x200e <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    1f90:	69 a9       	ldd	r22, Y+49	; 0x31
    1f92:	7a a9       	ldd	r23, Y+50	; 0x32
    1f94:	8b a9       	ldd	r24, Y+51	; 0x33
    1f96:	9c a9       	ldd	r25, Y+52	; 0x34
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	3f ef       	ldi	r19, 0xFF	; 255
    1f9c:	4f e7       	ldi	r20, 0x7F	; 127
    1f9e:	57 e4       	ldi	r21, 0x47	; 71
    1fa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fa4:	18 16       	cp	r1, r24
    1fa6:	4c f5       	brge	.+82     	; 0x1ffa <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa8:	6d a9       	ldd	r22, Y+53	; 0x35
    1faa:	7e a9       	ldd	r23, Y+54	; 0x36
    1fac:	8f a9       	ldd	r24, Y+55	; 0x37
    1fae:	98 ad       	ldd	r25, Y+56	; 0x38
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e2       	ldi	r20, 0x20	; 32
    1fb6:	51 e4       	ldi	r21, 0x41	; 65
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	98 ab       	std	Y+48, r25	; 0x30
    1fce:	8f a7       	std	Y+47, r24	; 0x2f
    1fd0:	0f c0       	rjmp	.+30     	; 0x1ff0 <LCD_enuInit+0x10e>
    1fd2:	89 e1       	ldi	r24, 0x19	; 25
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9e a7       	std	Y+46, r25	; 0x2e
    1fd8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fda:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fdc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <LCD_enuInit+0xfc>
    1fe2:	9e a7       	std	Y+46, r25	; 0x2e
    1fe4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	98 ab       	std	Y+48, r25	; 0x30
    1fee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <LCD_enuInit+0xf0>
    1ff8:	14 c0       	rjmp	.+40     	; 0x2022 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffa:	69 a9       	ldd	r22, Y+49	; 0x31
    1ffc:	7a a9       	ldd	r23, Y+50	; 0x32
    1ffe:	8b a9       	ldd	r24, Y+51	; 0x33
    2000:	9c a9       	ldd	r25, Y+52	; 0x34
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	98 ab       	std	Y+48, r25	; 0x30
    200c:	8f a7       	std	Y+47, r24	; 0x2f
    200e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2010:	98 a9       	ldd	r25, Y+48	; 0x30
    2012:	9c a7       	std	Y+44, r25	; 0x2c
    2014:	8b a7       	std	Y+43, r24	; 0x2b
    2016:	8b a5       	ldd	r24, Y+43	; 0x2b
    2018:	9c a5       	ldd	r25, Y+44	; 0x2c
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_enuInit+0x138>
    201e:	9c a7       	std	Y+44, r25	; 0x2c
    2020:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);

	//function set
	LCD_invidSendCommend(0x38);
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
    2022:	88 e2       	ldi	r24, 0x28	; 40
    2024:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <LCD_invidSendCommend>
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	a0 e8       	ldi	r26, 0x80	; 128
    202e:	bf e3       	ldi	r27, 0x3F	; 63
    2030:	8f a3       	std	Y+39, r24	; 0x27
    2032:	98 a7       	std	Y+40, r25	; 0x28
    2034:	a9 a7       	std	Y+41, r26	; 0x29
    2036:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2038:	6f a1       	ldd	r22, Y+39	; 0x27
    203a:	78 a5       	ldd	r23, Y+40	; 0x28
    203c:	89 a5       	ldd	r24, Y+41	; 0x29
    203e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	4a e7       	ldi	r20, 0x7A	; 122
    2046:	53 e4       	ldi	r21, 0x43	; 67
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	8b a3       	std	Y+35, r24	; 0x23
    2052:	9c a3       	std	Y+36, r25	; 0x24
    2054:	ad a3       	std	Y+37, r26	; 0x25
    2056:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2058:	6b a1       	ldd	r22, Y+35	; 0x23
    205a:	7c a1       	ldd	r23, Y+36	; 0x24
    205c:	8d a1       	ldd	r24, Y+37	; 0x25
    205e:	9e a1       	ldd	r25, Y+38	; 0x26
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e8       	ldi	r20, 0x80	; 128
    2066:	5f e3       	ldi	r21, 0x3F	; 63
    2068:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    206c:	88 23       	and	r24, r24
    206e:	2c f4       	brge	.+10     	; 0x207a <LCD_enuInit+0x198>
		__ticks = 1;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	9a a3       	std	Y+34, r25	; 0x22
    2076:	89 a3       	std	Y+33, r24	; 0x21
    2078:	3f c0       	rjmp	.+126    	; 0x20f8 <LCD_enuInit+0x216>
	else if (__tmp > 65535)
    207a:	6b a1       	ldd	r22, Y+35	; 0x23
    207c:	7c a1       	ldd	r23, Y+36	; 0x24
    207e:	8d a1       	ldd	r24, Y+37	; 0x25
    2080:	9e a1       	ldd	r25, Y+38	; 0x26
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	3f ef       	ldi	r19, 0xFF	; 255
    2086:	4f e7       	ldi	r20, 0x7F	; 127
    2088:	57 e4       	ldi	r21, 0x47	; 71
    208a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    208e:	18 16       	cp	r1, r24
    2090:	4c f5       	brge	.+82     	; 0x20e4 <LCD_enuInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2092:	6f a1       	ldd	r22, Y+39	; 0x27
    2094:	78 a5       	ldd	r23, Y+40	; 0x28
    2096:	89 a5       	ldd	r24, Y+41	; 0x29
    2098:	9a a5       	ldd	r25, Y+42	; 0x2a
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e2       	ldi	r20, 0x20	; 32
    20a0:	51 e4       	ldi	r21, 0x41	; 65
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9a a3       	std	Y+34, r25	; 0x22
    20b8:	89 a3       	std	Y+33, r24	; 0x21
    20ba:	0f c0       	rjmp	.+30     	; 0x20da <LCD_enuInit+0x1f8>
    20bc:	89 e1       	ldi	r24, 0x19	; 25
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	98 a3       	std	Y+32, r25	; 0x20
    20c2:	8f 8f       	std	Y+31, r24	; 0x1f
    20c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20c6:	98 a1       	ldd	r25, Y+32	; 0x20
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <LCD_enuInit+0x1e6>
    20cc:	98 a3       	std	Y+32, r25	; 0x20
    20ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d0:	89 a1       	ldd	r24, Y+33	; 0x21
    20d2:	9a a1       	ldd	r25, Y+34	; 0x22
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	9a a3       	std	Y+34, r25	; 0x22
    20d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20da:	89 a1       	ldd	r24, Y+33	; 0x21
    20dc:	9a a1       	ldd	r25, Y+34	; 0x22
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	69 f7       	brne	.-38     	; 0x20bc <LCD_enuInit+0x1da>
    20e2:	14 c0       	rjmp	.+40     	; 0x210c <LCD_enuInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e4:	6b a1       	ldd	r22, Y+35	; 0x23
    20e6:	7c a1       	ldd	r23, Y+36	; 0x24
    20e8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ea:	9e a1       	ldd	r25, Y+38	; 0x26
    20ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	9a a3       	std	Y+34, r25	; 0x22
    20f6:	89 a3       	std	Y+33, r24	; 0x21
    20f8:	89 a1       	ldd	r24, Y+33	; 0x21
    20fa:	9a a1       	ldd	r25, Y+34	; 0x22
    20fc:	9e 8f       	std	Y+30, r25	; 0x1e
    20fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2100:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2102:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <LCD_enuInit+0x222>
    2108:	9e 8f       	std	Y+30, r25	; 0x1e
    210a:	8d 8f       	std	Y+29, r24	; 0x1d
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    210c:	8f e0       	ldi	r24, 0x0F	; 15
    210e:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <LCD_invidSendCommend>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a0 e8       	ldi	r26, 0x80	; 128
    2118:	bf e3       	ldi	r27, 0x3F	; 63
    211a:	89 8f       	std	Y+25, r24	; 0x19
    211c:	9a 8f       	std	Y+26, r25	; 0x1a
    211e:	ab 8f       	std	Y+27, r26	; 0x1b
    2120:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	69 8d       	ldd	r22, Y+25	; 0x19
    2124:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2126:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2128:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a e7       	ldi	r20, 0x7A	; 122
    2130:	53 e4       	ldi	r21, 0x43	; 67
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8d 8b       	std	Y+21, r24	; 0x15
    213c:	9e 8b       	std	Y+22, r25	; 0x16
    213e:	af 8b       	std	Y+23, r26	; 0x17
    2140:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2142:	6d 89       	ldd	r22, Y+21	; 0x15
    2144:	7e 89       	ldd	r23, Y+22	; 0x16
    2146:	8f 89       	ldd	r24, Y+23	; 0x17
    2148:	98 8d       	ldd	r25, Y+24	; 0x18
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <LCD_enuInit+0x282>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9c 8b       	std	Y+20, r25	; 0x14
    2160:	8b 8b       	std	Y+19, r24	; 0x13
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <LCD_enuInit+0x300>
	else if (__tmp > 65535)
    2164:	6d 89       	ldd	r22, Y+21	; 0x15
    2166:	7e 89       	ldd	r23, Y+22	; 0x16
    2168:	8f 89       	ldd	r24, Y+23	; 0x17
    216a:	98 8d       	ldd	r25, Y+24	; 0x18
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <LCD_enuInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	69 8d       	ldd	r22, Y+25	; 0x19
    217e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2180:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2182:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
    21a2:	8b 8b       	std	Y+19, r24	; 0x13
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <LCD_enuInit+0x2e2>
    21a6:	89 e1       	ldi	r24, 0x19	; 25
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9a 8b       	std	Y+18, r25	; 0x12
    21ac:	89 8b       	std	Y+17, r24	; 0x11
    21ae:	89 89       	ldd	r24, Y+17	; 0x11
    21b0:	9a 89       	ldd	r25, Y+18	; 0x12
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <LCD_enuInit+0x2d0>
    21b6:	9a 8b       	std	Y+18, r25	; 0x12
    21b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	8b 89       	ldd	r24, Y+19	; 0x13
    21bc:	9c 89       	ldd	r25, Y+20	; 0x14
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9c 8b       	std	Y+20, r25	; 0x14
    21c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	8b 89       	ldd	r24, Y+19	; 0x13
    21c6:	9c 89       	ldd	r25, Y+20	; 0x14
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <LCD_enuInit+0x2c4>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <LCD_enuInit+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6d 89       	ldd	r22, Y+21	; 0x15
    21d0:	7e 89       	ldd	r23, Y+22	; 0x16
    21d2:	8f 89       	ldd	r24, Y+23	; 0x17
    21d4:	98 8d       	ldd	r25, Y+24	; 0x18
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9c 8b       	std	Y+20, r25	; 0x14
    21e0:	8b 8b       	std	Y+19, r24	; 0x13
    21e2:	8b 89       	ldd	r24, Y+19	; 0x13
    21e4:	9c 89       	ldd	r25, Y+20	; 0x14
    21e6:	98 8b       	std	Y+16, r25	; 0x10
    21e8:	8f 87       	std	Y+15, r24	; 0x0f
    21ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ec:	98 89       	ldd	r25, Y+16	; 0x10
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <LCD_enuInit+0x30c>
    21f2:	98 8b       	std	Y+16, r25	; 0x10
    21f4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <LCD_invidSendCommend>
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	a0 e0       	ldi	r26, 0x00	; 0
    2202:	b0 e4       	ldi	r27, 0x40	; 64
    2204:	8b 87       	std	Y+11, r24	; 0x0b
    2206:	9c 87       	std	Y+12, r25	; 0x0c
    2208:	ad 87       	std	Y+13, r26	; 0x0d
    220a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220c:	6b 85       	ldd	r22, Y+11	; 0x0b
    220e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2210:	8d 85       	ldd	r24, Y+13	; 0x0d
    2212:	9e 85       	ldd	r25, Y+14	; 0x0e
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	4a e7       	ldi	r20, 0x7A	; 122
    221a:	53 e4       	ldi	r21, 0x43	; 67
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	8f 83       	std	Y+7, r24	; 0x07
    2226:	98 87       	std	Y+8, r25	; 0x08
    2228:	a9 87       	std	Y+9, r26	; 0x09
    222a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    222c:	6f 81       	ldd	r22, Y+7	; 0x07
    222e:	78 85       	ldd	r23, Y+8	; 0x08
    2230:	89 85       	ldd	r24, Y+9	; 0x09
    2232:	9a 85       	ldd	r25, Y+10	; 0x0a
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e8       	ldi	r20, 0x80	; 128
    223a:	5f e3       	ldi	r21, 0x3F	; 63
    223c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2240:	88 23       	and	r24, r24
    2242:	2c f4       	brge	.+10     	; 0x224e <LCD_enuInit+0x36c>
		__ticks = 1;
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	9e 83       	std	Y+6, r25	; 0x06
    224a:	8d 83       	std	Y+5, r24	; 0x05
    224c:	3f c0       	rjmp	.+126    	; 0x22cc <LCD_enuInit+0x3ea>
	else if (__tmp > 65535)
    224e:	6f 81       	ldd	r22, Y+7	; 0x07
    2250:	78 85       	ldd	r23, Y+8	; 0x08
    2252:	89 85       	ldd	r24, Y+9	; 0x09
    2254:	9a 85       	ldd	r25, Y+10	; 0x0a
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	3f ef       	ldi	r19, 0xFF	; 255
    225a:	4f e7       	ldi	r20, 0x7F	; 127
    225c:	57 e4       	ldi	r21, 0x47	; 71
    225e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2262:	18 16       	cp	r1, r24
    2264:	4c f5       	brge	.+82     	; 0x22b8 <LCD_enuInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2266:	6b 85       	ldd	r22, Y+11	; 0x0b
    2268:	7c 85       	ldd	r23, Y+12	; 0x0c
    226a:	8d 85       	ldd	r24, Y+13	; 0x0d
    226c:	9e 85       	ldd	r25, Y+14	; 0x0e
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e2       	ldi	r20, 0x20	; 32
    2274:	51 e4       	ldi	r21, 0x41	; 65
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	bc 01       	movw	r22, r24
    2280:	cd 01       	movw	r24, r26
    2282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	8d 83       	std	Y+5, r24	; 0x05
    228e:	0f c0       	rjmp	.+30     	; 0x22ae <LCD_enuInit+0x3cc>
    2290:	89 e1       	ldi	r24, 0x19	; 25
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	9c 83       	std	Y+4, r25	; 0x04
    2296:	8b 83       	std	Y+3, r24	; 0x03
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	9c 81       	ldd	r25, Y+4	; 0x04
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <LCD_enuInit+0x3ba>
    22a0:	9c 83       	std	Y+4, r25	; 0x04
    22a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a4:	8d 81       	ldd	r24, Y+5	; 0x05
    22a6:	9e 81       	ldd	r25, Y+6	; 0x06
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	9e 83       	std	Y+6, r25	; 0x06
    22ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	9e 81       	ldd	r25, Y+6	; 0x06
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	69 f7       	brne	.-38     	; 0x2290 <LCD_enuInit+0x3ae>
    22b6:	14 c0       	rjmp	.+40     	; 0x22e0 <LCD_enuInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ba:	78 85       	ldd	r23, Y+8	; 0x08
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	9e 83       	std	Y+6, r25	; 0x06
    22ca:	8d 83       	std	Y+5, r24	; 0x05
    22cc:	8d 81       	ldd	r24, Y+5	; 0x05
    22ce:	9e 81       	ldd	r25, Y+6	; 0x06
    22d0:	9a 83       	std	Y+2, r25	; 0x02
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	9a 81       	ldd	r25, Y+2	; 0x02
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <LCD_enuInit+0x3f6>
    22dc:	9a 83       	std	Y+2, r25	; 0x02
    22de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    22e0:	86 e0       	ldi	r24, 0x06	; 6
    22e2:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <LCD_invidSendCommend>

	return Local_enuErrorState;
    22e6:	89 ad       	ldd	r24, Y+57	; 0x39
}
    22e8:	e9 96       	adiw	r28, 0x39	; 57
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <LCD_enuDisplayChar+0x6>
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2306:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	61 e0       	ldi	r22, 0x01	; 1
    230c:	41 e0       	ldi	r20, 0x01	; 1
    230e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_vidLatch>

	return Local_enuErrorState;
    2318:	89 81       	ldd	r24, Y+1	; 0x01
}
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	00 d0       	rcall	.+0      	; 0x232a <LCD_enuSendCommand+0x6>
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2330:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	61 e0       	ldi	r22, 0x01	; 1
    2336:	40 e0       	ldi	r20, 0x00	; 0
    2338:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_vidLatch>


	return Local_enuErrorState;
    2342:	89 81       	ldd	r24, Y+1	; 0x01
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <LCD_enuDisplayIntegerNum>:


ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	2b 97       	sbiw	r28, 0x0b	; 11
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	cd bf       	out	0x3d, r28	; 61
    2362:	68 87       	std	Y+8, r22	; 0x08
    2364:	79 87       	std	Y+9, r23	; 0x09
    2366:	8a 87       	std	Y+10, r24	; 0x0a
    2368:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
    236a:	1f 82       	std	Y+7, r1	; 0x07

	s32 Local_s32Reverse=0;
    236c:	1b 82       	std	Y+3, r1	; 0x03
    236e:	1c 82       	std	Y+4, r1	; 0x04
    2370:	1d 82       	std	Y+5, r1	; 0x05
    2372:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    2374:	1a 82       	std	Y+2, r1	; 0x02
    2376:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num <0)
    2378:	88 85       	ldd	r24, Y+8	; 0x08
    237a:	99 85       	ldd	r25, Y+9	; 0x09
    237c:	aa 85       	ldd	r26, Y+10	; 0x0a
    237e:	bb 85       	ldd	r27, Y+11	; 0x0b
    2380:	bb 23       	and	r27, r27
    2382:	0c f0       	brlt	.+2      	; 0x2386 <LCD_enuDisplayIntegerNum+0x38>
    2384:	57 c0       	rjmp	.+174    	; 0x2434 <LCD_enuDisplayIntegerNum+0xe6>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	61 e0       	ldi	r22, 0x01	; 1
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
		LCD_vidLatch('-');
    2390:	8d e2       	ldi	r24, 0x2D	; 45
    2392:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    2396:	88 85       	ldd	r24, Y+8	; 0x08
    2398:	99 85       	ldd	r25, Y+9	; 0x09
    239a:	aa 85       	ldd	r26, Y+10	; 0x0a
    239c:	bb 85       	ldd	r27, Y+11	; 0x0b
    239e:	b0 95       	com	r27
    23a0:	a0 95       	com	r26
    23a2:	90 95       	com	r25
    23a4:	81 95       	neg	r24
    23a6:	9f 4f       	sbci	r25, 0xFF	; 255
    23a8:	af 4f       	sbci	r26, 0xFF	; 255
    23aa:	bf 4f       	sbci	r27, 0xFF	; 255
    23ac:	88 87       	std	Y+8, r24	; 0x08
    23ae:	99 87       	std	Y+9, r25	; 0x09
    23b0:	aa 87       	std	Y+10, r26	; 0x0a
    23b2:	bb 87       	std	Y+11, r27	; 0x0b
    23b4:	3f c0       	rjmp	.+126    	; 0x2434 <LCD_enuDisplayIntegerNum+0xe6>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    23b6:	88 85       	ldd	r24, Y+8	; 0x08
    23b8:	99 85       	ldd	r25, Y+9	; 0x09
    23ba:	aa 85       	ldd	r26, Y+10	; 0x0a
    23bc:	bb 85       	ldd	r27, Y+11	; 0x0b
    23be:	2a e0       	ldi	r18, 0x0A	; 10
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	50 e0       	ldi	r21, 0x00	; 0
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 ae 19 	call	0x335c	; 0x335c <__divmodsi4>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	ad 81       	ldd	r26, Y+5	; 0x05
    23da:	be 81       	ldd	r27, Y+6	; 0x06
    23dc:	2a e0       	ldi	r18, 0x0A	; 10
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	50 e0       	ldi	r21, 0x00	; 0
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 8f 19 	call	0x331e	; 0x331e <__mulsi3>
    23ec:	9b 01       	movw	r18, r22
    23ee:	ac 01       	movw	r20, r24
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	88 2f       	mov	r24, r24
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	a0 e0       	ldi	r26, 0x00	; 0
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	82 0f       	add	r24, r18
    23fc:	93 1f       	adc	r25, r19
    23fe:	a4 1f       	adc	r26, r20
    2400:	b5 1f       	adc	r27, r21
    2402:	8b 83       	std	Y+3, r24	; 0x03
    2404:	9c 83       	std	Y+4, r25	; 0x04
    2406:	ad 83       	std	Y+5, r26	; 0x05
    2408:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    240a:	88 85       	ldd	r24, Y+8	; 0x08
    240c:	99 85       	ldd	r25, Y+9	; 0x09
    240e:	aa 85       	ldd	r26, Y+10	; 0x0a
    2410:	bb 85       	ldd	r27, Y+11	; 0x0b
    2412:	2a e0       	ldi	r18, 0x0A	; 10
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e0       	ldi	r20, 0x00	; 0
    2418:	50 e0       	ldi	r21, 0x00	; 0
    241a:	bc 01       	movw	r22, r24
    241c:	cd 01       	movw	r24, r26
    241e:	0e 94 ae 19 	call	0x335c	; 0x335c <__divmodsi4>
    2422:	da 01       	movw	r26, r20
    2424:	c9 01       	movw	r24, r18
    2426:	88 87       	std	Y+8, r24	; 0x08
    2428:	99 87       	std	Y+9, r25	; 0x09
    242a:	aa 87       	std	Y+10, r26	; 0x0a
    242c:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	8f 5f       	subi	r24, 0xFF	; 255
    2432:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    2434:	88 85       	ldd	r24, Y+8	; 0x08
    2436:	99 85       	ldd	r25, Y+9	; 0x09
    2438:	aa 85       	ldd	r26, Y+10	; 0x0a
    243a:	bb 85       	ldd	r27, Y+11	; 0x0b
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	a1 05       	cpc	r26, r1
    2440:	b1 05       	cpc	r27, r1
    2442:	09 f0       	breq	.+2      	; 0x2446 <LCD_enuDisplayIntegerNum+0xf8>
    2444:	b8 cf       	rjmp	.-144    	; 0x23b6 <LCD_enuDisplayIntegerNum+0x68>
    2446:	2d c0       	rjmp	.+90     	; 0x24a2 <LCD_enuDisplayIntegerNum+0x154>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	9c 81       	ldd	r25, Y+4	; 0x04
    244c:	ad 81       	ldd	r26, Y+5	; 0x05
    244e:	be 81       	ldd	r27, Y+6	; 0x06
    2450:	2a e0       	ldi	r18, 0x0A	; 10
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	bc 01       	movw	r22, r24
    245a:	cd 01       	movw	r24, r26
    245c:	0e 94 ae 19 	call	0x335c	; 0x335c <__divmodsi4>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	61 e0       	ldi	r22, 0x01	; 1
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	80 5d       	subi	r24, 0xD0	; 208
    2474:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_vidLatch>
		Local_s32Reverse /= 10;
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	9c 81       	ldd	r25, Y+4	; 0x04
    247c:	ad 81       	ldd	r26, Y+5	; 0x05
    247e:	be 81       	ldd	r27, Y+6	; 0x06
    2480:	2a e0       	ldi	r18, 0x0A	; 10
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e0       	ldi	r20, 0x00	; 0
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	0e 94 ae 19 	call	0x335c	; 0x335c <__divmodsi4>
    2490:	da 01       	movw	r26, r20
    2492:	c9 01       	movw	r24, r18
    2494:	8b 83       	std	Y+3, r24	; 0x03
    2496:	9c 83       	std	Y+4, r25	; 0x04
    2498:	ad 83       	std	Y+5, r26	; 0x05
    249a:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	81 50       	subi	r24, 0x01	; 1
    24a0:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	88 23       	and	r24, r24
    24a6:	81 f6       	brne	.-96     	; 0x2448 <LCD_enuDisplayIntegerNum+0xfa>
		LCD_vidLatch(Local_u8Remainder + '0');
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
    24a8:	8f 81       	ldd	r24, Y+7	; 0x07
}
    24aa:	2b 96       	adiw	r28, 0x0b	; 11
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <LCD_vidLatch>:




static void LCD_vidLatch(u8 Copy_u8Data)
{
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	c5 55       	subi	r28, 0x55	; 85
    24ca:	d0 40       	sbci	r29, 0x00	; 0
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	fe 01       	movw	r30, r28
    24d8:	eb 5a       	subi	r30, 0xAB	; 171
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 83       	st	Z, r24
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	62 e0       	ldi	r22, 0x02	; 2
    24e2:	40 e0       	ldi	r20, 0x00	; 0
    24e4:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	63 e0       	ldi	r22, 0x03	; 3
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    24f2:	fe 01       	movw	r30, r28
    24f4:	eb 5a       	subi	r30, 0xAB	; 171
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 81       	ld	r24, Z
    24fa:	98 2f       	mov	r25, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	99 27       	eor	r25, r25
    2500:	99 1f       	adc	r25, r25
    2502:	82 e0       	ldi	r24, 0x02	; 2
    2504:	67 e0       	ldi	r22, 0x07	; 7
    2506:	49 2f       	mov	r20, r25
    2508:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    250c:	fe 01       	movw	r30, r28
    250e:	eb 5a       	subi	r30, 0xAB	; 171
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	82 95       	swap	r24
    2516:	86 95       	lsr	r24
    2518:	86 95       	lsr	r24
    251a:	83 70       	andi	r24, 0x03	; 3
    251c:	98 2f       	mov	r25, r24
    251e:	91 70       	andi	r25, 0x01	; 1
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	66 e0       	ldi	r22, 0x06	; 6
    2524:	49 2f       	mov	r20, r25
    2526:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    252a:	fe 01       	movw	r30, r28
    252c:	eb 5a       	subi	r30, 0xAB	; 171
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 81       	ld	r24, Z
    2532:	82 95       	swap	r24
    2534:	86 95       	lsr	r24
    2536:	87 70       	andi	r24, 0x07	; 7
    2538:	98 2f       	mov	r25, r24
    253a:	91 70       	andi	r25, 0x01	; 1
    253c:	82 e0       	ldi	r24, 0x02	; 2
    253e:	65 e0       	ldi	r22, 0x05	; 5
    2540:	49 2f       	mov	r20, r25
    2542:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    2546:	fe 01       	movw	r30, r28
    2548:	eb 5a       	subi	r30, 0xAB	; 171
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	80 81       	ld	r24, Z
    254e:	82 95       	swap	r24
    2550:	8f 70       	andi	r24, 0x0F	; 15
    2552:	98 2f       	mov	r25, r24
    2554:	91 70       	andi	r25, 0x01	; 1
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	64 e0       	ldi	r22, 0x04	; 4
    255a:	49 2f       	mov	r20, r25
    255c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));

#elif LCD_MODE == FOUR_BIT
	if (Copy_u8Data == 0x28)
    2560:	fe 01       	movw	r30, r28
    2562:	eb 5a       	subi	r30, 0xAB	; 171
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	88 32       	cpi	r24, 0x28	; 40
    256a:	09 f0       	breq	.+2      	; 0x256e <LCD_vidLatch+0xb2>
    256c:	79 c1       	rjmp	.+754    	; 0x2860 <LCD_vidLatch+0x3a4>
	{
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	63 e0       	ldi	r22, 0x03	; 3
    2572:	41 e0       	ldi	r20, 0x01	; 1
    2574:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
    2578:	fe 01       	movw	r30, r28
    257a:	ef 5a       	subi	r30, 0xAF	; 175
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	a0 e2       	ldi	r26, 0x20	; 32
    2584:	b1 e4       	ldi	r27, 0x41	; 65
    2586:	80 83       	st	Z, r24
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	a2 83       	std	Z+2, r26	; 0x02
    258c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258e:	8e 01       	movw	r16, r28
    2590:	03 5b       	subi	r16, 0xB3	; 179
    2592:	1f 4f       	sbci	r17, 0xFF	; 255
    2594:	fe 01       	movw	r30, r28
    2596:	ef 5a       	subi	r30, 0xAF	; 175
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	60 81       	ld	r22, Z
    259c:	71 81       	ldd	r23, Z+1	; 0x01
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	4a e7       	ldi	r20, 0x7A	; 122
    25a8:	53 e4       	ldi	r21, 0x43	; 67
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	f8 01       	movw	r30, r16
    25b4:	80 83       	st	Z, r24
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	a2 83       	std	Z+2, r26	; 0x02
    25ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25bc:	fe 01       	movw	r30, r28
    25be:	e3 5b       	subi	r30, 0xB3	; 179
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	60 81       	ld	r22, Z
    25c4:	71 81       	ldd	r23, Z+1	; 0x01
    25c6:	82 81       	ldd	r24, Z+2	; 0x02
    25c8:	93 81       	ldd	r25, Z+3	; 0x03
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	44 f4       	brge	.+16     	; 0x25ea <LCD_vidLatch+0x12e>
		__ticks = 1;
    25da:	fe 01       	movw	r30, r28
    25dc:	e5 5b       	subi	r30, 0xB5	; 181
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	91 83       	std	Z+1, r25	; 0x01
    25e6:	80 83       	st	Z, r24
    25e8:	64 c0       	rjmp	.+200    	; 0x26b2 <LCD_vidLatch+0x1f6>
	else if (__tmp > 65535)
    25ea:	fe 01       	movw	r30, r28
    25ec:	e3 5b       	subi	r30, 0xB3	; 179
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	60 81       	ld	r22, Z
    25f2:	71 81       	ldd	r23, Z+1	; 0x01
    25f4:	82 81       	ldd	r24, Z+2	; 0x02
    25f6:	93 81       	ldd	r25, Z+3	; 0x03
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	3f ef       	ldi	r19, 0xFF	; 255
    25fc:	4f e7       	ldi	r20, 0x7F	; 127
    25fe:	57 e4       	ldi	r21, 0x47	; 71
    2600:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2604:	18 16       	cp	r1, r24
    2606:	0c f0       	brlt	.+2      	; 0x260a <LCD_vidLatch+0x14e>
    2608:	43 c0       	rjmp	.+134    	; 0x2690 <LCD_vidLatch+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260a:	fe 01       	movw	r30, r28
    260c:	ef 5a       	subi	r30, 0xAF	; 175
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e2       	ldi	r20, 0x20	; 32
    261e:	51 e4       	ldi	r21, 0x41	; 65
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	8e 01       	movw	r16, r28
    262a:	05 5b       	subi	r16, 0xB5	; 181
    262c:	1f 4f       	sbci	r17, 0xFF	; 255
    262e:	bc 01       	movw	r22, r24
    2630:	cd 01       	movw	r24, r26
    2632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	f8 01       	movw	r30, r16
    263c:	91 83       	std	Z+1, r25	; 0x01
    263e:	80 83       	st	Z, r24
    2640:	1f c0       	rjmp	.+62     	; 0x2680 <LCD_vidLatch+0x1c4>
    2642:	fe 01       	movw	r30, r28
    2644:	e7 5b       	subi	r30, 0xB7	; 183
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	89 e1       	ldi	r24, 0x19	; 25
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	80 83       	st	Z, r24
    2650:	fe 01       	movw	r30, r28
    2652:	e7 5b       	subi	r30, 0xB7	; 183
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 81       	ld	r24, Z
    2658:	91 81       	ldd	r25, Z+1	; 0x01
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <LCD_vidLatch+0x19e>
    265e:	fe 01       	movw	r30, r28
    2660:	e7 5b       	subi	r30, 0xB7	; 183
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	91 83       	std	Z+1, r25	; 0x01
    2666:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2668:	de 01       	movw	r26, r28
    266a:	a5 5b       	subi	r26, 0xB5	; 181
    266c:	bf 4f       	sbci	r27, 0xFF	; 255
    266e:	fe 01       	movw	r30, r28
    2670:	e5 5b       	subi	r30, 0xB5	; 181
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 81       	ld	r24, Z
    2676:	91 81       	ldd	r25, Z+1	; 0x01
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	11 96       	adiw	r26, 0x01	; 1
    267c:	9c 93       	st	X, r25
    267e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2680:	fe 01       	movw	r30, r28
    2682:	e5 5b       	subi	r30, 0xB5	; 181
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 81       	ld	r24, Z
    2688:	91 81       	ldd	r25, Z+1	; 0x01
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	d1 f6       	brne	.-76     	; 0x2642 <LCD_vidLatch+0x186>
    268e:	27 c0       	rjmp	.+78     	; 0x26de <LCD_vidLatch+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2690:	8e 01       	movw	r16, r28
    2692:	05 5b       	subi	r16, 0xB5	; 181
    2694:	1f 4f       	sbci	r17, 0xFF	; 255
    2696:	fe 01       	movw	r30, r28
    2698:	e3 5b       	subi	r30, 0xB3	; 179
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	60 81       	ld	r22, Z
    269e:	71 81       	ldd	r23, Z+1	; 0x01
    26a0:	82 81       	ldd	r24, Z+2	; 0x02
    26a2:	93 81       	ldd	r25, Z+3	; 0x03
    26a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	f8 01       	movw	r30, r16
    26ae:	91 83       	std	Z+1, r25	; 0x01
    26b0:	80 83       	st	Z, r24
    26b2:	de 01       	movw	r26, r28
    26b4:	a9 5b       	subi	r26, 0xB9	; 185
    26b6:	bf 4f       	sbci	r27, 0xFF	; 255
    26b8:	fe 01       	movw	r30, r28
    26ba:	e5 5b       	subi	r30, 0xB5	; 181
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	8d 93       	st	X+, r24
    26c4:	9c 93       	st	X, r25
    26c6:	fe 01       	movw	r30, r28
    26c8:	e9 5b       	subi	r30, 0xB9	; 185
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 81       	ld	r24, Z
    26ce:	91 81       	ldd	r25, Z+1	; 0x01
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <LCD_vidLatch+0x214>
    26d4:	fe 01       	movw	r30, r28
    26d6:	e9 5b       	subi	r30, 0xB9	; 185
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	63 e0       	ldi	r22, 0x03	; 3
    26e2:	40 e0       	ldi	r20, 0x00	; 0
    26e4:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
    26e8:	fe 01       	movw	r30, r28
    26ea:	ed 5b       	subi	r30, 0xBD	; 189
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a0 e2       	ldi	r26, 0x20	; 32
    26f4:	b1 e4       	ldi	r27, 0x41	; 65
    26f6:	80 83       	st	Z, r24
    26f8:	91 83       	std	Z+1, r25	; 0x01
    26fa:	a2 83       	std	Z+2, r26	; 0x02
    26fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fe:	8e 01       	movw	r16, r28
    2700:	01 5c       	subi	r16, 0xC1	; 193
    2702:	1f 4f       	sbci	r17, 0xFF	; 255
    2704:	fe 01       	movw	r30, r28
    2706:	ed 5b       	subi	r30, 0xBD	; 189
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	60 81       	ld	r22, Z
    270c:	71 81       	ldd	r23, Z+1	; 0x01
    270e:	82 81       	ldd	r24, Z+2	; 0x02
    2710:	93 81       	ldd	r25, Z+3	; 0x03
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	4a e7       	ldi	r20, 0x7A	; 122
    2718:	53 e4       	ldi	r21, 0x43	; 67
    271a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	f8 01       	movw	r30, r16
    2724:	80 83       	st	Z, r24
    2726:	91 83       	std	Z+1, r25	; 0x01
    2728:	a2 83       	std	Z+2, r26	; 0x02
    272a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    272c:	fe 01       	movw	r30, r28
    272e:	ff 96       	adiw	r30, 0x3f	; 63
    2730:	60 81       	ld	r22, Z
    2732:	71 81       	ldd	r23, Z+1	; 0x01
    2734:	82 81       	ldd	r24, Z+2	; 0x02
    2736:	93 81       	ldd	r25, Z+3	; 0x03
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e8       	ldi	r20, 0x80	; 128
    273e:	5f e3       	ldi	r21, 0x3F	; 63
    2740:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2744:	88 23       	and	r24, r24
    2746:	2c f4       	brge	.+10     	; 0x2752 <LCD_vidLatch+0x296>
		__ticks = 1;
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	9e af       	std	Y+62, r25	; 0x3e
    274e:	8d af       	std	Y+61, r24	; 0x3d
    2750:	46 c0       	rjmp	.+140    	; 0x27de <LCD_vidLatch+0x322>
	else if (__tmp > 65535)
    2752:	fe 01       	movw	r30, r28
    2754:	ff 96       	adiw	r30, 0x3f	; 63
    2756:	60 81       	ld	r22, Z
    2758:	71 81       	ldd	r23, Z+1	; 0x01
    275a:	82 81       	ldd	r24, Z+2	; 0x02
    275c:	93 81       	ldd	r25, Z+3	; 0x03
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	3f ef       	ldi	r19, 0xFF	; 255
    2762:	4f e7       	ldi	r20, 0x7F	; 127
    2764:	57 e4       	ldi	r21, 0x47	; 71
    2766:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    276a:	18 16       	cp	r1, r24
    276c:	64 f5       	brge	.+88     	; 0x27c6 <LCD_vidLatch+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276e:	fe 01       	movw	r30, r28
    2770:	ed 5b       	subi	r30, 0xBD	; 189
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	60 81       	ld	r22, Z
    2776:	71 81       	ldd	r23, Z+1	; 0x01
    2778:	82 81       	ldd	r24, Z+2	; 0x02
    277a:	93 81       	ldd	r25, Z+3	; 0x03
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e2       	ldi	r20, 0x20	; 32
    2782:	51 e4       	ldi	r21, 0x41	; 65
    2784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	bc 01       	movw	r22, r24
    278e:	cd 01       	movw	r24, r26
    2790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	9e af       	std	Y+62, r25	; 0x3e
    279a:	8d af       	std	Y+61, r24	; 0x3d
    279c:	0f c0       	rjmp	.+30     	; 0x27bc <LCD_vidLatch+0x300>
    279e:	89 e1       	ldi	r24, 0x19	; 25
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	9c af       	std	Y+60, r25	; 0x3c
    27a4:	8b af       	std	Y+59, r24	; 0x3b
    27a6:	8b ad       	ldd	r24, Y+59	; 0x3b
    27a8:	9c ad       	ldd	r25, Y+60	; 0x3c
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	f1 f7       	brne	.-4      	; 0x27aa <LCD_vidLatch+0x2ee>
    27ae:	9c af       	std	Y+60, r25	; 0x3c
    27b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    27b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	9e af       	std	Y+62, r25	; 0x3e
    27ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    27be:	9e ad       	ldd	r25, Y+62	; 0x3e
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	69 f7       	brne	.-38     	; 0x279e <LCD_vidLatch+0x2e2>
    27c4:	16 c0       	rjmp	.+44     	; 0x27f2 <LCD_vidLatch+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c6:	fe 01       	movw	r30, r28
    27c8:	ff 96       	adiw	r30, 0x3f	; 63
    27ca:	60 81       	ld	r22, Z
    27cc:	71 81       	ldd	r23, Z+1	; 0x01
    27ce:	82 81       	ldd	r24, Z+2	; 0x02
    27d0:	93 81       	ldd	r25, Z+3	; 0x03
    27d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	9e af       	std	Y+62, r25	; 0x3e
    27dc:	8d af       	std	Y+61, r24	; 0x3d
    27de:	8d ad       	ldd	r24, Y+61	; 0x3d
    27e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    27e2:	9a af       	std	Y+58, r25	; 0x3a
    27e4:	89 af       	std	Y+57, r24	; 0x39
    27e6:	89 ad       	ldd	r24, Y+57	; 0x39
    27e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <LCD_vidLatch+0x32e>
    27ee:	9a af       	std	Y+58, r25	; 0x3a
    27f0:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(10);

		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    27f2:	fe 01       	movw	r30, r28
    27f4:	eb 5a       	subi	r30, 0xAB	; 171
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	98 2f       	mov	r25, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	99 27       	eor	r25, r25
    2800:	99 1f       	adc	r25, r25
    2802:	82 e0       	ldi	r24, 0x02	; 2
    2804:	67 e0       	ldi	r22, 0x07	; 7
    2806:	49 2f       	mov	r20, r25
    2808:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    280c:	fe 01       	movw	r30, r28
    280e:	eb 5a       	subi	r30, 0xAB	; 171
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	82 95       	swap	r24
    2816:	86 95       	lsr	r24
    2818:	86 95       	lsr	r24
    281a:	83 70       	andi	r24, 0x03	; 3
    281c:	98 2f       	mov	r25, r24
    281e:	91 70       	andi	r25, 0x01	; 1
    2820:	82 e0       	ldi	r24, 0x02	; 2
    2822:	66 e0       	ldi	r22, 0x06	; 6
    2824:	49 2f       	mov	r20, r25
    2826:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    282a:	fe 01       	movw	r30, r28
    282c:	eb 5a       	subi	r30, 0xAB	; 171
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	80 81       	ld	r24, Z
    2832:	82 95       	swap	r24
    2834:	86 95       	lsr	r24
    2836:	87 70       	andi	r24, 0x07	; 7
    2838:	98 2f       	mov	r25, r24
    283a:	91 70       	andi	r25, 0x01	; 1
    283c:	82 e0       	ldi	r24, 0x02	; 2
    283e:	65 e0       	ldi	r22, 0x05	; 5
    2840:	49 2f       	mov	r20, r25
    2842:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    2846:	fe 01       	movw	r30, r28
    2848:	eb 5a       	subi	r30, 0xAB	; 171
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	80 81       	ld	r24, Z
    284e:	82 95       	swap	r24
    2850:	8f 70       	andi	r24, 0x0F	; 15
    2852:	98 2f       	mov	r25, r24
    2854:	91 70       	andi	r25, 0x01	; 1
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	64 e0       	ldi	r22, 0x04	; 4
    285a:	49 2f       	mov	r20, r25
    285c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	}

	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	63 e0       	ldi	r22, 0x03	; 3
    2864:	41 e0       	ldi	r20, 0x01	; 1
    2866:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	a0 e2       	ldi	r26, 0x20	; 32
    2870:	b1 e4       	ldi	r27, 0x41	; 65
    2872:	8d ab       	std	Y+53, r24	; 0x35
    2874:	9e ab       	std	Y+54, r25	; 0x36
    2876:	af ab       	std	Y+55, r26	; 0x37
    2878:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287a:	6d a9       	ldd	r22, Y+53	; 0x35
    287c:	7e a9       	ldd	r23, Y+54	; 0x36
    287e:	8f a9       	ldd	r24, Y+55	; 0x37
    2880:	98 ad       	ldd	r25, Y+56	; 0x38
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	4a e7       	ldi	r20, 0x7A	; 122
    2888:	53 e4       	ldi	r21, 0x43	; 67
    288a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	89 ab       	std	Y+49, r24	; 0x31
    2894:	9a ab       	std	Y+50, r25	; 0x32
    2896:	ab ab       	std	Y+51, r26	; 0x33
    2898:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    289a:	69 a9       	ldd	r22, Y+49	; 0x31
    289c:	7a a9       	ldd	r23, Y+50	; 0x32
    289e:	8b a9       	ldd	r24, Y+51	; 0x33
    28a0:	9c a9       	ldd	r25, Y+52	; 0x34
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e8       	ldi	r20, 0x80	; 128
    28a8:	5f e3       	ldi	r21, 0x3F	; 63
    28aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ae:	88 23       	and	r24, r24
    28b0:	2c f4       	brge	.+10     	; 0x28bc <LCD_vidLatch+0x400>
		__ticks = 1;
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	98 ab       	std	Y+48, r25	; 0x30
    28b8:	8f a7       	std	Y+47, r24	; 0x2f
    28ba:	3f c0       	rjmp	.+126    	; 0x293a <LCD_vidLatch+0x47e>
	else if (__tmp > 65535)
    28bc:	69 a9       	ldd	r22, Y+49	; 0x31
    28be:	7a a9       	ldd	r23, Y+50	; 0x32
    28c0:	8b a9       	ldd	r24, Y+51	; 0x33
    28c2:	9c a9       	ldd	r25, Y+52	; 0x34
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	3f ef       	ldi	r19, 0xFF	; 255
    28c8:	4f e7       	ldi	r20, 0x7F	; 127
    28ca:	57 e4       	ldi	r21, 0x47	; 71
    28cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d0:	18 16       	cp	r1, r24
    28d2:	4c f5       	brge	.+82     	; 0x2926 <LCD_vidLatch+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d4:	6d a9       	ldd	r22, Y+53	; 0x35
    28d6:	7e a9       	ldd	r23, Y+54	; 0x36
    28d8:	8f a9       	ldd	r24, Y+55	; 0x37
    28da:	98 ad       	ldd	r25, Y+56	; 0x38
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e2       	ldi	r20, 0x20	; 32
    28e2:	51 e4       	ldi	r21, 0x41	; 65
    28e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	98 ab       	std	Y+48, r25	; 0x30
    28fa:	8f a7       	std	Y+47, r24	; 0x2f
    28fc:	0f c0       	rjmp	.+30     	; 0x291c <LCD_vidLatch+0x460>
    28fe:	89 e1       	ldi	r24, 0x19	; 25
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	9e a7       	std	Y+46, r25	; 0x2e
    2904:	8d a7       	std	Y+45, r24	; 0x2d
    2906:	8d a5       	ldd	r24, Y+45	; 0x2d
    2908:	9e a5       	ldd	r25, Y+46	; 0x2e
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	f1 f7       	brne	.-4      	; 0x290a <LCD_vidLatch+0x44e>
    290e:	9e a7       	std	Y+46, r25	; 0x2e
    2910:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2912:	8f a5       	ldd	r24, Y+47	; 0x2f
    2914:	98 a9       	ldd	r25, Y+48	; 0x30
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	98 ab       	std	Y+48, r25	; 0x30
    291a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291c:	8f a5       	ldd	r24, Y+47	; 0x2f
    291e:	98 a9       	ldd	r25, Y+48	; 0x30
    2920:	00 97       	sbiw	r24, 0x00	; 0
    2922:	69 f7       	brne	.-38     	; 0x28fe <LCD_vidLatch+0x442>
    2924:	14 c0       	rjmp	.+40     	; 0x294e <LCD_vidLatch+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2926:	69 a9       	ldd	r22, Y+49	; 0x31
    2928:	7a a9       	ldd	r23, Y+50	; 0x32
    292a:	8b a9       	ldd	r24, Y+51	; 0x33
    292c:	9c a9       	ldd	r25, Y+52	; 0x34
    292e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	98 ab       	std	Y+48, r25	; 0x30
    2938:	8f a7       	std	Y+47, r24	; 0x2f
    293a:	8f a5       	ldd	r24, Y+47	; 0x2f
    293c:	98 a9       	ldd	r25, Y+48	; 0x30
    293e:	9c a7       	std	Y+44, r25	; 0x2c
    2940:	8b a7       	std	Y+43, r24	; 0x2b
    2942:	8b a5       	ldd	r24, Y+43	; 0x2b
    2944:	9c a5       	ldd	r25, Y+44	; 0x2c
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	f1 f7       	brne	.-4      	; 0x2946 <LCD_vidLatch+0x48a>
    294a:	9c a7       	std	Y+44, r25	; 0x2c
    294c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	63 e0       	ldi	r22, 0x03	; 3
    2952:	40 e0       	ldi	r20, 0x00	; 0
    2954:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	a0 e2       	ldi	r26, 0x20	; 32
    295e:	b1 e4       	ldi	r27, 0x41	; 65
    2960:	8f a3       	std	Y+39, r24	; 0x27
    2962:	98 a7       	std	Y+40, r25	; 0x28
    2964:	a9 a7       	std	Y+41, r26	; 0x29
    2966:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2968:	6f a1       	ldd	r22, Y+39	; 0x27
    296a:	78 a5       	ldd	r23, Y+40	; 0x28
    296c:	89 a5       	ldd	r24, Y+41	; 0x29
    296e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	4a e7       	ldi	r20, 0x7A	; 122
    2976:	53 e4       	ldi	r21, 0x43	; 67
    2978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	8b a3       	std	Y+35, r24	; 0x23
    2982:	9c a3       	std	Y+36, r25	; 0x24
    2984:	ad a3       	std	Y+37, r26	; 0x25
    2986:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2988:	6b a1       	ldd	r22, Y+35	; 0x23
    298a:	7c a1       	ldd	r23, Y+36	; 0x24
    298c:	8d a1       	ldd	r24, Y+37	; 0x25
    298e:	9e a1       	ldd	r25, Y+38	; 0x26
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e8       	ldi	r20, 0x80	; 128
    2996:	5f e3       	ldi	r21, 0x3F	; 63
    2998:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    299c:	88 23       	and	r24, r24
    299e:	2c f4       	brge	.+10     	; 0x29aa <LCD_vidLatch+0x4ee>
		__ticks = 1;
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9a a3       	std	Y+34, r25	; 0x22
    29a6:	89 a3       	std	Y+33, r24	; 0x21
    29a8:	3f c0       	rjmp	.+126    	; 0x2a28 <LCD_vidLatch+0x56c>
	else if (__tmp > 65535)
    29aa:	6b a1       	ldd	r22, Y+35	; 0x23
    29ac:	7c a1       	ldd	r23, Y+36	; 0x24
    29ae:	8d a1       	ldd	r24, Y+37	; 0x25
    29b0:	9e a1       	ldd	r25, Y+38	; 0x26
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	3f ef       	ldi	r19, 0xFF	; 255
    29b6:	4f e7       	ldi	r20, 0x7F	; 127
    29b8:	57 e4       	ldi	r21, 0x47	; 71
    29ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29be:	18 16       	cp	r1, r24
    29c0:	4c f5       	brge	.+82     	; 0x2a14 <LCD_vidLatch+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c2:	6f a1       	ldd	r22, Y+39	; 0x27
    29c4:	78 a5       	ldd	r23, Y+40	; 0x28
    29c6:	89 a5       	ldd	r24, Y+41	; 0x29
    29c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e2       	ldi	r20, 0x20	; 32
    29d0:	51 e4       	ldi	r21, 0x41	; 65
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	bc 01       	movw	r22, r24
    29dc:	cd 01       	movw	r24, r26
    29de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	9a a3       	std	Y+34, r25	; 0x22
    29e8:	89 a3       	std	Y+33, r24	; 0x21
    29ea:	0f c0       	rjmp	.+30     	; 0x2a0a <LCD_vidLatch+0x54e>
    29ec:	89 e1       	ldi	r24, 0x19	; 25
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	98 a3       	std	Y+32, r25	; 0x20
    29f2:	8f 8f       	std	Y+31, r24	; 0x1f
    29f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29f6:	98 a1       	ldd	r25, Y+32	; 0x20
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	f1 f7       	brne	.-4      	; 0x29f8 <LCD_vidLatch+0x53c>
    29fc:	98 a3       	std	Y+32, r25	; 0x20
    29fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a00:	89 a1       	ldd	r24, Y+33	; 0x21
    2a02:	9a a1       	ldd	r25, Y+34	; 0x22
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	9a a3       	std	Y+34, r25	; 0x22
    2a08:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	69 f7       	brne	.-38     	; 0x29ec <LCD_vidLatch+0x530>
    2a12:	14 c0       	rjmp	.+40     	; 0x2a3c <LCD_vidLatch+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a14:	6b a1       	ldd	r22, Y+35	; 0x23
    2a16:	7c a1       	ldd	r23, Y+36	; 0x24
    2a18:	8d a1       	ldd	r24, Y+37	; 0x25
    2a1a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	9a a3       	std	Y+34, r25	; 0x22
    2a26:	89 a3       	std	Y+33, r24	; 0x21
    2a28:	89 a1       	ldd	r24, Y+33	; 0x21
    2a2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a2c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a2e:	8d 8f       	std	Y+29, r24	; 0x1d
    2a30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <LCD_vidLatch+0x578>
    2a38:	9e 8f       	std	Y+30, r25	; 0x1e
    2a3a:	8d 8f       	std	Y+29, r24	; 0x1d


	_delay_ms(10);
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>3)&1));
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	eb 5a       	subi	r30, 0xAB	; 171
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	86 95       	lsr	r24
    2a46:	86 95       	lsr	r24
    2a48:	86 95       	lsr	r24
    2a4a:	98 2f       	mov	r25, r24
    2a4c:	91 70       	andi	r25, 0x01	; 1
    2a4e:	82 e0       	ldi	r24, 0x02	; 2
    2a50:	67 e0       	ldi	r22, 0x07	; 7
    2a52:	49 2f       	mov	r20, r25
    2a54:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>2)&1));
    2a58:	fe 01       	movw	r30, r28
    2a5a:	eb 5a       	subi	r30, 0xAB	; 171
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	80 81       	ld	r24, Z
    2a60:	86 95       	lsr	r24
    2a62:	86 95       	lsr	r24
    2a64:	98 2f       	mov	r25, r24
    2a66:	91 70       	andi	r25, 0x01	; 1
    2a68:	82 e0       	ldi	r24, 0x02	; 2
    2a6a:	66 e0       	ldi	r22, 0x06	; 6
    2a6c:	49 2f       	mov	r20, r25
    2a6e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
    2a72:	fe 01       	movw	r30, r28
    2a74:	eb 5a       	subi	r30, 0xAB	; 171
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	80 81       	ld	r24, Z
    2a7a:	86 95       	lsr	r24
    2a7c:	98 2f       	mov	r25, r24
    2a7e:	91 70       	andi	r25, 0x01	; 1
    2a80:	82 e0       	ldi	r24, 0x02	; 2
    2a82:	65 e0       	ldi	r22, 0x05	; 5
    2a84:	49 2f       	mov	r20, r25
    2a86:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	eb 5a       	subi	r30, 0xAB	; 171
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	80 81       	ld	r24, Z
    2a92:	98 2f       	mov	r25, r24
    2a94:	91 70       	andi	r25, 0x01	; 1
    2a96:	82 e0       	ldi	r24, 0x02	; 2
    2a98:	64 e0       	ldi	r22, 0x04	; 4
    2a9a:	49 2f       	mov	r20, r25
    2a9c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	63 e0       	ldi	r22, 0x03	; 3
    2aa4:	41 e0       	ldi	r20, 0x01	; 1
    2aa6:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	a0 e2       	ldi	r26, 0x20	; 32
    2ab0:	b1 e4       	ldi	r27, 0x41	; 65
    2ab2:	89 8f       	std	Y+25, r24	; 0x19
    2ab4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ab6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ab8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aba:	69 8d       	ldd	r22, Y+25	; 0x19
    2abc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ac0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	4a e7       	ldi	r20, 0x7A	; 122
    2ac8:	53 e4       	ldi	r21, 0x43	; 67
    2aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	8d 8b       	std	Y+21, r24	; 0x15
    2ad4:	9e 8b       	std	Y+22, r25	; 0x16
    2ad6:	af 8b       	std	Y+23, r26	; 0x17
    2ad8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ada:	6d 89       	ldd	r22, Y+21	; 0x15
    2adc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ade:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	40 e8       	ldi	r20, 0x80	; 128
    2ae8:	5f e3       	ldi	r21, 0x3F	; 63
    2aea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aee:	88 23       	and	r24, r24
    2af0:	2c f4       	brge	.+10     	; 0x2afc <LCD_vidLatch+0x640>
		__ticks = 1;
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	9c 8b       	std	Y+20, r25	; 0x14
    2af8:	8b 8b       	std	Y+19, r24	; 0x13
    2afa:	3f c0       	rjmp	.+126    	; 0x2b7a <LCD_vidLatch+0x6be>
	else if (__tmp > 65535)
    2afc:	6d 89       	ldd	r22, Y+21	; 0x15
    2afe:	7e 89       	ldd	r23, Y+22	; 0x16
    2b00:	8f 89       	ldd	r24, Y+23	; 0x17
    2b02:	98 8d       	ldd	r25, Y+24	; 0x18
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	3f ef       	ldi	r19, 0xFF	; 255
    2b08:	4f e7       	ldi	r20, 0x7F	; 127
    2b0a:	57 e4       	ldi	r21, 0x47	; 71
    2b0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b10:	18 16       	cp	r1, r24
    2b12:	4c f5       	brge	.+82     	; 0x2b66 <LCD_vidLatch+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b14:	69 8d       	ldd	r22, Y+25	; 0x19
    2b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	40 e2       	ldi	r20, 0x20	; 32
    2b22:	51 e4       	ldi	r21, 0x41	; 65
    2b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	bc 01       	movw	r22, r24
    2b2e:	cd 01       	movw	r24, r26
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	9c 8b       	std	Y+20, r25	; 0x14
    2b3a:	8b 8b       	std	Y+19, r24	; 0x13
    2b3c:	0f c0       	rjmp	.+30     	; 0x2b5c <LCD_vidLatch+0x6a0>
    2b3e:	89 e1       	ldi	r24, 0x19	; 25
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	9a 8b       	std	Y+18, r25	; 0x12
    2b44:	89 8b       	std	Y+17, r24	; 0x11
    2b46:	89 89       	ldd	r24, Y+17	; 0x11
    2b48:	9a 89       	ldd	r25, Y+18	; 0x12
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <LCD_vidLatch+0x68e>
    2b4e:	9a 8b       	std	Y+18, r25	; 0x12
    2b50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b52:	8b 89       	ldd	r24, Y+19	; 0x13
    2b54:	9c 89       	ldd	r25, Y+20	; 0x14
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	9c 8b       	std	Y+20, r25	; 0x14
    2b5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b60:	00 97       	sbiw	r24, 0x00	; 0
    2b62:	69 f7       	brne	.-38     	; 0x2b3e <LCD_vidLatch+0x682>
    2b64:	14 c0       	rjmp	.+40     	; 0x2b8e <LCD_vidLatch+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b66:	6d 89       	ldd	r22, Y+21	; 0x15
    2b68:	7e 89       	ldd	r23, Y+22	; 0x16
    2b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	9c 8b       	std	Y+20, r25	; 0x14
    2b78:	8b 8b       	std	Y+19, r24	; 0x13
    2b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7e:	98 8b       	std	Y+16, r25	; 0x10
    2b80:	8f 87       	std	Y+15, r24	; 0x0f
    2b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b84:	98 89       	ldd	r25, Y+16	; 0x10
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <LCD_vidLatch+0x6ca>
    2b8a:	98 8b       	std	Y+16, r25	; 0x10
    2b8c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	63 e0       	ldi	r22, 0x03	; 3
    2b92:	40 e0       	ldi	r20, 0x00	; 0
    2b94:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	a0 e2       	ldi	r26, 0x20	; 32
    2b9e:	b1 e4       	ldi	r27, 0x41	; 65
    2ba0:	8b 87       	std	Y+11, r24	; 0x0b
    2ba2:	9c 87       	std	Y+12, r25	; 0x0c
    2ba4:	ad 87       	std	Y+13, r26	; 0x0d
    2ba6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2baa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	4a e7       	ldi	r20, 0x7A	; 122
    2bb6:	53 e4       	ldi	r21, 0x43	; 67
    2bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	8f 83       	std	Y+7, r24	; 0x07
    2bc2:	98 87       	std	Y+8, r25	; 0x08
    2bc4:	a9 87       	std	Y+9, r26	; 0x09
    2bc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bca:	78 85       	ldd	r23, Y+8	; 0x08
    2bcc:	89 85       	ldd	r24, Y+9	; 0x09
    2bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e8       	ldi	r20, 0x80	; 128
    2bd6:	5f e3       	ldi	r21, 0x3F	; 63
    2bd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bdc:	88 23       	and	r24, r24
    2bde:	2c f4       	brge	.+10     	; 0x2bea <LCD_vidLatch+0x72e>
		__ticks = 1;
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	9e 83       	std	Y+6, r25	; 0x06
    2be6:	8d 83       	std	Y+5, r24	; 0x05
    2be8:	3f c0       	rjmp	.+126    	; 0x2c68 <LCD_vidLatch+0x7ac>
	else if (__tmp > 65535)
    2bea:	6f 81       	ldd	r22, Y+7	; 0x07
    2bec:	78 85       	ldd	r23, Y+8	; 0x08
    2bee:	89 85       	ldd	r24, Y+9	; 0x09
    2bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	3f ef       	ldi	r19, 0xFF	; 255
    2bf6:	4f e7       	ldi	r20, 0x7F	; 127
    2bf8:	57 e4       	ldi	r21, 0x47	; 71
    2bfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bfe:	18 16       	cp	r1, r24
    2c00:	4c f5       	brge	.+82     	; 0x2c54 <LCD_vidLatch+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	40 e2       	ldi	r20, 0x20	; 32
    2c10:	51 e4       	ldi	r21, 0x41	; 65
    2c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	bc 01       	movw	r22, r24
    2c1c:	cd 01       	movw	r24, r26
    2c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	9e 83       	std	Y+6, r25	; 0x06
    2c28:	8d 83       	std	Y+5, r24	; 0x05
    2c2a:	0f c0       	rjmp	.+30     	; 0x2c4a <LCD_vidLatch+0x78e>
    2c2c:	89 e1       	ldi	r24, 0x19	; 25
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	9c 83       	std	Y+4, r25	; 0x04
    2c32:	8b 83       	std	Y+3, r24	; 0x03
    2c34:	8b 81       	ldd	r24, Y+3	; 0x03
    2c36:	9c 81       	ldd	r25, Y+4	; 0x04
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	f1 f7       	brne	.-4      	; 0x2c38 <LCD_vidLatch+0x77c>
    2c3c:	9c 83       	std	Y+4, r25	; 0x04
    2c3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c40:	8d 81       	ldd	r24, Y+5	; 0x05
    2c42:	9e 81       	ldd	r25, Y+6	; 0x06
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	9e 83       	std	Y+6, r25	; 0x06
    2c48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4e:	00 97       	sbiw	r24, 0x00	; 0
    2c50:	69 f7       	brne	.-38     	; 0x2c2c <LCD_vidLatch+0x770>
    2c52:	14 c0       	rjmp	.+40     	; 0x2c7c <LCD_vidLatch+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c54:	6f 81       	ldd	r22, Y+7	; 0x07
    2c56:	78 85       	ldd	r23, Y+8	; 0x08
    2c58:	89 85       	ldd	r24, Y+9	; 0x09
    2c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	9e 83       	std	Y+6, r25	; 0x06
    2c66:	8d 83       	std	Y+5, r24	; 0x05
    2c68:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6c:	9a 83       	std	Y+2, r25	; 0x02
    2c6e:	89 83       	std	Y+1, r24	; 0x01
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	9a 81       	ldd	r25, Y+2	; 0x02
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	f1 f7       	brne	.-4      	; 0x2c74 <LCD_vidLatch+0x7b8>
    2c78:	9a 83       	std	Y+2, r25	; 0x02
    2c7a:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    2c7c:	cb 5a       	subi	r28, 0xAB	; 171
    2c7e:	df 4f       	sbci	r29, 0xFF	; 255
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	1f 91       	pop	r17
    2c90:	0f 91       	pop	r16
    2c92:	08 95       	ret

00002c94 <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	ab 97       	sbiw	r28, 0x2b	; 43
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	de bf       	out	0x3e, r29	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	cd bf       	out	0x3d, r28	; 61
    2ca8:	8b a7       	std	Y+43, r24	; 0x2b
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	61 e0       	ldi	r22, 0x01	; 1
    2cae:	40 e0       	ldi	r20, 0x00	; 0
    2cb0:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	62 e0       	ldi	r22, 0x02	; 2
    2cb8:	40 e0       	ldi	r20, 0x00	; 0
    2cba:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	63 e0       	ldi	r22, 0x03	; 3
    2cc2:	40 e0       	ldi	r20, 0x00	; 0
    2cc4:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    2cc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cca:	98 2f       	mov	r25, r24
    2ccc:	99 1f       	adc	r25, r25
    2cce:	99 27       	eor	r25, r25
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	82 e0       	ldi	r24, 0x02	; 2
    2cd4:	67 e0       	ldi	r22, 0x07	; 7
    2cd6:	49 2f       	mov	r20, r25
    2cd8:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    2cdc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cde:	82 95       	swap	r24
    2ce0:	86 95       	lsr	r24
    2ce2:	86 95       	lsr	r24
    2ce4:	83 70       	andi	r24, 0x03	; 3
    2ce6:	98 2f       	mov	r25, r24
    2ce8:	91 70       	andi	r25, 0x01	; 1
    2cea:	82 e0       	ldi	r24, 0x02	; 2
    2cec:	66 e0       	ldi	r22, 0x06	; 6
    2cee:	49 2f       	mov	r20, r25
    2cf0:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    2cf4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cf6:	82 95       	swap	r24
    2cf8:	86 95       	lsr	r24
    2cfa:	87 70       	andi	r24, 0x07	; 7
    2cfc:	98 2f       	mov	r25, r24
    2cfe:	91 70       	andi	r25, 0x01	; 1
    2d00:	82 e0       	ldi	r24, 0x02	; 2
    2d02:	65 e0       	ldi	r22, 0x05	; 5
    2d04:	49 2f       	mov	r20, r25
    2d06:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    2d0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d0c:	82 95       	swap	r24
    2d0e:	8f 70       	andi	r24, 0x0F	; 15
    2d10:	98 2f       	mov	r25, r24
    2d12:	91 70       	andi	r25, 0x01	; 1
    2d14:	82 e0       	ldi	r24, 0x02	; 2
    2d16:	64 e0       	ldi	r22, 0x04	; 4
    2d18:	49 2f       	mov	r20, r25
    2d1a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));

#elif LCD_MODE == FOUR_BIT

	if(Copy_u8Command == 0x28)
    2d1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d20:	88 32       	cpi	r24, 0x28	; 40
    2d22:	09 f0       	breq	.+2      	; 0x2d26 <LCD_invidSendCommend+0x92>
    2d24:	a7 c0       	rjmp	.+334    	; 0x2e74 <LCD_invidSendCommend+0x1e0>
	{
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	63 e0       	ldi	r22, 0x03	; 3
    2d2a:	41 e0       	ldi	r20, 0x01	; 1
    2d2c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	a0 e2       	ldi	r26, 0x20	; 32
    2d36:	b1 e4       	ldi	r27, 0x41	; 65
    2d38:	8f a3       	std	Y+39, r24	; 0x27
    2d3a:	98 a7       	std	Y+40, r25	; 0x28
    2d3c:	a9 a7       	std	Y+41, r26	; 0x29
    2d3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d40:	6f a1       	ldd	r22, Y+39	; 0x27
    2d42:	78 a5       	ldd	r23, Y+40	; 0x28
    2d44:	89 a5       	ldd	r24, Y+41	; 0x29
    2d46:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	4a e7       	ldi	r20, 0x7A	; 122
    2d4e:	53 e4       	ldi	r21, 0x43	; 67
    2d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	8b a3       	std	Y+35, r24	; 0x23
    2d5a:	9c a3       	std	Y+36, r25	; 0x24
    2d5c:	ad a3       	std	Y+37, r26	; 0x25
    2d5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d60:	6b a1       	ldd	r22, Y+35	; 0x23
    2d62:	7c a1       	ldd	r23, Y+36	; 0x24
    2d64:	8d a1       	ldd	r24, Y+37	; 0x25
    2d66:	9e a1       	ldd	r25, Y+38	; 0x26
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e8       	ldi	r20, 0x80	; 128
    2d6e:	5f e3       	ldi	r21, 0x3F	; 63
    2d70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d74:	88 23       	and	r24, r24
    2d76:	2c f4       	brge	.+10     	; 0x2d82 <LCD_invidSendCommend+0xee>
		__ticks = 1;
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	9a a3       	std	Y+34, r25	; 0x22
    2d7e:	89 a3       	std	Y+33, r24	; 0x21
    2d80:	3f c0       	rjmp	.+126    	; 0x2e00 <LCD_invidSendCommend+0x16c>
	else if (__tmp > 65535)
    2d82:	6b a1       	ldd	r22, Y+35	; 0x23
    2d84:	7c a1       	ldd	r23, Y+36	; 0x24
    2d86:	8d a1       	ldd	r24, Y+37	; 0x25
    2d88:	9e a1       	ldd	r25, Y+38	; 0x26
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	3f ef       	ldi	r19, 0xFF	; 255
    2d8e:	4f e7       	ldi	r20, 0x7F	; 127
    2d90:	57 e4       	ldi	r21, 0x47	; 71
    2d92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d96:	18 16       	cp	r1, r24
    2d98:	4c f5       	brge	.+82     	; 0x2dec <LCD_invidSendCommend+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9a:	6f a1       	ldd	r22, Y+39	; 0x27
    2d9c:	78 a5       	ldd	r23, Y+40	; 0x28
    2d9e:	89 a5       	ldd	r24, Y+41	; 0x29
    2da0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e2       	ldi	r20, 0x20	; 32
    2da8:	51 e4       	ldi	r21, 0x41	; 65
    2daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	9a a3       	std	Y+34, r25	; 0x22
    2dc0:	89 a3       	std	Y+33, r24	; 0x21
    2dc2:	0f c0       	rjmp	.+30     	; 0x2de2 <LCD_invidSendCommend+0x14e>
    2dc4:	89 e1       	ldi	r24, 0x19	; 25
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	98 a3       	std	Y+32, r25	; 0x20
    2dca:	8f 8f       	std	Y+31, r24	; 0x1f
    2dcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dce:	98 a1       	ldd	r25, Y+32	; 0x20
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <LCD_invidSendCommend+0x13c>
    2dd4:	98 a3       	std	Y+32, r25	; 0x20
    2dd6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dda:	9a a1       	ldd	r25, Y+34	; 0x22
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	9a a3       	std	Y+34, r25	; 0x22
    2de0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de2:	89 a1       	ldd	r24, Y+33	; 0x21
    2de4:	9a a1       	ldd	r25, Y+34	; 0x22
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	69 f7       	brne	.-38     	; 0x2dc4 <LCD_invidSendCommend+0x130>
    2dea:	14 c0       	rjmp	.+40     	; 0x2e14 <LCD_invidSendCommend+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dec:	6b a1       	ldd	r22, Y+35	; 0x23
    2dee:	7c a1       	ldd	r23, Y+36	; 0x24
    2df0:	8d a1       	ldd	r24, Y+37	; 0x25
    2df2:	9e a1       	ldd	r25, Y+38	; 0x26
    2df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	9a a3       	std	Y+34, r25	; 0x22
    2dfe:	89 a3       	std	Y+33, r24	; 0x21
    2e00:	89 a1       	ldd	r24, Y+33	; 0x21
    2e02:	9a a1       	ldd	r25, Y+34	; 0x22
    2e04:	9e 8f       	std	Y+30, r25	; 0x1e
    2e06:	8d 8f       	std	Y+29, r24	; 0x1d
    2e08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <LCD_invidSendCommend+0x178>
    2e10:	9e 8f       	std	Y+30, r25	; 0x1e
    2e12:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	63 e0       	ldi	r22, 0x03	; 3
    2e18:	40 e0       	ldi	r20, 0x00	; 0
    2e1a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>

		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    2e1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e20:	98 2f       	mov	r25, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	99 27       	eor	r25, r25
    2e26:	99 1f       	adc	r25, r25
    2e28:	82 e0       	ldi	r24, 0x02	; 2
    2e2a:	67 e0       	ldi	r22, 0x07	; 7
    2e2c:	49 2f       	mov	r20, r25
    2e2e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    2e32:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e34:	82 95       	swap	r24
    2e36:	86 95       	lsr	r24
    2e38:	86 95       	lsr	r24
    2e3a:	83 70       	andi	r24, 0x03	; 3
    2e3c:	98 2f       	mov	r25, r24
    2e3e:	91 70       	andi	r25, 0x01	; 1
    2e40:	82 e0       	ldi	r24, 0x02	; 2
    2e42:	66 e0       	ldi	r22, 0x06	; 6
    2e44:	49 2f       	mov	r20, r25
    2e46:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    2e4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e4c:	82 95       	swap	r24
    2e4e:	86 95       	lsr	r24
    2e50:	87 70       	andi	r24, 0x07	; 7
    2e52:	98 2f       	mov	r25, r24
    2e54:	91 70       	andi	r25, 0x01	; 1
    2e56:	82 e0       	ldi	r24, 0x02	; 2
    2e58:	65 e0       	ldi	r22, 0x05	; 5
    2e5a:	49 2f       	mov	r20, r25
    2e5c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    2e60:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e62:	82 95       	swap	r24
    2e64:	8f 70       	andi	r24, 0x0F	; 15
    2e66:	98 2f       	mov	r25, r24
    2e68:	91 70       	andi	r25, 0x01	; 1
    2e6a:	82 e0       	ldi	r24, 0x02	; 2
    2e6c:	64 e0       	ldi	r22, 0x04	; 4
    2e6e:	49 2f       	mov	r20, r25
    2e70:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	}
	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	63 e0       	ldi	r22, 0x03	; 3
    2e78:	41 e0       	ldi	r20, 0x01	; 1
    2e7a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	a0 e2       	ldi	r26, 0x20	; 32
    2e84:	b1 e4       	ldi	r27, 0x41	; 65
    2e86:	89 8f       	std	Y+25, r24	; 0x19
    2e88:	9a 8f       	std	Y+26, r25	; 0x1a
    2e8a:	ab 8f       	std	Y+27, r26	; 0x1b
    2e8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	4a e7       	ldi	r20, 0x7A	; 122
    2e9c:	53 e4       	ldi	r21, 0x43	; 67
    2e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	8d 8b       	std	Y+21, r24	; 0x15
    2ea8:	9e 8b       	std	Y+22, r25	; 0x16
    2eaa:	af 8b       	std	Y+23, r26	; 0x17
    2eac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2eae:	6d 89       	ldd	r22, Y+21	; 0x15
    2eb0:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e8       	ldi	r20, 0x80	; 128
    2ebc:	5f e3       	ldi	r21, 0x3F	; 63
    2ebe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ec2:	88 23       	and	r24, r24
    2ec4:	2c f4       	brge	.+10     	; 0x2ed0 <LCD_invidSendCommend+0x23c>
		__ticks = 1;
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	9c 8b       	std	Y+20, r25	; 0x14
    2ecc:	8b 8b       	std	Y+19, r24	; 0x13
    2ece:	3f c0       	rjmp	.+126    	; 0x2f4e <LCD_invidSendCommend+0x2ba>
	else if (__tmp > 65535)
    2ed0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ed2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	3f ef       	ldi	r19, 0xFF	; 255
    2edc:	4f e7       	ldi	r20, 0x7F	; 127
    2ede:	57 e4       	ldi	r21, 0x47	; 71
    2ee0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ee4:	18 16       	cp	r1, r24
    2ee6:	4c f5       	brge	.+82     	; 0x2f3a <LCD_invidSendCommend+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee8:	69 8d       	ldd	r22, Y+25	; 0x19
    2eea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	40 e2       	ldi	r20, 0x20	; 32
    2ef6:	51 e4       	ldi	r21, 0x41	; 65
    2ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	bc 01       	movw	r22, r24
    2f02:	cd 01       	movw	r24, r26
    2f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	9c 8b       	std	Y+20, r25	; 0x14
    2f0e:	8b 8b       	std	Y+19, r24	; 0x13
    2f10:	0f c0       	rjmp	.+30     	; 0x2f30 <LCD_invidSendCommend+0x29c>
    2f12:	89 e1       	ldi	r24, 0x19	; 25
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	9a 8b       	std	Y+18, r25	; 0x12
    2f18:	89 8b       	std	Y+17, r24	; 0x11
    2f1a:	89 89       	ldd	r24, Y+17	; 0x11
    2f1c:	9a 89       	ldd	r25, Y+18	; 0x12
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	f1 f7       	brne	.-4      	; 0x2f1e <LCD_invidSendCommend+0x28a>
    2f22:	9a 8b       	std	Y+18, r25	; 0x12
    2f24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f26:	8b 89       	ldd	r24, Y+19	; 0x13
    2f28:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	9c 8b       	std	Y+20, r25	; 0x14
    2f2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f30:	8b 89       	ldd	r24, Y+19	; 0x13
    2f32:	9c 89       	ldd	r25, Y+20	; 0x14
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	69 f7       	brne	.-38     	; 0x2f12 <LCD_invidSendCommend+0x27e>
    2f38:	14 c0       	rjmp	.+40     	; 0x2f62 <LCD_invidSendCommend+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f40:	98 8d       	ldd	r25, Y+24	; 0x18
    2f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	9c 8b       	std	Y+20, r25	; 0x14
    2f4c:	8b 8b       	std	Y+19, r24	; 0x13
    2f4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f50:	9c 89       	ldd	r25, Y+20	; 0x14
    2f52:	98 8b       	std	Y+16, r25	; 0x10
    2f54:	8f 87       	std	Y+15, r24	; 0x0f
    2f56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f58:	98 89       	ldd	r25, Y+16	; 0x10
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	f1 f7       	brne	.-4      	; 0x2f5a <LCD_invidSendCommend+0x2c6>
    2f5e:	98 8b       	std	Y+16, r25	; 0x10
    2f60:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	63 e0       	ldi	r22, 0x03	; 3
    2f66:	40 e0       	ldi	r20, 0x00	; 0
    2f68:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>3)&1));
    2f6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f6e:	86 95       	lsr	r24
    2f70:	86 95       	lsr	r24
    2f72:	86 95       	lsr	r24
    2f74:	98 2f       	mov	r25, r24
    2f76:	91 70       	andi	r25, 0x01	; 1
    2f78:	82 e0       	ldi	r24, 0x02	; 2
    2f7a:	67 e0       	ldi	r22, 0x07	; 7
    2f7c:	49 2f       	mov	r20, r25
    2f7e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
    2f82:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f84:	86 95       	lsr	r24
    2f86:	86 95       	lsr	r24
    2f88:	98 2f       	mov	r25, r24
    2f8a:	91 70       	andi	r25, 0x01	; 1
    2f8c:	82 e0       	ldi	r24, 0x02	; 2
    2f8e:	66 e0       	ldi	r22, 0x06	; 6
    2f90:	49 2f       	mov	r20, r25
    2f92:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
    2f96:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f98:	86 95       	lsr	r24
    2f9a:	98 2f       	mov	r25, r24
    2f9c:	91 70       	andi	r25, 0x01	; 1
    2f9e:	82 e0       	ldi	r24, 0x02	; 2
    2fa0:	65 e0       	ldi	r22, 0x05	; 5
    2fa2:	49 2f       	mov	r20, r25
    2fa4:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));
    2fa8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2faa:	98 2f       	mov	r25, r24
    2fac:	91 70       	andi	r25, 0x01	; 1
    2fae:	82 e0       	ldi	r24, 0x02	; 2
    2fb0:	64 e0       	ldi	r22, 0x04	; 4
    2fb2:	49 2f       	mov	r20, r25
    2fb4:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	63 e0       	ldi	r22, 0x03	; 3
    2fbc:	41 e0       	ldi	r20, 0x01	; 1
    2fbe:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	a0 e2       	ldi	r26, 0x20	; 32
    2fc8:	b1 e4       	ldi	r27, 0x41	; 65
    2fca:	8b 87       	std	Y+11, r24	; 0x0b
    2fcc:	9c 87       	std	Y+12, r25	; 0x0c
    2fce:	ad 87       	std	Y+13, r26	; 0x0d
    2fd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	4a e7       	ldi	r20, 0x7A	; 122
    2fe0:	53 e4       	ldi	r21, 0x43	; 67
    2fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	8f 83       	std	Y+7, r24	; 0x07
    2fec:	98 87       	std	Y+8, r25	; 0x08
    2fee:	a9 87       	std	Y+9, r26	; 0x09
    2ff0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff4:	78 85       	ldd	r23, Y+8	; 0x08
    2ff6:	89 85       	ldd	r24, Y+9	; 0x09
    2ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e8       	ldi	r20, 0x80	; 128
    3000:	5f e3       	ldi	r21, 0x3F	; 63
    3002:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3006:	88 23       	and	r24, r24
    3008:	2c f4       	brge	.+10     	; 0x3014 <LCD_invidSendCommend+0x380>
		__ticks = 1;
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	9e 83       	std	Y+6, r25	; 0x06
    3010:	8d 83       	std	Y+5, r24	; 0x05
    3012:	3f c0       	rjmp	.+126    	; 0x3092 <LCD_invidSendCommend+0x3fe>
	else if (__tmp > 65535)
    3014:	6f 81       	ldd	r22, Y+7	; 0x07
    3016:	78 85       	ldd	r23, Y+8	; 0x08
    3018:	89 85       	ldd	r24, Y+9	; 0x09
    301a:	9a 85       	ldd	r25, Y+10	; 0x0a
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	3f ef       	ldi	r19, 0xFF	; 255
    3020:	4f e7       	ldi	r20, 0x7F	; 127
    3022:	57 e4       	ldi	r21, 0x47	; 71
    3024:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3028:	18 16       	cp	r1, r24
    302a:	4c f5       	brge	.+82     	; 0x307e <LCD_invidSendCommend+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    302c:	6b 85       	ldd	r22, Y+11	; 0x0b
    302e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3030:	8d 85       	ldd	r24, Y+13	; 0x0d
    3032:	9e 85       	ldd	r25, Y+14	; 0x0e
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	40 e2       	ldi	r20, 0x20	; 32
    303a:	51 e4       	ldi	r21, 0x41	; 65
    303c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	bc 01       	movw	r22, r24
    3046:	cd 01       	movw	r24, r26
    3048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	9e 83       	std	Y+6, r25	; 0x06
    3052:	8d 83       	std	Y+5, r24	; 0x05
    3054:	0f c0       	rjmp	.+30     	; 0x3074 <LCD_invidSendCommend+0x3e0>
    3056:	89 e1       	ldi	r24, 0x19	; 25
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	9c 83       	std	Y+4, r25	; 0x04
    305c:	8b 83       	std	Y+3, r24	; 0x03
    305e:	8b 81       	ldd	r24, Y+3	; 0x03
    3060:	9c 81       	ldd	r25, Y+4	; 0x04
    3062:	01 97       	sbiw	r24, 0x01	; 1
    3064:	f1 f7       	brne	.-4      	; 0x3062 <LCD_invidSendCommend+0x3ce>
    3066:	9c 83       	std	Y+4, r25	; 0x04
    3068:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    306a:	8d 81       	ldd	r24, Y+5	; 0x05
    306c:	9e 81       	ldd	r25, Y+6	; 0x06
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	9e 83       	std	Y+6, r25	; 0x06
    3072:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3074:	8d 81       	ldd	r24, Y+5	; 0x05
    3076:	9e 81       	ldd	r25, Y+6	; 0x06
    3078:	00 97       	sbiw	r24, 0x00	; 0
    307a:	69 f7       	brne	.-38     	; 0x3056 <LCD_invidSendCommend+0x3c2>
    307c:	14 c0       	rjmp	.+40     	; 0x30a6 <LCD_invidSendCommend+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307e:	6f 81       	ldd	r22, Y+7	; 0x07
    3080:	78 85       	ldd	r23, Y+8	; 0x08
    3082:	89 85       	ldd	r24, Y+9	; 0x09
    3084:	9a 85       	ldd	r25, Y+10	; 0x0a
    3086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	9e 83       	std	Y+6, r25	; 0x06
    3090:	8d 83       	std	Y+5, r24	; 0x05
    3092:	8d 81       	ldd	r24, Y+5	; 0x05
    3094:	9e 81       	ldd	r25, Y+6	; 0x06
    3096:	9a 83       	std	Y+2, r25	; 0x02
    3098:	89 83       	std	Y+1, r24	; 0x01
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	9a 81       	ldd	r25, Y+2	; 0x02
    309e:	01 97       	sbiw	r24, 0x01	; 1
    30a0:	f1 f7       	brne	.-4      	; 0x309e <LCD_invidSendCommend+0x40a>
    30a2:	9a 83       	std	Y+2, r25	; 0x02
    30a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	63 e0       	ldi	r22, 0x03	; 3
    30aa:	40 e0       	ldi	r20, 0x00	; 0
    30ac:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <DIO_enuSetPinValue>
}
    30b0:	ab 96       	adiw	r28, 0x2b	; 43
    30b2:	0f b6       	in	r0, 0x3f	; 63
    30b4:	f8 94       	cli
    30b6:	de bf       	out	0x3e, r29	; 62
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	cd bf       	out	0x3d, r28	; 61
    30bc:	cf 91       	pop	r28
    30be:	df 91       	pop	r29
    30c0:	08 95       	ret

000030c2 <LCD_Clear>:
void LCD_Clear(){
    30c2:	df 93       	push	r29
    30c4:	cf 93       	push	r28
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62



		LCD_enuSendCommand(0x01);
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_enuSendCommand>
		LCD_enuSendCommand(0x80);
    30d0:	80 e8       	ldi	r24, 0x80	; 128
    30d2:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_enuSendCommand>





}
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	08 95       	ret

000030dc <LCD_GoTo>:
ES_t LCD_GoTo(u8 Copy_u8X , u8 Copy_u8Y){
    30dc:	df 93       	push	r29
    30de:	cf 93       	push	r28
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <LCD_GoTo+0x6>
    30e2:	0f 92       	push	r0
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	8a 83       	std	Y+2, r24	; 0x02
    30ea:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    30ec:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8X== 0)
    30ee:	8a 81       	ldd	r24, Y+2	; 0x02
    30f0:	88 23       	and	r24, r24
    30f2:	31 f4       	brne	.+12     	; 0x3100 <LCD_GoTo+0x24>
		{
			Local_enuErrorState = LCD_enuSendCommand((0x80)+Copy_u8Y);
    30f4:	8b 81       	ldd	r24, Y+3	; 0x03
    30f6:	80 58       	subi	r24, 0x80	; 128
    30f8:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_enuSendCommand>
    30fc:	89 83       	std	Y+1, r24	; 0x01
    30fe:	0b c0       	rjmp	.+22     	; 0x3116 <LCD_GoTo+0x3a>
		}
		else if(Copy_u8X== 1)
    3100:	8a 81       	ldd	r24, Y+2	; 0x02
    3102:	81 30       	cpi	r24, 0x01	; 1
    3104:	31 f4       	brne	.+12     	; 0x3112 <LCD_GoTo+0x36>
		{
			Local_enuErrorState = LCD_enuSendCommand((0xC0)+Copy_u8Y);
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	80 54       	subi	r24, 0x40	; 64
    310a:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_enuSendCommand>
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	02 c0       	rjmp	.+4      	; 0x3116 <LCD_GoTo+0x3a>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    3112:	83 e0       	ldi	r24, 0x03	; 3
    3114:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorState;
    3116:	89 81       	ldd	r24, Y+1	; 0x01





}
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	cf 91       	pop	r28
    3120:	df 91       	pop	r29
    3122:	08 95       	ret

00003124 <LCD_enuSendString>:


ES_t LCD_enuSendString(char* Copy_pcString)
{
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	00 d0       	rcall	.+0      	; 0x312a <LCD_enuSendString+0x6>
    312a:	00 d0       	rcall	.+0      	; 0x312c <LCD_enuSendString+0x8>
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	9c 83       	std	Y+4, r25	; 0x04
    3132:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3134:	1a 82       	std	Y+2, r1	; 0x02
if(Copy_pcString != NULL)
    3136:	8b 81       	ldd	r24, Y+3	; 0x03
    3138:	9c 81       	ldd	r25, Y+4	; 0x04
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	e9 f0       	breq	.+58     	; 0x3178 <LCD_enuSendString+0x54>
{
	u8 Local_u8Iterator=0;
    313e:	19 82       	std	Y+1, r1	; 0x01
    3140:	0f c0       	rjmp	.+30     	; 0x3160 <LCD_enuSendString+0x3c>
	while(Copy_pcString[Local_u8Iterator]!='\0')
	{
		Local_enuErrorState = LCD_enuDisplayChar(Copy_pcString[Local_u8Iterator]);
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	28 2f       	mov	r18, r24
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	8b 81       	ldd	r24, Y+3	; 0x03
    314a:	9c 81       	ldd	r25, Y+4	; 0x04
    314c:	fc 01       	movw	r30, r24
    314e:	e2 0f       	add	r30, r18
    3150:	f3 1f       	adc	r31, r19
    3152:	80 81       	ld	r24, Z
    3154:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_enuDisplayChar>
    3158:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Iterator ++;
    315a:	89 81       	ldd	r24, Y+1	; 0x01
    315c:	8f 5f       	subi	r24, 0xFF	; 255
    315e:	89 83       	std	Y+1, r24	; 0x01
{
	ES_t Local_enuErrorState = ES_NOK;
if(Copy_pcString != NULL)
{
	u8 Local_u8Iterator=0;
	while(Copy_pcString[Local_u8Iterator]!='\0')
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	9c 81       	ldd	r25, Y+4	; 0x04
    316a:	fc 01       	movw	r30, r24
    316c:	e2 0f       	add	r30, r18
    316e:	f3 1f       	adc	r31, r19
    3170:	80 81       	ld	r24, Z
    3172:	88 23       	and	r24, r24
    3174:	31 f7       	brne	.-52     	; 0x3142 <LCD_enuSendString+0x1e>
    3176:	02 c0       	rjmp	.+4      	; 0x317c <LCD_enuSendString+0x58>
	}

}
else
{
	Local_enuErrorState=ES_NULL_POINTER;
    3178:	82 e0       	ldi	r24, 0x02	; 2
    317a:	8a 83       	std	Y+2, r24	; 0x02
}

	return Local_enuErrorState;
    317c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    317e:	0f 90       	pop	r0
    3180:	0f 90       	pop	r0
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <main>:
#include "../MCAL/DIO/DIO_int.h"
#include "../MCAL/_ADC_/ADC_int.h"
#include "../HAL/LCD/LCD_int.h"
#include "../HAL/Th_LM/TH_int.h"
#include <util/delay.h>
int main(){
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	64 97       	sbiw	r28, 0x14	; 20
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61


u16 adcread=0;
    31a0:	18 8a       	std	Y+16, r1	; 0x10
    31a2:	1f 86       	std	Y+15, r1	; 0x0f
s32 Temp=0;
    31a4:	19 8a       	std	Y+17, r1	; 0x11
    31a6:	1a 8a       	std	Y+18, r1	; 0x12
    31a8:	1b 8a       	std	Y+19, r1	; 0x13
    31aa:	1c 8a       	std	Y+20, r1	; 0x14
DIO_enuInit();
    31ac:	0e 94 ab 0a 	call	0x1556	; 0x1556 <DIO_enuInit>
DIO_enuSetPinDirection(DIO_u8PORTA,DIO_u8PIN0,DIO_u8INPUT);
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	60 e0       	ldi	r22, 0x00	; 0
    31b4:	40 e0       	ldi	r20, 0x00	; 0
    31b6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_enuSetPinDirection>
DIO_enuSetPortDirection(DIO_u8PORTD,DIO_u8OUTPUT);
    31ba:	83 e0       	ldi	r24, 0x03	; 3
    31bc:	61 e0       	ldi	r22, 0x01	; 1
    31be:	0e 94 cb 0a 	call	0x1596	; 0x1596 <DIO_enuSetPortDirection>
ADC_enu_Int();
    31c2:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_enu_Int>
LCD_enuInit();
    31c6:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <LCD_enuInit>
TH_enuInit();
    31ca:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <TH_enuInit>
ADC_enuSelectChannel(0);
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <ADC_enuSelectChannel>
ADC_enuEnable();
    31d4:	0e 94 66 07 	call	0xecc	; 0xecc <ADC_enuEnable>
LCD_enuSendCommand(0x0c);
    31d8:	8c e0       	ldi	r24, 0x0C	; 12
    31da:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_enuSendCommand>
LCD_enuSendString("Temp =");
    31de:	80 e6       	ldi	r24, 0x60	; 96
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	0e 94 92 18 	call	0x3124	; 0x3124 <LCD_enuSendString>


		while(1){
			LCD_GoTo(0,6);
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	66 e0       	ldi	r22, 0x06	; 6
    31ea:	0e 94 6e 18 	call	0x30dc	; 0x30dc <LCD_GoTo>
			LCD_enuSendString("       ");
    31ee:	87 e6       	ldi	r24, 0x67	; 103
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	0e 94 92 18 	call	0x3124	; 0x3124 <LCD_enuSendString>
			LCD_GoTo(0,6);
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	66 e0       	ldi	r22, 0x06	; 6
    31fa:	0e 94 6e 18 	call	0x30dc	; 0x30dc <LCD_GoTo>

			ADC_enu_Start_Conversion();
    31fe:	0e 94 40 07 	call	0xe80	; 0xe80 <ADC_enu_Start_Conversion>
			ADC_enu_Read(&adcread);
    3202:	ce 01       	movw	r24, r28
    3204:	0f 96       	adiw	r24, 0x0f	; 15
    3206:	0e 94 be 07 	call	0xf7c	; 0xf7c <ADC_enu_Read>
          DIO_enuSetPortValue(DIO_u8PORTD,adcread);
    320a:	8f 85       	ldd	r24, Y+15	; 0x0f
    320c:	98 89       	ldd	r25, Y+16	; 0x10
    320e:	98 2f       	mov	r25, r24
    3210:	83 e0       	ldi	r24, 0x03	; 3
    3212:	69 2f       	mov	r22, r25
    3214:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_enuSetPortValue>
          TH_enuGetTem(adcread,&Temp);
    3218:	8f 85       	ldd	r24, Y+15	; 0x0f
    321a:	98 89       	ldd	r25, Y+16	; 0x10
    321c:	9e 01       	movw	r18, r28
    321e:	2f 5e       	subi	r18, 0xEF	; 239
    3220:	3f 4f       	sbci	r19, 0xFF	; 255
    3222:	b9 01       	movw	r22, r18
    3224:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <TH_enuGetTem>
          LCD_enuDisplayIntegerNum(Temp);
    3228:	89 89       	ldd	r24, Y+17	; 0x11
    322a:	9a 89       	ldd	r25, Y+18	; 0x12
    322c:	ab 89       	ldd	r26, Y+19	; 0x13
    322e:	bc 89       	ldd	r27, Y+20	; 0x14
    3230:	bc 01       	movw	r22, r24
    3232:	cd 01       	movw	r24, r26
    3234:	0e 94 a7 11 	call	0x234e	; 0x234e <LCD_enuDisplayIntegerNum>
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	aa ef       	ldi	r26, 0xFA	; 250
    323e:	b3 e4       	ldi	r27, 0x43	; 67
    3240:	8b 87       	std	Y+11, r24	; 0x0b
    3242:	9c 87       	std	Y+12, r25	; 0x0c
    3244:	ad 87       	std	Y+13, r26	; 0x0d
    3246:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3248:	6b 85       	ldd	r22, Y+11	; 0x0b
    324a:	7c 85       	ldd	r23, Y+12	; 0x0c
    324c:	8d 85       	ldd	r24, Y+13	; 0x0d
    324e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	4a e7       	ldi	r20, 0x7A	; 122
    3256:	53 e4       	ldi	r21, 0x43	; 67
    3258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	8f 83       	std	Y+7, r24	; 0x07
    3262:	98 87       	std	Y+8, r25	; 0x08
    3264:	a9 87       	std	Y+9, r26	; 0x09
    3266:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3268:	6f 81       	ldd	r22, Y+7	; 0x07
    326a:	78 85       	ldd	r23, Y+8	; 0x08
    326c:	89 85       	ldd	r24, Y+9	; 0x09
    326e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	40 e8       	ldi	r20, 0x80	; 128
    3276:	5f e3       	ldi	r21, 0x3F	; 63
    3278:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    327c:	88 23       	and	r24, r24
    327e:	2c f4       	brge	.+10     	; 0x328a <main+0xfe>
		__ticks = 1;
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	9e 83       	std	Y+6, r25	; 0x06
    3286:	8d 83       	std	Y+5, r24	; 0x05
    3288:	3f c0       	rjmp	.+126    	; 0x3308 <main+0x17c>
	else if (__tmp > 65535)
    328a:	6f 81       	ldd	r22, Y+7	; 0x07
    328c:	78 85       	ldd	r23, Y+8	; 0x08
    328e:	89 85       	ldd	r24, Y+9	; 0x09
    3290:	9a 85       	ldd	r25, Y+10	; 0x0a
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	3f ef       	ldi	r19, 0xFF	; 255
    3296:	4f e7       	ldi	r20, 0x7F	; 127
    3298:	57 e4       	ldi	r21, 0x47	; 71
    329a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    329e:	18 16       	cp	r1, r24
    32a0:	4c f5       	brge	.+82     	; 0x32f4 <main+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	40 e2       	ldi	r20, 0x20	; 32
    32b0:	51 e4       	ldi	r21, 0x41	; 65
    32b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	bc 01       	movw	r22, r24
    32bc:	cd 01       	movw	r24, r26
    32be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	9e 83       	std	Y+6, r25	; 0x06
    32c8:	8d 83       	std	Y+5, r24	; 0x05
    32ca:	0f c0       	rjmp	.+30     	; 0x32ea <main+0x15e>
    32cc:	89 e1       	ldi	r24, 0x19	; 25
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	9c 83       	std	Y+4, r25	; 0x04
    32d2:	8b 83       	std	Y+3, r24	; 0x03
    32d4:	8b 81       	ldd	r24, Y+3	; 0x03
    32d6:	9c 81       	ldd	r25, Y+4	; 0x04
    32d8:	01 97       	sbiw	r24, 0x01	; 1
    32da:	f1 f7       	brne	.-4      	; 0x32d8 <main+0x14c>
    32dc:	9c 83       	std	Y+4, r25	; 0x04
    32de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e0:	8d 81       	ldd	r24, Y+5	; 0x05
    32e2:	9e 81       	ldd	r25, Y+6	; 0x06
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	9e 83       	std	Y+6, r25	; 0x06
    32e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ea:	8d 81       	ldd	r24, Y+5	; 0x05
    32ec:	9e 81       	ldd	r25, Y+6	; 0x06
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	69 f7       	brne	.-38     	; 0x32cc <main+0x140>
    32f2:	79 cf       	rjmp	.-270    	; 0x31e6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f4:	6f 81       	ldd	r22, Y+7	; 0x07
    32f6:	78 85       	ldd	r23, Y+8	; 0x08
    32f8:	89 85       	ldd	r24, Y+9	; 0x09
    32fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	9e 83       	std	Y+6, r25	; 0x06
    3306:	8d 83       	std	Y+5, r24	; 0x05
    3308:	8d 81       	ldd	r24, Y+5	; 0x05
    330a:	9e 81       	ldd	r25, Y+6	; 0x06
    330c:	9a 83       	std	Y+2, r25	; 0x02
    330e:	89 83       	std	Y+1, r24	; 0x01
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	9a 81       	ldd	r25, Y+2	; 0x02
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	f1 f7       	brne	.-4      	; 0x3314 <main+0x188>
    3318:	9a 83       	std	Y+2, r25	; 0x02
    331a:	89 83       	std	Y+1, r24	; 0x01
    331c:	64 cf       	rjmp	.-312    	; 0x31e6 <main+0x5a>

0000331e <__mulsi3>:
    331e:	62 9f       	mul	r22, r18
    3320:	d0 01       	movw	r26, r0
    3322:	73 9f       	mul	r23, r19
    3324:	f0 01       	movw	r30, r0
    3326:	82 9f       	mul	r24, r18
    3328:	e0 0d       	add	r30, r0
    332a:	f1 1d       	adc	r31, r1
    332c:	64 9f       	mul	r22, r20
    332e:	e0 0d       	add	r30, r0
    3330:	f1 1d       	adc	r31, r1
    3332:	92 9f       	mul	r25, r18
    3334:	f0 0d       	add	r31, r0
    3336:	83 9f       	mul	r24, r19
    3338:	f0 0d       	add	r31, r0
    333a:	74 9f       	mul	r23, r20
    333c:	f0 0d       	add	r31, r0
    333e:	65 9f       	mul	r22, r21
    3340:	f0 0d       	add	r31, r0
    3342:	99 27       	eor	r25, r25
    3344:	72 9f       	mul	r23, r18
    3346:	b0 0d       	add	r27, r0
    3348:	e1 1d       	adc	r30, r1
    334a:	f9 1f       	adc	r31, r25
    334c:	63 9f       	mul	r22, r19
    334e:	b0 0d       	add	r27, r0
    3350:	e1 1d       	adc	r30, r1
    3352:	f9 1f       	adc	r31, r25
    3354:	bd 01       	movw	r22, r26
    3356:	cf 01       	movw	r24, r30
    3358:	11 24       	eor	r1, r1
    335a:	08 95       	ret

0000335c <__divmodsi4>:
    335c:	97 fb       	bst	r25, 7
    335e:	09 2e       	mov	r0, r25
    3360:	05 26       	eor	r0, r21
    3362:	0e d0       	rcall	.+28     	; 0x3380 <__divmodsi4_neg1>
    3364:	57 fd       	sbrc	r21, 7
    3366:	04 d0       	rcall	.+8      	; 0x3370 <__divmodsi4_neg2>
    3368:	14 d0       	rcall	.+40     	; 0x3392 <__udivmodsi4>
    336a:	0a d0       	rcall	.+20     	; 0x3380 <__divmodsi4_neg1>
    336c:	00 1c       	adc	r0, r0
    336e:	38 f4       	brcc	.+14     	; 0x337e <__divmodsi4_exit>

00003370 <__divmodsi4_neg2>:
    3370:	50 95       	com	r21
    3372:	40 95       	com	r20
    3374:	30 95       	com	r19
    3376:	21 95       	neg	r18
    3378:	3f 4f       	sbci	r19, 0xFF	; 255
    337a:	4f 4f       	sbci	r20, 0xFF	; 255
    337c:	5f 4f       	sbci	r21, 0xFF	; 255

0000337e <__divmodsi4_exit>:
    337e:	08 95       	ret

00003380 <__divmodsi4_neg1>:
    3380:	f6 f7       	brtc	.-4      	; 0x337e <__divmodsi4_exit>
    3382:	90 95       	com	r25
    3384:	80 95       	com	r24
    3386:	70 95       	com	r23
    3388:	61 95       	neg	r22
    338a:	7f 4f       	sbci	r23, 0xFF	; 255
    338c:	8f 4f       	sbci	r24, 0xFF	; 255
    338e:	9f 4f       	sbci	r25, 0xFF	; 255
    3390:	08 95       	ret

00003392 <__udivmodsi4>:
    3392:	a1 e2       	ldi	r26, 0x21	; 33
    3394:	1a 2e       	mov	r1, r26
    3396:	aa 1b       	sub	r26, r26
    3398:	bb 1b       	sub	r27, r27
    339a:	fd 01       	movw	r30, r26
    339c:	0d c0       	rjmp	.+26     	; 0x33b8 <__udivmodsi4_ep>

0000339e <__udivmodsi4_loop>:
    339e:	aa 1f       	adc	r26, r26
    33a0:	bb 1f       	adc	r27, r27
    33a2:	ee 1f       	adc	r30, r30
    33a4:	ff 1f       	adc	r31, r31
    33a6:	a2 17       	cp	r26, r18
    33a8:	b3 07       	cpc	r27, r19
    33aa:	e4 07       	cpc	r30, r20
    33ac:	f5 07       	cpc	r31, r21
    33ae:	20 f0       	brcs	.+8      	; 0x33b8 <__udivmodsi4_ep>
    33b0:	a2 1b       	sub	r26, r18
    33b2:	b3 0b       	sbc	r27, r19
    33b4:	e4 0b       	sbc	r30, r20
    33b6:	f5 0b       	sbc	r31, r21

000033b8 <__udivmodsi4_ep>:
    33b8:	66 1f       	adc	r22, r22
    33ba:	77 1f       	adc	r23, r23
    33bc:	88 1f       	adc	r24, r24
    33be:	99 1f       	adc	r25, r25
    33c0:	1a 94       	dec	r1
    33c2:	69 f7       	brne	.-38     	; 0x339e <__udivmodsi4_loop>
    33c4:	60 95       	com	r22
    33c6:	70 95       	com	r23
    33c8:	80 95       	com	r24
    33ca:	90 95       	com	r25
    33cc:	9b 01       	movw	r18, r22
    33ce:	ac 01       	movw	r20, r24
    33d0:	bd 01       	movw	r22, r26
    33d2:	cf 01       	movw	r24, r30
    33d4:	08 95       	ret

000033d6 <__prologue_saves__>:
    33d6:	2f 92       	push	r2
    33d8:	3f 92       	push	r3
    33da:	4f 92       	push	r4
    33dc:	5f 92       	push	r5
    33de:	6f 92       	push	r6
    33e0:	7f 92       	push	r7
    33e2:	8f 92       	push	r8
    33e4:	9f 92       	push	r9
    33e6:	af 92       	push	r10
    33e8:	bf 92       	push	r11
    33ea:	cf 92       	push	r12
    33ec:	df 92       	push	r13
    33ee:	ef 92       	push	r14
    33f0:	ff 92       	push	r15
    33f2:	0f 93       	push	r16
    33f4:	1f 93       	push	r17
    33f6:	cf 93       	push	r28
    33f8:	df 93       	push	r29
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    33fe:	ca 1b       	sub	r28, r26
    3400:	db 0b       	sbc	r29, r27
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	f8 94       	cli
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	cd bf       	out	0x3d, r28	; 61
    340c:	09 94       	ijmp

0000340e <__epilogue_restores__>:
    340e:	2a 88       	ldd	r2, Y+18	; 0x12
    3410:	39 88       	ldd	r3, Y+17	; 0x11
    3412:	48 88       	ldd	r4, Y+16	; 0x10
    3414:	5f 84       	ldd	r5, Y+15	; 0x0f
    3416:	6e 84       	ldd	r6, Y+14	; 0x0e
    3418:	7d 84       	ldd	r7, Y+13	; 0x0d
    341a:	8c 84       	ldd	r8, Y+12	; 0x0c
    341c:	9b 84       	ldd	r9, Y+11	; 0x0b
    341e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3420:	b9 84       	ldd	r11, Y+9	; 0x09
    3422:	c8 84       	ldd	r12, Y+8	; 0x08
    3424:	df 80       	ldd	r13, Y+7	; 0x07
    3426:	ee 80       	ldd	r14, Y+6	; 0x06
    3428:	fd 80       	ldd	r15, Y+5	; 0x05
    342a:	0c 81       	ldd	r16, Y+4	; 0x04
    342c:	1b 81       	ldd	r17, Y+3	; 0x03
    342e:	aa 81       	ldd	r26, Y+2	; 0x02
    3430:	b9 81       	ldd	r27, Y+1	; 0x01
    3432:	ce 0f       	add	r28, r30
    3434:	d1 1d       	adc	r29, r1
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
    3440:	ed 01       	movw	r28, r26
    3442:	08 95       	ret

00003444 <_exit>:
    3444:	f8 94       	cli

00003446 <__stop_program>:
    3446:	ff cf       	rjmp	.-2      	; 0x3446 <__stop_program>
