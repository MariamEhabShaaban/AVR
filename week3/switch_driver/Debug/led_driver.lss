
led_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000093c  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000804  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 49 02 	call	0x492	; 0x492 <main>
  64:	0c 94 6d 02 	jmp	0x4da	; 0x4da <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LED_enuint>:
#include "errorStates.h"
#include "DIO_int.h"
#include "DIO_priv.h"
#include "DIO_config.h"

ES_t LED_enuint (void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	ES_t local_enuerror=ES_NOK;
  76:	19 82       	std	Y+1, r1	; 0x01
	DDRA =CONC( PA_PIN7_DIR	, PA_PIN6_DIR, PA_PIN5_DIR	, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
  78:	ea e3       	ldi	r30, 0x3A	; 58
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	8f e7       	ldi	r24, 0x7F	; 127
  7e:	80 83       	st	Z, r24
		DDRB =CONC( PB_PIN7_DIR	, PB_PIN6_DIR, PB_PIN5_DIR	, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
  80:	e7 e3       	ldi	r30, 0x37	; 55
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	8e ef       	ldi	r24, 0xFE	; 254
  86:	80 83       	st	Z, r24
		DDRC =CONC( PC_PIN7_DIR	, PC_PIN6_DIR, PC_PIN5_DIR	, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
  88:	e4 e3       	ldi	r30, 0x34	; 52
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	86 e9       	ldi	r24, 0x96	; 150
  8e:	80 83       	st	Z, r24
		DDRD =CONC( PD_PIN7_DIR	, PD_PIN6_DIR, PD_PIN5_DIR	, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
  90:	e1 e3       	ldi	r30, 0x31	; 49
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	86 e9       	ldi	r24, 0x96	; 150
  96:	80 83       	st	Z, r24
		PORTA =CONC( PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL	, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
  98:	eb e3       	ldi	r30, 0x3B	; 59
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
		PORTB =CONC( PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL	, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
  9e:	e8 e3       	ldi	r30, 0x38	; 56
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	81 e9       	ldi	r24, 0x91	; 145
  a4:	80 83       	st	Z, r24
		PORTC =CONC( PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL	, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
  a6:	e5 e3       	ldi	r30, 0x35	; 53
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
		PORTD =CONC( PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL	, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
  ac:	e2 e3       	ldi	r30, 0x32	; 50
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1

	local_enuerror=ES_OK;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	89 83       	std	Y+1, r24	; 0x01


return local_enuerror;
  b6:	89 81       	ldd	r24, Y+1	; 0x01
}
  b8:	0f 90       	pop	r0
  ba:	cf 91       	pop	r28
  bc:	df 91       	pop	r29
  be:	08 95       	ret

000000c0 <PIN_LED_ON>:

ES_t PIN_LED_ON(u8 Copy_u8PortID ,u8 Copy_u8PinID ){
  c0:	df 93       	push	r29
  c2:	cf 93       	push	r28
  c4:	00 d0       	rcall	.+0      	; 0xc6 <PIN_LED_ON+0x6>
  c6:	00 d0       	rcall	.+0      	; 0xc8 <PIN_LED_ON+0x8>
  c8:	0f 92       	push	r0
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	8a 83       	std	Y+2, r24	; 0x02
  d0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t local_enuerror=ES_NOK;
  d2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID<=D_u8PORTD && Copy_u8PinID<=D_u8PIN7){
  d4:	8a 81       	ldd	r24, Y+2	; 0x02
  d6:	84 30       	cpi	r24, 0x04	; 4
  d8:	08 f0       	brcs	.+2      	; 0xdc <PIN_LED_ON+0x1c>
  da:	75 c0       	rjmp	.+234    	; 0x1c6 <PIN_LED_ON+0x106>
  dc:	8b 81       	ldd	r24, Y+3	; 0x03
  de:	88 30       	cpi	r24, 0x08	; 8
  e0:	08 f0       	brcs	.+2      	; 0xe4 <PIN_LED_ON+0x24>
  e2:	71 c0       	rjmp	.+226    	; 0x1c6 <PIN_LED_ON+0x106>
				local_enuerror=ES_OK;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	89 83       	std	Y+1, r24	; 0x01
				switch(Copy_u8PortID){
  e8:	8a 81       	ldd	r24, Y+2	; 0x02
  ea:	28 2f       	mov	r18, r24
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	3d 83       	std	Y+5, r19	; 0x05
  f0:	2c 83       	std	Y+4, r18	; 0x04
  f2:	8c 81       	ldd	r24, Y+4	; 0x04
  f4:	9d 81       	ldd	r25, Y+5	; 0x05
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	91 05       	cpc	r25, r1
  fa:	49 f1       	breq	.+82     	; 0x14e <PIN_LED_ON+0x8e>
  fc:	2c 81       	ldd	r18, Y+4	; 0x04
  fe:	3d 81       	ldd	r19, Y+5	; 0x05
 100:	22 30       	cpi	r18, 0x02	; 2
 102:	31 05       	cpc	r19, r1
 104:	2c f4       	brge	.+10     	; 0x110 <PIN_LED_ON+0x50>
 106:	8c 81       	ldd	r24, Y+4	; 0x04
 108:	9d 81       	ldd	r25, Y+5	; 0x05
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	61 f0       	breq	.+24     	; 0x126 <PIN_LED_ON+0x66>
 10e:	5d c0       	rjmp	.+186    	; 0x1ca <PIN_LED_ON+0x10a>
 110:	2c 81       	ldd	r18, Y+4	; 0x04
 112:	3d 81       	ldd	r19, Y+5	; 0x05
 114:	22 30       	cpi	r18, 0x02	; 2
 116:	31 05       	cpc	r19, r1
 118:	71 f1       	breq	.+92     	; 0x176 <PIN_LED_ON+0xb6>
 11a:	8c 81       	ldd	r24, Y+4	; 0x04
 11c:	9d 81       	ldd	r25, Y+5	; 0x05
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	91 05       	cpc	r25, r1
 122:	e9 f1       	breq	.+122    	; 0x19e <PIN_LED_ON+0xde>
 124:	52 c0       	rjmp	.+164    	; 0x1ca <PIN_LED_ON+0x10a>
				case DIO_PORTA:

					PORTA |=(ON<<Copy_u8PinID);
 126:	ab e3       	ldi	r26, 0x3B	; 59
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	eb e3       	ldi	r30, 0x3B	; 59
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	48 2f       	mov	r20, r24
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	28 2f       	mov	r18, r24
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 2e       	mov	r0, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <PIN_LED_ON+0x84>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <PIN_LED_ON+0x80>
 148:	84 2b       	or	r24, r20
 14a:	8c 93       	st	X, r24
 14c:	3e c0       	rjmp	.+124    	; 0x1ca <PIN_LED_ON+0x10a>

				break;
				case DIO_PORTB:
					PORTB |=(ON<<Copy_u8PinID);
 14e:	a8 e3       	ldi	r26, 0x38	; 56
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	e8 e3       	ldi	r30, 0x38	; 56
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	48 2f       	mov	r20, r24
 15a:	8b 81       	ldd	r24, Y+3	; 0x03
 15c:	28 2f       	mov	r18, r24
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 2e       	mov	r0, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <PIN_LED_ON+0xac>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <PIN_LED_ON+0xa8>
 170:	84 2b       	or	r24, r20
 172:	8c 93       	st	X, r24
 174:	2a c0       	rjmp	.+84     	; 0x1ca <PIN_LED_ON+0x10a>
						break;
				case DIO_PORTC:
					PORTC |=(ON<<Copy_u8PinID);
 176:	a5 e3       	ldi	r26, 0x35	; 53
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	e5 e3       	ldi	r30, 0x35	; 53
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	48 2f       	mov	r20, r24
 182:	8b 81       	ldd	r24, Y+3	; 0x03
 184:	28 2f       	mov	r18, r24
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 2e       	mov	r0, r18
 18e:	02 c0       	rjmp	.+4      	; 0x194 <PIN_LED_ON+0xd4>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	0a 94       	dec	r0
 196:	e2 f7       	brpl	.-8      	; 0x190 <PIN_LED_ON+0xd0>
 198:	84 2b       	or	r24, r20
 19a:	8c 93       	st	X, r24
 19c:	16 c0       	rjmp	.+44     	; 0x1ca <PIN_LED_ON+0x10a>
						break;
				case DIO_PORTD:
					PORTD |=(ON<<Copy_u8PinID);
 19e:	a2 e3       	ldi	r26, 0x32	; 50
 1a0:	b0 e0       	ldi	r27, 0x00	; 0
 1a2:	e2 e3       	ldi	r30, 0x32	; 50
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	48 2f       	mov	r20, r24
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	28 2f       	mov	r18, r24
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 2e       	mov	r0, r18
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <PIN_LED_ON+0xfc>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	0a 94       	dec	r0
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <PIN_LED_ON+0xf8>
 1c0:	84 2b       	or	r24, r20
 1c2:	8c 93       	st	X, r24
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <PIN_LED_ON+0x10a>


			}
			else
				{
				local_enuerror = ES_OUT_OF_RANGE;
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	89 83       	std	Y+1, r24	; 0x01
				}
	return local_enuerror;
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
}
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	cf 91       	pop	r28
 1d8:	df 91       	pop	r29
 1da:	08 95       	ret

000001dc <PIN_LED_OFF>:
ES_t PIN_LED_OFF(u8 Copy_u8PortID ,u8 Copy_u8PinID ){
 1dc:	df 93       	push	r29
 1de:	cf 93       	push	r28
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <PIN_LED_OFF+0x6>
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <PIN_LED_OFF+0x8>
 1e4:	0f 92       	push	r0
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	8a 83       	std	Y+2, r24	; 0x02
 1ec:	6b 83       	std	Y+3, r22	; 0x03

	ES_t local_enuerror=ES_NOK;
 1ee:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8PortID<=D_u8PORTD && Copy_u8PinID<=D_u8PIN7){
 1f0:	8a 81       	ldd	r24, Y+2	; 0x02
 1f2:	84 30       	cpi	r24, 0x04	; 4
 1f4:	08 f0       	brcs	.+2      	; 0x1f8 <PIN_LED_OFF+0x1c>
 1f6:	7a c0       	rjmp	.+244    	; 0x2ec <PIN_LED_OFF+0x110>
 1f8:	8b 81       	ldd	r24, Y+3	; 0x03
 1fa:	88 30       	cpi	r24, 0x08	; 8
 1fc:	08 f0       	brcs	.+2      	; 0x200 <PIN_LED_OFF+0x24>
 1fe:	76 c0       	rjmp	.+236    	; 0x2ec <PIN_LED_OFF+0x110>
					local_enuerror=ES_OK;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	89 83       	std	Y+1, r24	; 0x01
					switch(Copy_u8PortID){
 204:	8a 81       	ldd	r24, Y+2	; 0x02
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	3d 83       	std	Y+5, r19	; 0x05
 20c:	2c 83       	std	Y+4, r18	; 0x04
 20e:	8c 81       	ldd	r24, Y+4	; 0x04
 210:	9d 81       	ldd	r25, Y+5	; 0x05
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	91 05       	cpc	r25, r1
 216:	59 f1       	breq	.+86     	; 0x26e <PIN_LED_OFF+0x92>
 218:	2c 81       	ldd	r18, Y+4	; 0x04
 21a:	3d 81       	ldd	r19, Y+5	; 0x05
 21c:	22 30       	cpi	r18, 0x02	; 2
 21e:	31 05       	cpc	r19, r1
 220:	2c f4       	brge	.+10     	; 0x22c <PIN_LED_OFF+0x50>
 222:	8c 81       	ldd	r24, Y+4	; 0x04
 224:	9d 81       	ldd	r25, Y+5	; 0x05
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	69 f0       	breq	.+26     	; 0x244 <PIN_LED_OFF+0x68>
 22a:	62 c0       	rjmp	.+196    	; 0x2f0 <PIN_LED_OFF+0x114>
 22c:	2c 81       	ldd	r18, Y+4	; 0x04
 22e:	3d 81       	ldd	r19, Y+5	; 0x05
 230:	22 30       	cpi	r18, 0x02	; 2
 232:	31 05       	cpc	r19, r1
 234:	89 f1       	breq	.+98     	; 0x298 <PIN_LED_OFF+0xbc>
 236:	8c 81       	ldd	r24, Y+4	; 0x04
 238:	9d 81       	ldd	r25, Y+5	; 0x05
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	91 05       	cpc	r25, r1
 23e:	09 f4       	brne	.+2      	; 0x242 <PIN_LED_OFF+0x66>
 240:	40 c0       	rjmp	.+128    	; 0x2c2 <PIN_LED_OFF+0xe6>
 242:	56 c0       	rjmp	.+172    	; 0x2f0 <PIN_LED_OFF+0x114>
					case DIO_PORTA:

						PORTA &=~(ON<<Copy_u8PinID);
 244:	ab e3       	ldi	r26, 0x3B	; 59
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	eb e3       	ldi	r30, 0x3B	; 59
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	48 2f       	mov	r20, r24
 250:	8b 81       	ldd	r24, Y+3	; 0x03
 252:	28 2f       	mov	r18, r24
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <PIN_LED_OFF+0x86>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <PIN_LED_OFF+0x82>
 266:	80 95       	com	r24
 268:	84 23       	and	r24, r20
 26a:	8c 93       	st	X, r24
 26c:	41 c0       	rjmp	.+130    	; 0x2f0 <PIN_LED_OFF+0x114>

					break;
					case DIO_PORTB:
						PORTB&=~(ON<<Copy_u8PinID);
 26e:	a8 e3       	ldi	r26, 0x38	; 56
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	e8 e3       	ldi	r30, 0x38	; 56
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	48 2f       	mov	r20, r24
 27a:	8b 81       	ldd	r24, Y+3	; 0x03
 27c:	28 2f       	mov	r18, r24
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 2e       	mov	r0, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <PIN_LED_OFF+0xb0>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	0a 94       	dec	r0
 28e:	e2 f7       	brpl	.-8      	; 0x288 <PIN_LED_OFF+0xac>
 290:	80 95       	com	r24
 292:	84 23       	and	r24, r20
 294:	8c 93       	st	X, r24
 296:	2c c0       	rjmp	.+88     	; 0x2f0 <PIN_LED_OFF+0x114>
							break;
					case DIO_PORTC:
						PORTC &=~(ON<<Copy_u8PinID);
 298:	a5 e3       	ldi	r26, 0x35	; 53
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	e5 e3       	ldi	r30, 0x35	; 53
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	48 2f       	mov	r20, r24
 2a4:	8b 81       	ldd	r24, Y+3	; 0x03
 2a6:	28 2f       	mov	r18, r24
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 2e       	mov	r0, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <PIN_LED_OFF+0xda>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	0a 94       	dec	r0
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <PIN_LED_OFF+0xd6>
 2ba:	80 95       	com	r24
 2bc:	84 23       	and	r24, r20
 2be:	8c 93       	st	X, r24
 2c0:	17 c0       	rjmp	.+46     	; 0x2f0 <PIN_LED_OFF+0x114>
							break;
					case DIO_PORTD:
						PORTD&=~(ON<<Copy_u8PinID);
 2c2:	a2 e3       	ldi	r26, 0x32	; 50
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	e2 e3       	ldi	r30, 0x32	; 50
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	48 2f       	mov	r20, r24
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	28 2f       	mov	r18, r24
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 2e       	mov	r0, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <PIN_LED_OFF+0x104>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	0a 94       	dec	r0
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <PIN_LED_OFF+0x100>
 2e4:	80 95       	com	r24
 2e6:	84 23       	and	r24, r20
 2e8:	8c 93       	st	X, r24
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <PIN_LED_OFF+0x114>


				}
				else
				{
				local_enuerror = ES_OUT_OF_RANGE;
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	89 83       	std	Y+1, r24	; 0x01
				}
		return local_enuerror;
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
}
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	cf 91       	pop	r28
 2fe:	df 91       	pop	r29
 300:	08 95       	ret

00000302 <SWITCH_enuint>:

ES_t SWITCH_enuint(void){
 302:	df 93       	push	r29
 304:	cf 93       	push	r28
 306:	0f 92       	push	r0
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
	ES_t local_enuerror=ES_NOK;
 30c:	19 82       	std	Y+1, r1	; 0x01
	DDRA =CONC( PA_PIN7_DIR	, PA_PIN6_DIR, PA_PIN5_DIR	, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
 30e:	ea e3       	ldi	r30, 0x3A	; 58
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	8f e7       	ldi	r24, 0x7F	; 127
 314:	80 83       	st	Z, r24
		DDRB =CONC( PB_PIN7_DIR	, PB_PIN6_DIR, PB_PIN5_DIR	, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
 316:	e7 e3       	ldi	r30, 0x37	; 55
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	8e ef       	ldi	r24, 0xFE	; 254
 31c:	80 83       	st	Z, r24
		DDRC =CONC( PC_PIN7_DIR	, PC_PIN6_DIR, PC_PIN5_DIR	, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
 31e:	e4 e3       	ldi	r30, 0x34	; 52
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	86 e9       	ldi	r24, 0x96	; 150
 324:	80 83       	st	Z, r24
		DDRD =CONC( PD_PIN7_DIR	, PD_PIN6_DIR, PD_PIN5_DIR	, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
 326:	e1 e3       	ldi	r30, 0x31	; 49
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	86 e9       	ldi	r24, 0x96	; 150
 32c:	80 83       	st	Z, r24
		PORTA =CONC( PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL	, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
 32e:	eb e3       	ldi	r30, 0x3B	; 59
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	10 82       	st	Z, r1
		PORTB =CONC( PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL	, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
 334:	e8 e3       	ldi	r30, 0x38	; 56
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	81 e9       	ldi	r24, 0x91	; 145
 33a:	80 83       	st	Z, r24
		PORTC =CONC( PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL	, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
 33c:	e5 e3       	ldi	r30, 0x35	; 53
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	10 82       	st	Z, r1
		PORTD =CONC( PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL	, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
 342:	e2 e3       	ldi	r30, 0x32	; 50
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	10 82       	st	Z, r1

	local_enuerror=ES_OK;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	89 83       	std	Y+1, r24	; 0x01


return local_enuerror;
 34c:	89 81       	ldd	r24, Y+1	; 0x01
}
 34e:	0f 90       	pop	r0
 350:	cf 91       	pop	r28
 352:	df 91       	pop	r29
 354:	08 95       	ret

00000356 <SWITCH_STATUS>:


ES_t SWITCH_STATUS(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8* Copy_pu8Status){
 356:	df 93       	push	r29
 358:	cf 93       	push	r28
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	27 97       	sbiw	r28, 0x07	; 7
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	de bf       	out	0x3e, r29	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	cd bf       	out	0x3d, r28	; 61
 36a:	8a 83       	std	Y+2, r24	; 0x02
 36c:	6b 83       	std	Y+3, r22	; 0x03
 36e:	5d 83       	std	Y+5, r21	; 0x05
 370:	4c 83       	std	Y+4, r20	; 0x04


	ES_t local_enuerror=ES_NOK;
 372:	19 82       	std	Y+1, r1	; 0x01
			if(  Copy_pu8Status !=NULL){
 374:	8c 81       	ldd	r24, Y+4	; 0x04
 376:	9d 81       	ldd	r25, Y+5	; 0x05
 378:	00 97       	sbiw	r24, 0x00	; 0
 37a:	09 f4       	brne	.+2      	; 0x37e <SWITCH_STATUS+0x28>
 37c:	7e c0       	rjmp	.+252    	; 0x47a <SWITCH_STATUS+0x124>
			if( Copy_u8PortID<=D_u8PORTD &&Copy_u8PinID<=D_u8PIN7){
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	84 30       	cpi	r24, 0x04	; 4
 382:	08 f0       	brcs	.+2      	; 0x386 <SWITCH_STATUS+0x30>
 384:	77 c0       	rjmp	.+238    	; 0x474 <SWITCH_STATUS+0x11e>
 386:	8b 81       	ldd	r24, Y+3	; 0x03
 388:	88 30       	cpi	r24, 0x08	; 8
 38a:	08 f0       	brcs	.+2      	; 0x38e <SWITCH_STATUS+0x38>
 38c:	73 c0       	rjmp	.+230    	; 0x474 <SWITCH_STATUS+0x11e>

						 local_enuerror=ES_OK;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	89 83       	std	Y+1, r24	; 0x01
						 switch(Copy_u8PortID){
 392:	8a 81       	ldd	r24, Y+2	; 0x02
 394:	28 2f       	mov	r18, r24
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	3f 83       	std	Y+7, r19	; 0x07
 39a:	2e 83       	std	Y+6, r18	; 0x06
 39c:	4e 81       	ldd	r20, Y+6	; 0x06
 39e:	5f 81       	ldd	r21, Y+7	; 0x07
 3a0:	41 30       	cpi	r20, 0x01	; 1
 3a2:	51 05       	cpc	r21, r1
 3a4:	59 f1       	breq	.+86     	; 0x3fc <SWITCH_STATUS+0xa6>
 3a6:	8e 81       	ldd	r24, Y+6	; 0x06
 3a8:	9f 81       	ldd	r25, Y+7	; 0x07
 3aa:	82 30       	cpi	r24, 0x02	; 2
 3ac:	91 05       	cpc	r25, r1
 3ae:	34 f4       	brge	.+12     	; 0x3bc <SWITCH_STATUS+0x66>
 3b0:	2e 81       	ldd	r18, Y+6	; 0x06
 3b2:	3f 81       	ldd	r19, Y+7	; 0x07
 3b4:	21 15       	cp	r18, r1
 3b6:	31 05       	cpc	r19, r1
 3b8:	69 f0       	breq	.+26     	; 0x3d4 <SWITCH_STATUS+0x7e>
 3ba:	61 c0       	rjmp	.+194    	; 0x47e <SWITCH_STATUS+0x128>
 3bc:	4e 81       	ldd	r20, Y+6	; 0x06
 3be:	5f 81       	ldd	r21, Y+7	; 0x07
 3c0:	42 30       	cpi	r20, 0x02	; 2
 3c2:	51 05       	cpc	r21, r1
 3c4:	79 f1       	breq	.+94     	; 0x424 <SWITCH_STATUS+0xce>
 3c6:	8e 81       	ldd	r24, Y+6	; 0x06
 3c8:	9f 81       	ldd	r25, Y+7	; 0x07
 3ca:	83 30       	cpi	r24, 0x03	; 3
 3cc:	91 05       	cpc	r25, r1
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <SWITCH_STATUS+0x7c>
 3d0:	3d c0       	rjmp	.+122    	; 0x44c <SWITCH_STATUS+0xf6>
 3d2:	55 c0       	rjmp	.+170    	; 0x47e <SWITCH_STATUS+0x128>
						 case DIO_PORTA:
							 * Copy_pu8Status=(PINA>>Copy_u8PinID)&HIGH;
 3d4:	e9 e3       	ldi	r30, 0x39	; 57
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	28 2f       	mov	r18, r24
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	8b 81       	ldd	r24, Y+3	; 0x03
 3e0:	88 2f       	mov	r24, r24
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	a9 01       	movw	r20, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <SWITCH_STATUS+0x96>
 3e8:	55 95       	asr	r21
 3ea:	47 95       	ror	r20
 3ec:	8a 95       	dec	r24
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <SWITCH_STATUS+0x92>
 3f0:	ca 01       	movw	r24, r20
 3f2:	81 70       	andi	r24, 0x01	; 1
 3f4:	ec 81       	ldd	r30, Y+4	; 0x04
 3f6:	fd 81       	ldd	r31, Y+5	; 0x05
 3f8:	80 83       	st	Z, r24
 3fa:	41 c0       	rjmp	.+130    	; 0x47e <SWITCH_STATUS+0x128>
							 break;
						 case DIO_PORTB:
							 * Copy_pu8Status=(PINB>>Copy_u8PinID)&HIGH;
 3fc:	e6 e3       	ldi	r30, 0x36	; 54
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	28 2f       	mov	r18, r24
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	8b 81       	ldd	r24, Y+3	; 0x03
 408:	88 2f       	mov	r24, r24
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	a9 01       	movw	r20, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <SWITCH_STATUS+0xbe>
 410:	55 95       	asr	r21
 412:	47 95       	ror	r20
 414:	8a 95       	dec	r24
 416:	e2 f7       	brpl	.-8      	; 0x410 <SWITCH_STATUS+0xba>
 418:	ca 01       	movw	r24, r20
 41a:	81 70       	andi	r24, 0x01	; 1
 41c:	ec 81       	ldd	r30, Y+4	; 0x04
 41e:	fd 81       	ldd	r31, Y+5	; 0x05
 420:	80 83       	st	Z, r24
 422:	2d c0       	rjmp	.+90     	; 0x47e <SWITCH_STATUS+0x128>
									 break;
						 case DIO_PORTC:
							 * Copy_pu8Status=(PINC>>Copy_u8PinID)&HIGH;
 424:	e3 e3       	ldi	r30, 0x33	; 51
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	28 2f       	mov	r18, r24
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	8b 81       	ldd	r24, Y+3	; 0x03
 430:	88 2f       	mov	r24, r24
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	a9 01       	movw	r20, r18
 436:	02 c0       	rjmp	.+4      	; 0x43c <SWITCH_STATUS+0xe6>
 438:	55 95       	asr	r21
 43a:	47 95       	ror	r20
 43c:	8a 95       	dec	r24
 43e:	e2 f7       	brpl	.-8      	; 0x438 <SWITCH_STATUS+0xe2>
 440:	ca 01       	movw	r24, r20
 442:	81 70       	andi	r24, 0x01	; 1
 444:	ec 81       	ldd	r30, Y+4	; 0x04
 446:	fd 81       	ldd	r31, Y+5	; 0x05
 448:	80 83       	st	Z, r24
 44a:	19 c0       	rjmp	.+50     	; 0x47e <SWITCH_STATUS+0x128>
									 break;
						 case DIO_PORTD:
							 * Copy_pu8Status=(PIND>>Copy_u8PinID)&HIGH;
 44c:	e0 e3       	ldi	r30, 0x30	; 48
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	28 2f       	mov	r18, r24
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	8b 81       	ldd	r24, Y+3	; 0x03
 458:	88 2f       	mov	r24, r24
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	a9 01       	movw	r20, r18
 45e:	02 c0       	rjmp	.+4      	; 0x464 <SWITCH_STATUS+0x10e>
 460:	55 95       	asr	r21
 462:	47 95       	ror	r20
 464:	8a 95       	dec	r24
 466:	e2 f7       	brpl	.-8      	; 0x460 <SWITCH_STATUS+0x10a>
 468:	ca 01       	movw	r24, r20
 46a:	81 70       	andi	r24, 0x01	; 1
 46c:	ec 81       	ldd	r30, Y+4	; 0x04
 46e:	fd 81       	ldd	r31, Y+5	; 0x05
 470:	80 83       	st	Z, r24
 472:	05 c0       	rjmp	.+10     	; 0x47e <SWITCH_STATUS+0x128>

					}

					else
						{
						local_enuerror = ES_OUT_OF_RANGE;
 474:	83 e0       	ldi	r24, 0x03	; 3
 476:	89 83       	std	Y+1, r24	; 0x01
 478:	02 c0       	rjmp	.+4      	; 0x47e <SWITCH_STATUS+0x128>
						}
			}
			else{
				local_enuerror = ES_NULLPOINTER;
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	89 83       	std	Y+1, r24	; 0x01
			}

		return local_enuerror;
 47e:	89 81       	ldd	r24, Y+1	; 0x01
}
 480:	27 96       	adiw	r28, 0x07	; 7
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	f8 94       	cli
 486:	de bf       	out	0x3e, r29	; 62
 488:	0f be       	out	0x3f, r0	; 63
 48a:	cd bf       	out	0x3d, r28	; 61
 48c:	cf 91       	pop	r28
 48e:	df 91       	pop	r29
 490:	08 95       	ret

00000492 <main>:
#include "stdTypes.h"
#include "errorStates.h"
#include "DIO_int.h"
#include <util/delay.h>
int main(void){
 492:	df 93       	push	r29
 494:	cf 93       	push	r28
 496:	00 d0       	rcall	.+0      	; 0x498 <main+0x6>
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62
	SWITCH_enuint();
 49c:	0e 94 81 01 	call	0x302	; 0x302 <SWITCH_enuint>
		 LED_enuint();
 4a0:	0e 94 36 00 	call	0x6c	; 0x6c <LED_enuint>

		u8 switch_stat=20;
 4a4:	84 e1       	ldi	r24, 0x14	; 20
 4a6:	8a 83       	std	Y+2, r24	; 0x02
		while(1){

			ES_t Status= SWITCH_STATUS(D_u8PORTB ,D_u8PIN0 , &switch_stat);
 4a8:	9e 01       	movw	r18, r28
 4aa:	2e 5f       	subi	r18, 0xFE	; 254
 4ac:	3f 4f       	sbci	r19, 0xFF	; 255
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	a9 01       	movw	r20, r18
 4b4:	0e 94 ab 01 	call	0x356	; 0x356 <SWITCH_STATUS>
 4b8:	89 83       	std	Y+1, r24	; 0x01
			if(Status==ES_OK){
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	a1 f7       	brne	.-24     	; 0x4a8 <main+0x16>

				if(switch_stat==0){
 4c0:	8a 81       	ldd	r24, Y+2	; 0x02
 4c2:	88 23       	and	r24, r24
 4c4:	29 f4       	brne	.+10     	; 0x4d0 <main+0x3e>

				PIN_LED_ON(D_u8PORTA ,D_u8PIN0 );
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	0e 94 60 00 	call	0xc0	; 0xc0 <PIN_LED_ON>
 4ce:	ec cf       	rjmp	.-40     	; 0x4a8 <main+0x16>
			}
			   else{
				PIN_LED_OFF(D_u8PORTA ,D_u8PIN0 );
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <PIN_LED_OFF>
 4d8:	e7 cf       	rjmp	.-50     	; 0x4a8 <main+0x16>

000004da <_exit>:
 4da:	f8 94       	cli

000004dc <__stop_program>:
 4dc:	ff cf       	rjmp	.-2      	; 0x4dc <__stop_program>
