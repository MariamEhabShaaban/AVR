
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c52  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002c52  00002cc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002244  00000000  00000000  00002dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c3c  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00005c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00005df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00005fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  000083ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00009773  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000a94c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000ab0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000ae02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b770  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <main>
      7a:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e8 59       	subi	r30, 0x98	; 152
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ADC_enu_Int>:
#include "ADC_priv.h"
#include "ADC_config.h"



ES_t ADC_enu_Int(){
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	0f 92       	push	r0
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
     e28:	19 82       	std	Y+1, r1	; 0x01
#if Vref == AREF
	ADMUX&=~(AREF<<6);

#elif Vref == AVCC
	ADMUX|=(AVCC<<6);
     e2a:	a7 e2       	ldi	r26, 0x27	; 39
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e7 e2       	ldi	r30, 0x27	; 39
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	80 64       	ori	r24, 0x40	; 64
     e36:	8c 93       	st	X, r24


#if Adjust_Type==Left_Adjust
	ADMUX|=(1<<ADLAR);
#elif Adjust_Type==Right_Adjust
	ADMUX&=~(1<<ADLAR);
     e38:	a7 e2       	ldi	r26, 0x27	; 39
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e7 e2       	ldi	r30, 0x27	; 39
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	8f 7d       	andi	r24, 0xDF	; 223
     e44:	8c 93       	st	X, r24
#endif

#if Analog_channel==single_ended&&ADC_SOURCE==ADC0
	ADMUX&=~(15<<0);
     e46:	a7 e2       	ldi	r26, 0x27	; 39
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e7 e2       	ldi	r30, 0x27	; 39
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	80 7f       	andi	r24, 0xF0	; 240
     e52:	8c 93       	st	X, r24
#endif



#if division_factor == DIV_FACT128
	ADCSRA |= (7<<0);
     e54:	a6 e2       	ldi	r26, 0x26	; 38
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e6 e2       	ldi	r30, 0x26	; 38
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	87 60       	ori	r24, 0x07	; 7
     e60:	8c 93       	st	X, r24





 ADCSRA|=(1<<ADEN);         //enable ADC
     e62:	a6 e2       	ldi	r26, 0x26	; 38
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e6 e2       	ldi	r30, 0x26	; 38
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	80 68       	ori	r24, 0x80	; 128
     e6e:	8c 93       	st	X, r24





	Local_enuErrorstate = ES_OK;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
     e74:	89 81       	ldd	r24, Y+1	; 0x01
}
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <ADC_u16_Read>:

u16  ADC_u16_Read(){
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <ADC_u16_Read+0x6>
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
	u16 Result_Conversion;

#if Trigger_Source==Free_Running_mode
	ADCSRA&=~(1<<ADSC);
     e88:	a6 e2       	ldi	r26, 0x26	; 38
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e6 e2       	ldi	r30, 0x26	; 38
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8f 7b       	andi	r24, 0xBF	; 191
     e94:	8c 93       	st	X, r24
#endif
	ADCSRA |= (1<<ADSC);
     e96:	a6 e2       	ldi	r26, 0x26	; 38
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e6 e2       	ldi	r30, 0x26	; 38
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	80 64       	ori	r24, 0x40	; 64
     ea2:	8c 93       	st	X, r24
while(((ADCSRA>>ADIF) &1)==0);//get bit
     ea4:	e6 e2       	ldi	r30, 0x26	; 38
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	82 95       	swap	r24
     eac:	8f 70       	andi	r24, 0x0F	; 15
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	81 70       	andi	r24, 0x01	; 1
     eb4:	90 70       	andi	r25, 0x00	; 0
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	a9 f3       	breq	.-22     	; 0xea4 <ADC_u16_Read+0x26>
ADCSRA|=(1<<ADIF);//clear flag
     eba:	a6 e2       	ldi	r26, 0x26	; 38
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e6 e2       	ldi	r30, 0x26	; 38
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	80 61       	ori	r24, 0x10	; 16
     ec6:	8c 93       	st	X, r24
Result_Conversion=ADCADJ;
     ec8:	e4 e2       	ldi	r30, 0x24	; 36
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	91 81       	ldd	r25, Z+1	; 0x01
     ed0:	9a 83       	std	Y+2, r25	; 0x02
     ed2:	89 83       	std	Y+1, r24	; 0x01
	return Result_Conversion;
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	e9 97       	sbiw	r28, 0x39	; 57
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
     ef6:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	41 e0       	ldi	r20, 0x01	; 1
     efe:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	62 e0       	ldi	r22, 0x02	; 2
     f06:	41 e0       	ldi	r20, 0x01	; 1
     f08:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	63 e0       	ldi	r22, 0x03	; 3
     f10:	41 e0       	ldi	r20, 0x01	; 1
     f12:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	67 e0       	ldi	r22, 0x07	; 7
     f1a:	41 e0       	ldi	r20, 0x01	; 1
     f1c:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
     f20:	82 e0       	ldi	r24, 0x02	; 2
     f22:	66 e0       	ldi	r22, 0x06	; 6
     f24:	41 e0       	ldi	r20, 0x01	; 1
     f26:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	65 e0       	ldi	r22, 0x05	; 5
     f2e:	41 e0       	ldi	r20, 0x01	; 1
     f30:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	64 e0       	ldi	r22, 0x04	; 4
     f38:	41 e0       	ldi	r20, 0x01	; 1
     f3a:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_enuSetPinDirection>
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	ac e0       	ldi	r26, 0x0C	; 12
     f44:	b2 e4       	ldi	r27, 0x42	; 66
     f46:	8d ab       	std	Y+53, r24	; 0x35
     f48:	9e ab       	std	Y+54, r25	; 0x36
     f4a:	af ab       	std	Y+55, r26	; 0x37
     f4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f4e:	6d a9       	ldd	r22, Y+53	; 0x35
     f50:	7e a9       	ldd	r23, Y+54	; 0x36
     f52:	8f a9       	ldd	r24, Y+55	; 0x37
     f54:	98 ad       	ldd	r25, Y+56	; 0x38
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	4a e7       	ldi	r20, 0x7A	; 122
     f5c:	53 e4       	ldi	r21, 0x43	; 67
     f5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	89 ab       	std	Y+49, r24	; 0x31
     f68:	9a ab       	std	Y+50, r25	; 0x32
     f6a:	ab ab       	std	Y+51, r26	; 0x33
     f6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f6e:	69 a9       	ldd	r22, Y+49	; 0x31
     f70:	7a a9       	ldd	r23, Y+50	; 0x32
     f72:	8b a9       	ldd	r24, Y+51	; 0x33
     f74:	9c a9       	ldd	r25, Y+52	; 0x34
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e8       	ldi	r20, 0x80	; 128
     f7c:	5f e3       	ldi	r21, 0x3F	; 63
     f7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f82:	88 23       	and	r24, r24
     f84:	2c f4       	brge	.+10     	; 0xf90 <LCD_enuInit+0xae>
		__ticks = 1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	98 ab       	std	Y+48, r25	; 0x30
     f8c:	8f a7       	std	Y+47, r24	; 0x2f
     f8e:	3f c0       	rjmp	.+126    	; 0x100e <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
     f90:	69 a9       	ldd	r22, Y+49	; 0x31
     f92:	7a a9       	ldd	r23, Y+50	; 0x32
     f94:	8b a9       	ldd	r24, Y+51	; 0x33
     f96:	9c a9       	ldd	r25, Y+52	; 0x34
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	3f ef       	ldi	r19, 0xFF	; 255
     f9c:	4f e7       	ldi	r20, 0x7F	; 127
     f9e:	57 e4       	ldi	r21, 0x47	; 71
     fa0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fa4:	18 16       	cp	r1, r24
     fa6:	4c f5       	brge	.+82     	; 0xffa <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa8:	6d a9       	ldd	r22, Y+53	; 0x35
     faa:	7e a9       	ldd	r23, Y+54	; 0x36
     fac:	8f a9       	ldd	r24, Y+55	; 0x37
     fae:	98 ad       	ldd	r25, Y+56	; 0x38
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e2       	ldi	r20, 0x20	; 32
     fb6:	51 e4       	ldi	r21, 0x41	; 65
     fb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	bc 01       	movw	r22, r24
     fc2:	cd 01       	movw	r24, r26
     fc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	98 ab       	std	Y+48, r25	; 0x30
     fce:	8f a7       	std	Y+47, r24	; 0x2f
     fd0:	0f c0       	rjmp	.+30     	; 0xff0 <LCD_enuInit+0x10e>
     fd2:	89 e1       	ldi	r24, 0x19	; 25
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	9e a7       	std	Y+46, r25	; 0x2e
     fd8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fda:	8d a5       	ldd	r24, Y+45	; 0x2d
     fdc:	9e a5       	ldd	r25, Y+46	; 0x2e
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <LCD_enuInit+0xfc>
     fe2:	9e a7       	std	Y+46, r25	; 0x2e
     fe4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe6:	8f a5       	ldd	r24, Y+47	; 0x2f
     fe8:	98 a9       	ldd	r25, Y+48	; 0x30
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	98 ab       	std	Y+48, r25	; 0x30
     fee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff0:	8f a5       	ldd	r24, Y+47	; 0x2f
     ff2:	98 a9       	ldd	r25, Y+48	; 0x30
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	69 f7       	brne	.-38     	; 0xfd2 <LCD_enuInit+0xf0>
     ff8:	14 c0       	rjmp	.+40     	; 0x1022 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffa:	69 a9       	ldd	r22, Y+49	; 0x31
     ffc:	7a a9       	ldd	r23, Y+50	; 0x32
     ffe:	8b a9       	ldd	r24, Y+51	; 0x33
    1000:	9c a9       	ldd	r25, Y+52	; 0x34
    1002:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	98 ab       	std	Y+48, r25	; 0x30
    100c:	8f a7       	std	Y+47, r24	; 0x2f
    100e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1010:	98 a9       	ldd	r25, Y+48	; 0x30
    1012:	9c a7       	std	Y+44, r25	; 0x2c
    1014:	8b a7       	std	Y+43, r24	; 0x2b
    1016:	8b a5       	ldd	r24, Y+43	; 0x2b
    1018:	9c a5       	ldd	r25, Y+44	; 0x2c
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <LCD_enuInit+0x138>
    101e:	9c a7       	std	Y+44, r25	; 0x2c
    1020:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);

	//function set
	LCD_invidSendCommend(0x38);
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
    1022:	88 e2       	ldi	r24, 0x28	; 40
    1024:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_invidSendCommend>
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	a0 e8       	ldi	r26, 0x80	; 128
    102e:	bf e3       	ldi	r27, 0x3F	; 63
    1030:	8f a3       	std	Y+39, r24	; 0x27
    1032:	98 a7       	std	Y+40, r25	; 0x28
    1034:	a9 a7       	std	Y+41, r26	; 0x29
    1036:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1038:	6f a1       	ldd	r22, Y+39	; 0x27
    103a:	78 a5       	ldd	r23, Y+40	; 0x28
    103c:	89 a5       	ldd	r24, Y+41	; 0x29
    103e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	4a e7       	ldi	r20, 0x7A	; 122
    1046:	53 e4       	ldi	r21, 0x43	; 67
    1048:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	8b a3       	std	Y+35, r24	; 0x23
    1052:	9c a3       	std	Y+36, r25	; 0x24
    1054:	ad a3       	std	Y+37, r26	; 0x25
    1056:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1058:	6b a1       	ldd	r22, Y+35	; 0x23
    105a:	7c a1       	ldd	r23, Y+36	; 0x24
    105c:	8d a1       	ldd	r24, Y+37	; 0x25
    105e:	9e a1       	ldd	r25, Y+38	; 0x26
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e8       	ldi	r20, 0x80	; 128
    1066:	5f e3       	ldi	r21, 0x3F	; 63
    1068:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    106c:	88 23       	and	r24, r24
    106e:	2c f4       	brge	.+10     	; 0x107a <LCD_enuInit+0x198>
		__ticks = 1;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	9a a3       	std	Y+34, r25	; 0x22
    1076:	89 a3       	std	Y+33, r24	; 0x21
    1078:	3f c0       	rjmp	.+126    	; 0x10f8 <LCD_enuInit+0x216>
	else if (__tmp > 65535)
    107a:	6b a1       	ldd	r22, Y+35	; 0x23
    107c:	7c a1       	ldd	r23, Y+36	; 0x24
    107e:	8d a1       	ldd	r24, Y+37	; 0x25
    1080:	9e a1       	ldd	r25, Y+38	; 0x26
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	3f ef       	ldi	r19, 0xFF	; 255
    1086:	4f e7       	ldi	r20, 0x7F	; 127
    1088:	57 e4       	ldi	r21, 0x47	; 71
    108a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    108e:	18 16       	cp	r1, r24
    1090:	4c f5       	brge	.+82     	; 0x10e4 <LCD_enuInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1092:	6f a1       	ldd	r22, Y+39	; 0x27
    1094:	78 a5       	ldd	r23, Y+40	; 0x28
    1096:	89 a5       	ldd	r24, Y+41	; 0x29
    1098:	9a a5       	ldd	r25, Y+42	; 0x2a
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e2       	ldi	r20, 0x20	; 32
    10a0:	51 e4       	ldi	r21, 0x41	; 65
    10a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	bc 01       	movw	r22, r24
    10ac:	cd 01       	movw	r24, r26
    10ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	9a a3       	std	Y+34, r25	; 0x22
    10b8:	89 a3       	std	Y+33, r24	; 0x21
    10ba:	0f c0       	rjmp	.+30     	; 0x10da <LCD_enuInit+0x1f8>
    10bc:	89 e1       	ldi	r24, 0x19	; 25
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	98 a3       	std	Y+32, r25	; 0x20
    10c2:	8f 8f       	std	Y+31, r24	; 0x1f
    10c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10c6:	98 a1       	ldd	r25, Y+32	; 0x20
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <LCD_enuInit+0x1e6>
    10cc:	98 a3       	std	Y+32, r25	; 0x20
    10ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d0:	89 a1       	ldd	r24, Y+33	; 0x21
    10d2:	9a a1       	ldd	r25, Y+34	; 0x22
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	9a a3       	std	Y+34, r25	; 0x22
    10d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10da:	89 a1       	ldd	r24, Y+33	; 0x21
    10dc:	9a a1       	ldd	r25, Y+34	; 0x22
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	69 f7       	brne	.-38     	; 0x10bc <LCD_enuInit+0x1da>
    10e2:	14 c0       	rjmp	.+40     	; 0x110c <LCD_enuInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e4:	6b a1       	ldd	r22, Y+35	; 0x23
    10e6:	7c a1       	ldd	r23, Y+36	; 0x24
    10e8:	8d a1       	ldd	r24, Y+37	; 0x25
    10ea:	9e a1       	ldd	r25, Y+38	; 0x26
    10ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	9a a3       	std	Y+34, r25	; 0x22
    10f6:	89 a3       	std	Y+33, r24	; 0x21
    10f8:	89 a1       	ldd	r24, Y+33	; 0x21
    10fa:	9a a1       	ldd	r25, Y+34	; 0x22
    10fc:	9e 8f       	std	Y+30, r25	; 0x1e
    10fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1100:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1102:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	f1 f7       	brne	.-4      	; 0x1104 <LCD_enuInit+0x222>
    1108:	9e 8f       	std	Y+30, r25	; 0x1e
    110a:	8d 8f       	std	Y+29, r24	; 0x1d
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    110c:	8f e0       	ldi	r24, 0x0F	; 15
    110e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_invidSendCommend>
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	a0 e8       	ldi	r26, 0x80	; 128
    1118:	bf e3       	ldi	r27, 0x3F	; 63
    111a:	89 8f       	std	Y+25, r24	; 0x19
    111c:	9a 8f       	std	Y+26, r25	; 0x1a
    111e:	ab 8f       	std	Y+27, r26	; 0x1b
    1120:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1122:	69 8d       	ldd	r22, Y+25	; 0x19
    1124:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1126:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1128:	9c 8d       	ldd	r25, Y+28	; 0x1c
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	4a e7       	ldi	r20, 0x7A	; 122
    1130:	53 e4       	ldi	r21, 0x43	; 67
    1132:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	8d 8b       	std	Y+21, r24	; 0x15
    113c:	9e 8b       	std	Y+22, r25	; 0x16
    113e:	af 8b       	std	Y+23, r26	; 0x17
    1140:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1142:	6d 89       	ldd	r22, Y+21	; 0x15
    1144:	7e 89       	ldd	r23, Y+22	; 0x16
    1146:	8f 89       	ldd	r24, Y+23	; 0x17
    1148:	98 8d       	ldd	r25, Y+24	; 0x18
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	40 e8       	ldi	r20, 0x80	; 128
    1150:	5f e3       	ldi	r21, 0x3F	; 63
    1152:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1156:	88 23       	and	r24, r24
    1158:	2c f4       	brge	.+10     	; 0x1164 <LCD_enuInit+0x282>
		__ticks = 1;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9c 8b       	std	Y+20, r25	; 0x14
    1160:	8b 8b       	std	Y+19, r24	; 0x13
    1162:	3f c0       	rjmp	.+126    	; 0x11e2 <LCD_enuInit+0x300>
	else if (__tmp > 65535)
    1164:	6d 89       	ldd	r22, Y+21	; 0x15
    1166:	7e 89       	ldd	r23, Y+22	; 0x16
    1168:	8f 89       	ldd	r24, Y+23	; 0x17
    116a:	98 8d       	ldd	r25, Y+24	; 0x18
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	3f ef       	ldi	r19, 0xFF	; 255
    1170:	4f e7       	ldi	r20, 0x7F	; 127
    1172:	57 e4       	ldi	r21, 0x47	; 71
    1174:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1178:	18 16       	cp	r1, r24
    117a:	4c f5       	brge	.+82     	; 0x11ce <LCD_enuInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    117c:	69 8d       	ldd	r22, Y+25	; 0x19
    117e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1180:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1182:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e2       	ldi	r20, 0x20	; 32
    118a:	51 e4       	ldi	r21, 0x41	; 65
    118c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	bc 01       	movw	r22, r24
    1196:	cd 01       	movw	r24, r26
    1198:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	9c 8b       	std	Y+20, r25	; 0x14
    11a2:	8b 8b       	std	Y+19, r24	; 0x13
    11a4:	0f c0       	rjmp	.+30     	; 0x11c4 <LCD_enuInit+0x2e2>
    11a6:	89 e1       	ldi	r24, 0x19	; 25
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	9a 8b       	std	Y+18, r25	; 0x12
    11ac:	89 8b       	std	Y+17, r24	; 0x11
    11ae:	89 89       	ldd	r24, Y+17	; 0x11
    11b0:	9a 89       	ldd	r25, Y+18	; 0x12
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <LCD_enuInit+0x2d0>
    11b6:	9a 8b       	std	Y+18, r25	; 0x12
    11b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ba:	8b 89       	ldd	r24, Y+19	; 0x13
    11bc:	9c 89       	ldd	r25, Y+20	; 0x14
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	9c 8b       	std	Y+20, r25	; 0x14
    11c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c4:	8b 89       	ldd	r24, Y+19	; 0x13
    11c6:	9c 89       	ldd	r25, Y+20	; 0x14
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	69 f7       	brne	.-38     	; 0x11a6 <LCD_enuInit+0x2c4>
    11cc:	14 c0       	rjmp	.+40     	; 0x11f6 <LCD_enuInit+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ce:	6d 89       	ldd	r22, Y+21	; 0x15
    11d0:	7e 89       	ldd	r23, Y+22	; 0x16
    11d2:	8f 89       	ldd	r24, Y+23	; 0x17
    11d4:	98 8d       	ldd	r25, Y+24	; 0x18
    11d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	9c 8b       	std	Y+20, r25	; 0x14
    11e0:	8b 8b       	std	Y+19, r24	; 0x13
    11e2:	8b 89       	ldd	r24, Y+19	; 0x13
    11e4:	9c 89       	ldd	r25, Y+20	; 0x14
    11e6:	98 8b       	std	Y+16, r25	; 0x10
    11e8:	8f 87       	std	Y+15, r24	; 0x0f
    11ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ec:	98 89       	ldd	r25, Y+16	; 0x10
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	f1 f7       	brne	.-4      	; 0x11ee <LCD_enuInit+0x30c>
    11f2:	98 8b       	std	Y+16, r25	; 0x10
    11f4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_invidSendCommend>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a0 e0       	ldi	r26, 0x00	; 0
    1202:	b0 e4       	ldi	r27, 0x40	; 64
    1204:	8b 87       	std	Y+11, r24	; 0x0b
    1206:	9c 87       	std	Y+12, r25	; 0x0c
    1208:	ad 87       	std	Y+13, r26	; 0x0d
    120a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120c:	6b 85       	ldd	r22, Y+11	; 0x0b
    120e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1210:	8d 85       	ldd	r24, Y+13	; 0x0d
    1212:	9e 85       	ldd	r25, Y+14	; 0x0e
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	4a e7       	ldi	r20, 0x7A	; 122
    121a:	53 e4       	ldi	r21, 0x43	; 67
    121c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	8f 83       	std	Y+7, r24	; 0x07
    1226:	98 87       	std	Y+8, r25	; 0x08
    1228:	a9 87       	std	Y+9, r26	; 0x09
    122a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    122c:	6f 81       	ldd	r22, Y+7	; 0x07
    122e:	78 85       	ldd	r23, Y+8	; 0x08
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	9a 85       	ldd	r25, Y+10	; 0x0a
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e8       	ldi	r20, 0x80	; 128
    123a:	5f e3       	ldi	r21, 0x3F	; 63
    123c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1240:	88 23       	and	r24, r24
    1242:	2c f4       	brge	.+10     	; 0x124e <LCD_enuInit+0x36c>
		__ticks = 1;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	9e 83       	std	Y+6, r25	; 0x06
    124a:	8d 83       	std	Y+5, r24	; 0x05
    124c:	3f c0       	rjmp	.+126    	; 0x12cc <LCD_enuInit+0x3ea>
	else if (__tmp > 65535)
    124e:	6f 81       	ldd	r22, Y+7	; 0x07
    1250:	78 85       	ldd	r23, Y+8	; 0x08
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f e7       	ldi	r20, 0x7F	; 127
    125c:	57 e4       	ldi	r21, 0x47	; 71
    125e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1262:	18 16       	cp	r1, r24
    1264:	4c f5       	brge	.+82     	; 0x12b8 <LCD_enuInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1266:	6b 85       	ldd	r22, Y+11	; 0x0b
    1268:	7c 85       	ldd	r23, Y+12	; 0x0c
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	9e 85       	ldd	r25, Y+14	; 0x0e
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e2       	ldi	r20, 0x20	; 32
    1274:	51 e4       	ldi	r21, 0x41	; 65
    1276:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	bc 01       	movw	r22, r24
    1280:	cd 01       	movw	r24, r26
    1282:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	9e 83       	std	Y+6, r25	; 0x06
    128c:	8d 83       	std	Y+5, r24	; 0x05
    128e:	0f c0       	rjmp	.+30     	; 0x12ae <LCD_enuInit+0x3cc>
    1290:	89 e1       	ldi	r24, 0x19	; 25
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9c 83       	std	Y+4, r25	; 0x04
    1296:	8b 83       	std	Y+3, r24	; 0x03
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <LCD_enuInit+0x3ba>
    12a0:	9c 83       	std	Y+4, r25	; 0x04
    12a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	9e 81       	ldd	r25, Y+6	; 0x06
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ae:	8d 81       	ldd	r24, Y+5	; 0x05
    12b0:	9e 81       	ldd	r25, Y+6	; 0x06
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	69 f7       	brne	.-38     	; 0x1290 <LCD_enuInit+0x3ae>
    12b6:	14 c0       	rjmp	.+40     	; 0x12e0 <LCD_enuInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ba:	78 85       	ldd	r23, Y+8	; 0x08
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	9e 83       	std	Y+6, r25	; 0x06
    12ca:	8d 83       	std	Y+5, r24	; 0x05
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <LCD_enuInit+0x3f6>
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    12e0:	86 e0       	ldi	r24, 0x06	; 6
    12e2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_invidSendCommend>

	return Local_enuErrorState;
    12e6:	89 ad       	ldd	r24, Y+57	; 0x39
}
    12e8:	e9 96       	adiw	r28, 0x39	; 57
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <LCD_enuDisplayChar+0x6>
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1306:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	61 e0       	ldi	r22, 0x01	; 1
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <LCD_vidLatch>

	return Local_enuErrorState;
    1318:	89 81       	ldd	r24, Y+1	; 0x01
}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <LCD_enuSendCommand+0x6>
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1330:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	61 e0       	ldi	r22, 0x01	; 1
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <LCD_vidLatch>


	return Local_enuErrorState;
    1342:	89 81       	ldd	r24, Y+1	; 0x01
}
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <LCD_enuDisplayIntegerNum>:


ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	2b 97       	sbiw	r28, 0x0b	; 11
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	68 87       	std	Y+8, r22	; 0x08
    1364:	79 87       	std	Y+9, r23	; 0x09
    1366:	8a 87       	std	Y+10, r24	; 0x0a
    1368:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
    136a:	1f 82       	std	Y+7, r1	; 0x07

	s32 Local_s32Reverse=0;
    136c:	1b 82       	std	Y+3, r1	; 0x03
    136e:	1c 82       	std	Y+4, r1	; 0x04
    1370:	1d 82       	std	Y+5, r1	; 0x05
    1372:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    1374:	1a 82       	std	Y+2, r1	; 0x02
    1376:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num <0)
    1378:	88 85       	ldd	r24, Y+8	; 0x08
    137a:	99 85       	ldd	r25, Y+9	; 0x09
    137c:	aa 85       	ldd	r26, Y+10	; 0x0a
    137e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1380:	bb 23       	and	r27, r27
    1382:	0c f0       	brlt	.+2      	; 0x1386 <LCD_enuDisplayIntegerNum+0x38>
    1384:	57 c0       	rjmp	.+174    	; 0x1434 <LCD_enuDisplayIntegerNum+0xe6>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	61 e0       	ldi	r22, 0x01	; 1
    138a:	41 e0       	ldi	r20, 0x01	; 1
    138c:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
		LCD_vidLatch('-');
    1390:	8d e2       	ldi	r24, 0x2D	; 45
    1392:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    1396:	88 85       	ldd	r24, Y+8	; 0x08
    1398:	99 85       	ldd	r25, Y+9	; 0x09
    139a:	aa 85       	ldd	r26, Y+10	; 0x0a
    139c:	bb 85       	ldd	r27, Y+11	; 0x0b
    139e:	b0 95       	com	r27
    13a0:	a0 95       	com	r26
    13a2:	90 95       	com	r25
    13a4:	81 95       	neg	r24
    13a6:	9f 4f       	sbci	r25, 0xFF	; 255
    13a8:	af 4f       	sbci	r26, 0xFF	; 255
    13aa:	bf 4f       	sbci	r27, 0xFF	; 255
    13ac:	88 87       	std	Y+8, r24	; 0x08
    13ae:	99 87       	std	Y+9, r25	; 0x09
    13b0:	aa 87       	std	Y+10, r26	; 0x0a
    13b2:	bb 87       	std	Y+11, r27	; 0x0b
    13b4:	3f c0       	rjmp	.+126    	; 0x1434 <LCD_enuDisplayIntegerNum+0xe6>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    13b6:	88 85       	ldd	r24, Y+8	; 0x08
    13b8:	99 85       	ldd	r25, Y+9	; 0x09
    13ba:	aa 85       	ldd	r26, Y+10	; 0x0a
    13bc:	bb 85       	ldd	r27, Y+11	; 0x0b
    13be:	2a e0       	ldi	r18, 0x0A	; 10
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	bc 01       	movw	r22, r24
    13c8:	cd 01       	movw	r24, r26
    13ca:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__divmodsi4>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	ad 81       	ldd	r26, Y+5	; 0x05
    13da:	be 81       	ldd	r27, Y+6	; 0x06
    13dc:	2a e0       	ldi	r18, 0x0A	; 10
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	bc 01       	movw	r22, r24
    13e6:	cd 01       	movw	r24, r26
    13e8:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__mulsi3>
    13ec:	9b 01       	movw	r18, r22
    13ee:	ac 01       	movw	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a0 e0       	ldi	r26, 0x00	; 0
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	82 0f       	add	r24, r18
    13fc:	93 1f       	adc	r25, r19
    13fe:	a4 1f       	adc	r26, r20
    1400:	b5 1f       	adc	r27, r21
    1402:	8b 83       	std	Y+3, r24	; 0x03
    1404:	9c 83       	std	Y+4, r25	; 0x04
    1406:	ad 83       	std	Y+5, r26	; 0x05
    1408:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    140a:	88 85       	ldd	r24, Y+8	; 0x08
    140c:	99 85       	ldd	r25, Y+9	; 0x09
    140e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1410:	bb 85       	ldd	r27, Y+11	; 0x0b
    1412:	2a e0       	ldi	r18, 0x0A	; 10
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e0       	ldi	r20, 0x00	; 0
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__divmodsi4>
    1422:	da 01       	movw	r26, r20
    1424:	c9 01       	movw	r24, r18
    1426:	88 87       	std	Y+8, r24	; 0x08
    1428:	99 87       	std	Y+9, r25	; 0x09
    142a:	aa 87       	std	Y+10, r26	; 0x0a
    142c:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	8f 5f       	subi	r24, 0xFF	; 255
    1432:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    1434:	88 85       	ldd	r24, Y+8	; 0x08
    1436:	99 85       	ldd	r25, Y+9	; 0x09
    1438:	aa 85       	ldd	r26, Y+10	; 0x0a
    143a:	bb 85       	ldd	r27, Y+11	; 0x0b
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	a1 05       	cpc	r26, r1
    1440:	b1 05       	cpc	r27, r1
    1442:	09 f0       	breq	.+2      	; 0x1446 <LCD_enuDisplayIntegerNum+0xf8>
    1444:	b8 cf       	rjmp	.-144    	; 0x13b6 <LCD_enuDisplayIntegerNum+0x68>
    1446:	2d c0       	rjmp	.+90     	; 0x14a2 <LCD_enuDisplayIntegerNum+0x154>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	ad 81       	ldd	r26, Y+5	; 0x05
    144e:	be 81       	ldd	r27, Y+6	; 0x06
    1450:	2a e0       	ldi	r18, 0x0A	; 10
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	bc 01       	movw	r22, r24
    145a:	cd 01       	movw	r24, r26
    145c:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__divmodsi4>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	80 5d       	subi	r24, 0xD0	; 208
    1474:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <LCD_vidLatch>
		Local_s32Reverse /= 10;
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	ad 81       	ldd	r26, Y+5	; 0x05
    147e:	be 81       	ldd	r27, Y+6	; 0x06
    1480:	2a e0       	ldi	r18, 0x0A	; 10
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	bc 01       	movw	r22, r24
    148a:	cd 01       	movw	r24, r26
    148c:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__divmodsi4>
    1490:	da 01       	movw	r26, r20
    1492:	c9 01       	movw	r24, r18
    1494:	8b 83       	std	Y+3, r24	; 0x03
    1496:	9c 83       	std	Y+4, r25	; 0x04
    1498:	ad 83       	std	Y+5, r26	; 0x05
    149a:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	81 50       	subi	r24, 0x01	; 1
    14a0:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	88 23       	and	r24, r24
    14a6:	81 f6       	brne	.-96     	; 0x1448 <LCD_enuDisplayIntegerNum+0xfa>
		LCD_vidLatch(Local_u8Remainder + '0');
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
    14a8:	8f 81       	ldd	r24, Y+7	; 0x07
}
    14aa:	2b 96       	adiw	r28, 0x0b	; 11
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <LCD_vidLatch>:




static void LCD_vidLatch(u8 Copy_u8Data)
{
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	c5 55       	subi	r28, 0x55	; 85
    14ca:	d0 40       	sbci	r29, 0x00	; 0
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	fe 01       	movw	r30, r28
    14d8:	eb 5a       	subi	r30, 0xAB	; 171
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	80 83       	st	Z, r24
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	62 e0       	ldi	r22, 0x02	; 2
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	63 e0       	ldi	r22, 0x03	; 3
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    14f2:	fe 01       	movw	r30, r28
    14f4:	eb 5a       	subi	r30, 0xAB	; 171
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	80 81       	ld	r24, Z
    14fa:	98 2f       	mov	r25, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	99 27       	eor	r25, r25
    1500:	99 1f       	adc	r25, r25
    1502:	82 e0       	ldi	r24, 0x02	; 2
    1504:	67 e0       	ldi	r22, 0x07	; 7
    1506:	49 2f       	mov	r20, r25
    1508:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    150c:	fe 01       	movw	r30, r28
    150e:	eb 5a       	subi	r30, 0xAB	; 171
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	80 81       	ld	r24, Z
    1514:	82 95       	swap	r24
    1516:	86 95       	lsr	r24
    1518:	86 95       	lsr	r24
    151a:	83 70       	andi	r24, 0x03	; 3
    151c:	98 2f       	mov	r25, r24
    151e:	91 70       	andi	r25, 0x01	; 1
    1520:	82 e0       	ldi	r24, 0x02	; 2
    1522:	66 e0       	ldi	r22, 0x06	; 6
    1524:	49 2f       	mov	r20, r25
    1526:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    152a:	fe 01       	movw	r30, r28
    152c:	eb 5a       	subi	r30, 0xAB	; 171
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	80 81       	ld	r24, Z
    1532:	82 95       	swap	r24
    1534:	86 95       	lsr	r24
    1536:	87 70       	andi	r24, 0x07	; 7
    1538:	98 2f       	mov	r25, r24
    153a:	91 70       	andi	r25, 0x01	; 1
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	65 e0       	ldi	r22, 0x05	; 5
    1540:	49 2f       	mov	r20, r25
    1542:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1546:	fe 01       	movw	r30, r28
    1548:	eb 5a       	subi	r30, 0xAB	; 171
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	80 81       	ld	r24, Z
    154e:	82 95       	swap	r24
    1550:	8f 70       	andi	r24, 0x0F	; 15
    1552:	98 2f       	mov	r25, r24
    1554:	91 70       	andi	r25, 0x01	; 1
    1556:	82 e0       	ldi	r24, 0x02	; 2
    1558:	64 e0       	ldi	r22, 0x04	; 4
    155a:	49 2f       	mov	r20, r25
    155c:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));

#elif LCD_MODE == FOUR_BIT
	if (Copy_u8Data == 0x28)
    1560:	fe 01       	movw	r30, r28
    1562:	eb 5a       	subi	r30, 0xAB	; 171
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	80 81       	ld	r24, Z
    1568:	88 32       	cpi	r24, 0x28	; 40
    156a:	09 f0       	breq	.+2      	; 0x156e <LCD_vidLatch+0xb2>
    156c:	79 c1       	rjmp	.+754    	; 0x1860 <LCD_vidLatch+0x3a4>
	{
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	63 e0       	ldi	r22, 0x03	; 3
    1572:	41 e0       	ldi	r20, 0x01	; 1
    1574:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
    1578:	fe 01       	movw	r30, r28
    157a:	ef 5a       	subi	r30, 0xAF	; 175
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a0 e2       	ldi	r26, 0x20	; 32
    1584:	b1 e4       	ldi	r27, 0x41	; 65
    1586:	80 83       	st	Z, r24
    1588:	91 83       	std	Z+1, r25	; 0x01
    158a:	a2 83       	std	Z+2, r26	; 0x02
    158c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158e:	8e 01       	movw	r16, r28
    1590:	03 5b       	subi	r16, 0xB3	; 179
    1592:	1f 4f       	sbci	r17, 0xFF	; 255
    1594:	fe 01       	movw	r30, r28
    1596:	ef 5a       	subi	r30, 0xAF	; 175
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	60 81       	ld	r22, Z
    159c:	71 81       	ldd	r23, Z+1	; 0x01
    159e:	82 81       	ldd	r24, Z+2	; 0x02
    15a0:	93 81       	ldd	r25, Z+3	; 0x03
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	4a e7       	ldi	r20, 0x7A	; 122
    15a8:	53 e4       	ldi	r21, 0x43	; 67
    15aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	f8 01       	movw	r30, r16
    15b4:	80 83       	st	Z, r24
    15b6:	91 83       	std	Z+1, r25	; 0x01
    15b8:	a2 83       	std	Z+2, r26	; 0x02
    15ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15bc:	fe 01       	movw	r30, r28
    15be:	e3 5b       	subi	r30, 0xB3	; 179
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	60 81       	ld	r22, Z
    15c4:	71 81       	ldd	r23, Z+1	; 0x01
    15c6:	82 81       	ldd	r24, Z+2	; 0x02
    15c8:	93 81       	ldd	r25, Z+3	; 0x03
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e8       	ldi	r20, 0x80	; 128
    15d0:	5f e3       	ldi	r21, 0x3F	; 63
    15d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15d6:	88 23       	and	r24, r24
    15d8:	44 f4       	brge	.+16     	; 0x15ea <LCD_vidLatch+0x12e>
		__ticks = 1;
    15da:	fe 01       	movw	r30, r28
    15dc:	e5 5b       	subi	r30, 0xB5	; 181
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24
    15e8:	64 c0       	rjmp	.+200    	; 0x16b2 <LCD_vidLatch+0x1f6>
	else if (__tmp > 65535)
    15ea:	fe 01       	movw	r30, r28
    15ec:	e3 5b       	subi	r30, 0xB3	; 179
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	60 81       	ld	r22, Z
    15f2:	71 81       	ldd	r23, Z+1	; 0x01
    15f4:	82 81       	ldd	r24, Z+2	; 0x02
    15f6:	93 81       	ldd	r25, Z+3	; 0x03
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	3f ef       	ldi	r19, 0xFF	; 255
    15fc:	4f e7       	ldi	r20, 0x7F	; 127
    15fe:	57 e4       	ldi	r21, 0x47	; 71
    1600:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1604:	18 16       	cp	r1, r24
    1606:	0c f0       	brlt	.+2      	; 0x160a <LCD_vidLatch+0x14e>
    1608:	43 c0       	rjmp	.+134    	; 0x1690 <LCD_vidLatch+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160a:	fe 01       	movw	r30, r28
    160c:	ef 5a       	subi	r30, 0xAF	; 175
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	60 81       	ld	r22, Z
    1612:	71 81       	ldd	r23, Z+1	; 0x01
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e2       	ldi	r20, 0x20	; 32
    161e:	51 e4       	ldi	r21, 0x41	; 65
    1620:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	8e 01       	movw	r16, r28
    162a:	05 5b       	subi	r16, 0xB5	; 181
    162c:	1f 4f       	sbci	r17, 0xFF	; 255
    162e:	bc 01       	movw	r22, r24
    1630:	cd 01       	movw	r24, r26
    1632:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	f8 01       	movw	r30, r16
    163c:	91 83       	std	Z+1, r25	; 0x01
    163e:	80 83       	st	Z, r24
    1640:	1f c0       	rjmp	.+62     	; 0x1680 <LCD_vidLatch+0x1c4>
    1642:	fe 01       	movw	r30, r28
    1644:	e7 5b       	subi	r30, 0xB7	; 183
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	89 e1       	ldi	r24, 0x19	; 25
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	91 83       	std	Z+1, r25	; 0x01
    164e:	80 83       	st	Z, r24
    1650:	fe 01       	movw	r30, r28
    1652:	e7 5b       	subi	r30, 0xB7	; 183
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	80 81       	ld	r24, Z
    1658:	91 81       	ldd	r25, Z+1	; 0x01
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <LCD_vidLatch+0x19e>
    165e:	fe 01       	movw	r30, r28
    1660:	e7 5b       	subi	r30, 0xB7	; 183
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1668:	de 01       	movw	r26, r28
    166a:	a5 5b       	subi	r26, 0xB5	; 181
    166c:	bf 4f       	sbci	r27, 0xFF	; 255
    166e:	fe 01       	movw	r30, r28
    1670:	e5 5b       	subi	r30, 0xB5	; 181
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	80 81       	ld	r24, Z
    1676:	91 81       	ldd	r25, Z+1	; 0x01
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	11 96       	adiw	r26, 0x01	; 1
    167c:	9c 93       	st	X, r25
    167e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1680:	fe 01       	movw	r30, r28
    1682:	e5 5b       	subi	r30, 0xB5	; 181
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	80 81       	ld	r24, Z
    1688:	91 81       	ldd	r25, Z+1	; 0x01
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	d1 f6       	brne	.-76     	; 0x1642 <LCD_vidLatch+0x186>
    168e:	27 c0       	rjmp	.+78     	; 0x16de <LCD_vidLatch+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1690:	8e 01       	movw	r16, r28
    1692:	05 5b       	subi	r16, 0xB5	; 181
    1694:	1f 4f       	sbci	r17, 0xFF	; 255
    1696:	fe 01       	movw	r30, r28
    1698:	e3 5b       	subi	r30, 0xB3	; 179
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	60 81       	ld	r22, Z
    169e:	71 81       	ldd	r23, Z+1	; 0x01
    16a0:	82 81       	ldd	r24, Z+2	; 0x02
    16a2:	93 81       	ldd	r25, Z+3	; 0x03
    16a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	f8 01       	movw	r30, r16
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
    16b2:	de 01       	movw	r26, r28
    16b4:	a9 5b       	subi	r26, 0xB9	; 185
    16b6:	bf 4f       	sbci	r27, 0xFF	; 255
    16b8:	fe 01       	movw	r30, r28
    16ba:	e5 5b       	subi	r30, 0xB5	; 181
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	8d 93       	st	X+, r24
    16c4:	9c 93       	st	X, r25
    16c6:	fe 01       	movw	r30, r28
    16c8:	e9 5b       	subi	r30, 0xB9	; 185
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	80 81       	ld	r24, Z
    16ce:	91 81       	ldd	r25, Z+1	; 0x01
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <LCD_vidLatch+0x214>
    16d4:	fe 01       	movw	r30, r28
    16d6:	e9 5b       	subi	r30, 0xB9	; 185
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	80 83       	st	Z, r24
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	63 e0       	ldi	r22, 0x03	; 3
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
    16e8:	fe 01       	movw	r30, r28
    16ea:	ed 5b       	subi	r30, 0xBD	; 189
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a0 e2       	ldi	r26, 0x20	; 32
    16f4:	b1 e4       	ldi	r27, 0x41	; 65
    16f6:	80 83       	st	Z, r24
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	a2 83       	std	Z+2, r26	; 0x02
    16fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fe:	8e 01       	movw	r16, r28
    1700:	01 5c       	subi	r16, 0xC1	; 193
    1702:	1f 4f       	sbci	r17, 0xFF	; 255
    1704:	fe 01       	movw	r30, r28
    1706:	ed 5b       	subi	r30, 0xBD	; 189
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	4a e7       	ldi	r20, 0x7A	; 122
    1718:	53 e4       	ldi	r21, 0x43	; 67
    171a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	f8 01       	movw	r30, r16
    1724:	80 83       	st	Z, r24
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	a2 83       	std	Z+2, r26	; 0x02
    172a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    172c:	fe 01       	movw	r30, r28
    172e:	ff 96       	adiw	r30, 0x3f	; 63
    1730:	60 81       	ld	r22, Z
    1732:	71 81       	ldd	r23, Z+1	; 0x01
    1734:	82 81       	ldd	r24, Z+2	; 0x02
    1736:	93 81       	ldd	r25, Z+3	; 0x03
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e8       	ldi	r20, 0x80	; 128
    173e:	5f e3       	ldi	r21, 0x3F	; 63
    1740:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1744:	88 23       	and	r24, r24
    1746:	2c f4       	brge	.+10     	; 0x1752 <LCD_vidLatch+0x296>
		__ticks = 1;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9e af       	std	Y+62, r25	; 0x3e
    174e:	8d af       	std	Y+61, r24	; 0x3d
    1750:	46 c0       	rjmp	.+140    	; 0x17de <LCD_vidLatch+0x322>
	else if (__tmp > 65535)
    1752:	fe 01       	movw	r30, r28
    1754:	ff 96       	adiw	r30, 0x3f	; 63
    1756:	60 81       	ld	r22, Z
    1758:	71 81       	ldd	r23, Z+1	; 0x01
    175a:	82 81       	ldd	r24, Z+2	; 0x02
    175c:	93 81       	ldd	r25, Z+3	; 0x03
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	3f ef       	ldi	r19, 0xFF	; 255
    1762:	4f e7       	ldi	r20, 0x7F	; 127
    1764:	57 e4       	ldi	r21, 0x47	; 71
    1766:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    176a:	18 16       	cp	r1, r24
    176c:	64 f5       	brge	.+88     	; 0x17c6 <LCD_vidLatch+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176e:	fe 01       	movw	r30, r28
    1770:	ed 5b       	subi	r30, 0xBD	; 189
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	60 81       	ld	r22, Z
    1776:	71 81       	ldd	r23, Z+1	; 0x01
    1778:	82 81       	ldd	r24, Z+2	; 0x02
    177a:	93 81       	ldd	r25, Z+3	; 0x03
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e2       	ldi	r20, 0x20	; 32
    1782:	51 e4       	ldi	r21, 0x41	; 65
    1784:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	bc 01       	movw	r22, r24
    178e:	cd 01       	movw	r24, r26
    1790:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	9e af       	std	Y+62, r25	; 0x3e
    179a:	8d af       	std	Y+61, r24	; 0x3d
    179c:	0f c0       	rjmp	.+30     	; 0x17bc <LCD_vidLatch+0x300>
    179e:	89 e1       	ldi	r24, 0x19	; 25
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	9c af       	std	Y+60, r25	; 0x3c
    17a4:	8b af       	std	Y+59, r24	; 0x3b
    17a6:	8b ad       	ldd	r24, Y+59	; 0x3b
    17a8:	9c ad       	ldd	r25, Y+60	; 0x3c
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <LCD_vidLatch+0x2ee>
    17ae:	9c af       	std	Y+60, r25	; 0x3c
    17b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    17b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	9e af       	std	Y+62, r25	; 0x3e
    17ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    17be:	9e ad       	ldd	r25, Y+62	; 0x3e
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	69 f7       	brne	.-38     	; 0x179e <LCD_vidLatch+0x2e2>
    17c4:	16 c0       	rjmp	.+44     	; 0x17f2 <LCD_vidLatch+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c6:	fe 01       	movw	r30, r28
    17c8:	ff 96       	adiw	r30, 0x3f	; 63
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	9e af       	std	Y+62, r25	; 0x3e
    17dc:	8d af       	std	Y+61, r24	; 0x3d
    17de:	8d ad       	ldd	r24, Y+61	; 0x3d
    17e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    17e2:	9a af       	std	Y+58, r25	; 0x3a
    17e4:	89 af       	std	Y+57, r24	; 0x39
    17e6:	89 ad       	ldd	r24, Y+57	; 0x39
    17e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <LCD_vidLatch+0x32e>
    17ee:	9a af       	std	Y+58, r25	; 0x3a
    17f0:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(10);

		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    17f2:	fe 01       	movw	r30, r28
    17f4:	eb 5a       	subi	r30, 0xAB	; 171
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	80 81       	ld	r24, Z
    17fa:	98 2f       	mov	r25, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	99 27       	eor	r25, r25
    1800:	99 1f       	adc	r25, r25
    1802:	82 e0       	ldi	r24, 0x02	; 2
    1804:	67 e0       	ldi	r22, 0x07	; 7
    1806:	49 2f       	mov	r20, r25
    1808:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    180c:	fe 01       	movw	r30, r28
    180e:	eb 5a       	subi	r30, 0xAB	; 171
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	80 81       	ld	r24, Z
    1814:	82 95       	swap	r24
    1816:	86 95       	lsr	r24
    1818:	86 95       	lsr	r24
    181a:	83 70       	andi	r24, 0x03	; 3
    181c:	98 2f       	mov	r25, r24
    181e:	91 70       	andi	r25, 0x01	; 1
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	66 e0       	ldi	r22, 0x06	; 6
    1824:	49 2f       	mov	r20, r25
    1826:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    182a:	fe 01       	movw	r30, r28
    182c:	eb 5a       	subi	r30, 0xAB	; 171
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 81       	ld	r24, Z
    1832:	82 95       	swap	r24
    1834:	86 95       	lsr	r24
    1836:	87 70       	andi	r24, 0x07	; 7
    1838:	98 2f       	mov	r25, r24
    183a:	91 70       	andi	r25, 0x01	; 1
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	65 e0       	ldi	r22, 0x05	; 5
    1840:	49 2f       	mov	r20, r25
    1842:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1846:	fe 01       	movw	r30, r28
    1848:	eb 5a       	subi	r30, 0xAB	; 171
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	80 81       	ld	r24, Z
    184e:	82 95       	swap	r24
    1850:	8f 70       	andi	r24, 0x0F	; 15
    1852:	98 2f       	mov	r25, r24
    1854:	91 70       	andi	r25, 0x01	; 1
    1856:	82 e0       	ldi	r24, 0x02	; 2
    1858:	64 e0       	ldi	r22, 0x04	; 4
    185a:	49 2f       	mov	r20, r25
    185c:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	}

	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	63 e0       	ldi	r22, 0x03	; 3
    1864:	41 e0       	ldi	r20, 0x01	; 1
    1866:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	a0 e2       	ldi	r26, 0x20	; 32
    1870:	b1 e4       	ldi	r27, 0x41	; 65
    1872:	8d ab       	std	Y+53, r24	; 0x35
    1874:	9e ab       	std	Y+54, r25	; 0x36
    1876:	af ab       	std	Y+55, r26	; 0x37
    1878:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187a:	6d a9       	ldd	r22, Y+53	; 0x35
    187c:	7e a9       	ldd	r23, Y+54	; 0x36
    187e:	8f a9       	ldd	r24, Y+55	; 0x37
    1880:	98 ad       	ldd	r25, Y+56	; 0x38
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	4a e7       	ldi	r20, 0x7A	; 122
    1888:	53 e4       	ldi	r21, 0x43	; 67
    188a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	89 ab       	std	Y+49, r24	; 0x31
    1894:	9a ab       	std	Y+50, r25	; 0x32
    1896:	ab ab       	std	Y+51, r26	; 0x33
    1898:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    189a:	69 a9       	ldd	r22, Y+49	; 0x31
    189c:	7a a9       	ldd	r23, Y+50	; 0x32
    189e:	8b a9       	ldd	r24, Y+51	; 0x33
    18a0:	9c a9       	ldd	r25, Y+52	; 0x34
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e8       	ldi	r20, 0x80	; 128
    18a8:	5f e3       	ldi	r21, 0x3F	; 63
    18aa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18ae:	88 23       	and	r24, r24
    18b0:	2c f4       	brge	.+10     	; 0x18bc <LCD_vidLatch+0x400>
		__ticks = 1;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	98 ab       	std	Y+48, r25	; 0x30
    18b8:	8f a7       	std	Y+47, r24	; 0x2f
    18ba:	3f c0       	rjmp	.+126    	; 0x193a <LCD_vidLatch+0x47e>
	else if (__tmp > 65535)
    18bc:	69 a9       	ldd	r22, Y+49	; 0x31
    18be:	7a a9       	ldd	r23, Y+50	; 0x32
    18c0:	8b a9       	ldd	r24, Y+51	; 0x33
    18c2:	9c a9       	ldd	r25, Y+52	; 0x34
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	3f ef       	ldi	r19, 0xFF	; 255
    18c8:	4f e7       	ldi	r20, 0x7F	; 127
    18ca:	57 e4       	ldi	r21, 0x47	; 71
    18cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18d0:	18 16       	cp	r1, r24
    18d2:	4c f5       	brge	.+82     	; 0x1926 <LCD_vidLatch+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d4:	6d a9       	ldd	r22, Y+53	; 0x35
    18d6:	7e a9       	ldd	r23, Y+54	; 0x36
    18d8:	8f a9       	ldd	r24, Y+55	; 0x37
    18da:	98 ad       	ldd	r25, Y+56	; 0x38
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e2       	ldi	r20, 0x20	; 32
    18e2:	51 e4       	ldi	r21, 0x41	; 65
    18e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	bc 01       	movw	r22, r24
    18ee:	cd 01       	movw	r24, r26
    18f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	98 ab       	std	Y+48, r25	; 0x30
    18fa:	8f a7       	std	Y+47, r24	; 0x2f
    18fc:	0f c0       	rjmp	.+30     	; 0x191c <LCD_vidLatch+0x460>
    18fe:	89 e1       	ldi	r24, 0x19	; 25
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	9e a7       	std	Y+46, r25	; 0x2e
    1904:	8d a7       	std	Y+45, r24	; 0x2d
    1906:	8d a5       	ldd	r24, Y+45	; 0x2d
    1908:	9e a5       	ldd	r25, Y+46	; 0x2e
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	f1 f7       	brne	.-4      	; 0x190a <LCD_vidLatch+0x44e>
    190e:	9e a7       	std	Y+46, r25	; 0x2e
    1910:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1912:	8f a5       	ldd	r24, Y+47	; 0x2f
    1914:	98 a9       	ldd	r25, Y+48	; 0x30
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	98 ab       	std	Y+48, r25	; 0x30
    191a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191c:	8f a5       	ldd	r24, Y+47	; 0x2f
    191e:	98 a9       	ldd	r25, Y+48	; 0x30
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	69 f7       	brne	.-38     	; 0x18fe <LCD_vidLatch+0x442>
    1924:	14 c0       	rjmp	.+40     	; 0x194e <LCD_vidLatch+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1926:	69 a9       	ldd	r22, Y+49	; 0x31
    1928:	7a a9       	ldd	r23, Y+50	; 0x32
    192a:	8b a9       	ldd	r24, Y+51	; 0x33
    192c:	9c a9       	ldd	r25, Y+52	; 0x34
    192e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	98 ab       	std	Y+48, r25	; 0x30
    1938:	8f a7       	std	Y+47, r24	; 0x2f
    193a:	8f a5       	ldd	r24, Y+47	; 0x2f
    193c:	98 a9       	ldd	r25, Y+48	; 0x30
    193e:	9c a7       	std	Y+44, r25	; 0x2c
    1940:	8b a7       	std	Y+43, r24	; 0x2b
    1942:	8b a5       	ldd	r24, Y+43	; 0x2b
    1944:	9c a5       	ldd	r25, Y+44	; 0x2c
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <LCD_vidLatch+0x48a>
    194a:	9c a7       	std	Y+44, r25	; 0x2c
    194c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	63 e0       	ldi	r22, 0x03	; 3
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a0 e2       	ldi	r26, 0x20	; 32
    195e:	b1 e4       	ldi	r27, 0x41	; 65
    1960:	8f a3       	std	Y+39, r24	; 0x27
    1962:	98 a7       	std	Y+40, r25	; 0x28
    1964:	a9 a7       	std	Y+41, r26	; 0x29
    1966:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1968:	6f a1       	ldd	r22, Y+39	; 0x27
    196a:	78 a5       	ldd	r23, Y+40	; 0x28
    196c:	89 a5       	ldd	r24, Y+41	; 0x29
    196e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	4a e7       	ldi	r20, 0x7A	; 122
    1976:	53 e4       	ldi	r21, 0x43	; 67
    1978:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	8b a3       	std	Y+35, r24	; 0x23
    1982:	9c a3       	std	Y+36, r25	; 0x24
    1984:	ad a3       	std	Y+37, r26	; 0x25
    1986:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1988:	6b a1       	ldd	r22, Y+35	; 0x23
    198a:	7c a1       	ldd	r23, Y+36	; 0x24
    198c:	8d a1       	ldd	r24, Y+37	; 0x25
    198e:	9e a1       	ldd	r25, Y+38	; 0x26
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e8       	ldi	r20, 0x80	; 128
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    199c:	88 23       	and	r24, r24
    199e:	2c f4       	brge	.+10     	; 0x19aa <LCD_vidLatch+0x4ee>
		__ticks = 1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9a a3       	std	Y+34, r25	; 0x22
    19a6:	89 a3       	std	Y+33, r24	; 0x21
    19a8:	3f c0       	rjmp	.+126    	; 0x1a28 <LCD_vidLatch+0x56c>
	else if (__tmp > 65535)
    19aa:	6b a1       	ldd	r22, Y+35	; 0x23
    19ac:	7c a1       	ldd	r23, Y+36	; 0x24
    19ae:	8d a1       	ldd	r24, Y+37	; 0x25
    19b0:	9e a1       	ldd	r25, Y+38	; 0x26
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	3f ef       	ldi	r19, 0xFF	; 255
    19b6:	4f e7       	ldi	r20, 0x7F	; 127
    19b8:	57 e4       	ldi	r21, 0x47	; 71
    19ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19be:	18 16       	cp	r1, r24
    19c0:	4c f5       	brge	.+82     	; 0x1a14 <LCD_vidLatch+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c2:	6f a1       	ldd	r22, Y+39	; 0x27
    19c4:	78 a5       	ldd	r23, Y+40	; 0x28
    19c6:	89 a5       	ldd	r24, Y+41	; 0x29
    19c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e2       	ldi	r20, 0x20	; 32
    19d0:	51 e4       	ldi	r21, 0x41	; 65
    19d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	bc 01       	movw	r22, r24
    19dc:	cd 01       	movw	r24, r26
    19de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9a a3       	std	Y+34, r25	; 0x22
    19e8:	89 a3       	std	Y+33, r24	; 0x21
    19ea:	0f c0       	rjmp	.+30     	; 0x1a0a <LCD_vidLatch+0x54e>
    19ec:	89 e1       	ldi	r24, 0x19	; 25
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	98 a3       	std	Y+32, r25	; 0x20
    19f2:	8f 8f       	std	Y+31, r24	; 0x1f
    19f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19f6:	98 a1       	ldd	r25, Y+32	; 0x20
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <LCD_vidLatch+0x53c>
    19fc:	98 a3       	std	Y+32, r25	; 0x20
    19fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a00:	89 a1       	ldd	r24, Y+33	; 0x21
    1a02:	9a a1       	ldd	r25, Y+34	; 0x22
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	9a a3       	std	Y+34, r25	; 0x22
    1a08:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	69 f7       	brne	.-38     	; 0x19ec <LCD_vidLatch+0x530>
    1a12:	14 c0       	rjmp	.+40     	; 0x1a3c <LCD_vidLatch+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a14:	6b a1       	ldd	r22, Y+35	; 0x23
    1a16:	7c a1       	ldd	r23, Y+36	; 0x24
    1a18:	8d a1       	ldd	r24, Y+37	; 0x25
    1a1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	9a a3       	std	Y+34, r25	; 0x22
    1a26:	89 a3       	std	Y+33, r24	; 0x21
    1a28:	89 a1       	ldd	r24, Y+33	; 0x21
    1a2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a2e:	8d 8f       	std	Y+29, r24	; 0x1d
    1a30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_vidLatch+0x578>
    1a38:	9e 8f       	std	Y+30, r25	; 0x1e
    1a3a:	8d 8f       	std	Y+29, r24	; 0x1d


	_delay_ms(10);
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>3)&1));
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	eb 5a       	subi	r30, 0xAB	; 171
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	80 81       	ld	r24, Z
    1a44:	86 95       	lsr	r24
    1a46:	86 95       	lsr	r24
    1a48:	86 95       	lsr	r24
    1a4a:	98 2f       	mov	r25, r24
    1a4c:	91 70       	andi	r25, 0x01	; 1
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	67 e0       	ldi	r22, 0x07	; 7
    1a52:	49 2f       	mov	r20, r25
    1a54:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>2)&1));
    1a58:	fe 01       	movw	r30, r28
    1a5a:	eb 5a       	subi	r30, 0xAB	; 171
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	80 81       	ld	r24, Z
    1a60:	86 95       	lsr	r24
    1a62:	86 95       	lsr	r24
    1a64:	98 2f       	mov	r25, r24
    1a66:	91 70       	andi	r25, 0x01	; 1
    1a68:	82 e0       	ldi	r24, 0x02	; 2
    1a6a:	66 e0       	ldi	r22, 0x06	; 6
    1a6c:	49 2f       	mov	r20, r25
    1a6e:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
    1a72:	fe 01       	movw	r30, r28
    1a74:	eb 5a       	subi	r30, 0xAB	; 171
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	80 81       	ld	r24, Z
    1a7a:	86 95       	lsr	r24
    1a7c:	98 2f       	mov	r25, r24
    1a7e:	91 70       	andi	r25, 0x01	; 1
    1a80:	82 e0       	ldi	r24, 0x02	; 2
    1a82:	65 e0       	ldi	r22, 0x05	; 5
    1a84:	49 2f       	mov	r20, r25
    1a86:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	eb 5a       	subi	r30, 0xAB	; 171
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	80 81       	ld	r24, Z
    1a92:	98 2f       	mov	r25, r24
    1a94:	91 70       	andi	r25, 0x01	; 1
    1a96:	82 e0       	ldi	r24, 0x02	; 2
    1a98:	64 e0       	ldi	r22, 0x04	; 4
    1a9a:	49 2f       	mov	r20, r25
    1a9c:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	63 e0       	ldi	r22, 0x03	; 3
    1aa4:	41 e0       	ldi	r20, 0x01	; 1
    1aa6:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a0 e2       	ldi	r26, 0x20	; 32
    1ab0:	b1 e4       	ldi	r27, 0x41	; 65
    1ab2:	89 8f       	std	Y+25, r24	; 0x19
    1ab4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ab6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ab8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aba:	69 8d       	ldd	r22, Y+25	; 0x19
    1abc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	4a e7       	ldi	r20, 0x7A	; 122
    1ac8:	53 e4       	ldi	r21, 0x43	; 67
    1aca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	8d 8b       	std	Y+21, r24	; 0x15
    1ad4:	9e 8b       	std	Y+22, r25	; 0x16
    1ad6:	af 8b       	std	Y+23, r26	; 0x17
    1ad8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ada:	6d 89       	ldd	r22, Y+21	; 0x15
    1adc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ade:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	5f e3       	ldi	r21, 0x3F	; 63
    1aea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	2c f4       	brge	.+10     	; 0x1afc <LCD_vidLatch+0x640>
		__ticks = 1;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9c 8b       	std	Y+20, r25	; 0x14
    1af8:	8b 8b       	std	Y+19, r24	; 0x13
    1afa:	3f c0       	rjmp	.+126    	; 0x1b7a <LCD_vidLatch+0x6be>
	else if (__tmp > 65535)
    1afc:	6d 89       	ldd	r22, Y+21	; 0x15
    1afe:	7e 89       	ldd	r23, Y+22	; 0x16
    1b00:	8f 89       	ldd	r24, Y+23	; 0x17
    1b02:	98 8d       	ldd	r25, Y+24	; 0x18
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	3f ef       	ldi	r19, 0xFF	; 255
    1b08:	4f e7       	ldi	r20, 0x7F	; 127
    1b0a:	57 e4       	ldi	r21, 0x47	; 71
    1b0c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b10:	18 16       	cp	r1, r24
    1b12:	4c f5       	brge	.+82     	; 0x1b66 <LCD_vidLatch+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b14:	69 8d       	ldd	r22, Y+25	; 0x19
    1b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e2       	ldi	r20, 0x20	; 32
    1b22:	51 e4       	ldi	r21, 0x41	; 65
    1b24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9c 8b       	std	Y+20, r25	; 0x14
    1b3a:	8b 8b       	std	Y+19, r24	; 0x13
    1b3c:	0f c0       	rjmp	.+30     	; 0x1b5c <LCD_vidLatch+0x6a0>
    1b3e:	89 e1       	ldi	r24, 0x19	; 25
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9a 8b       	std	Y+18, r25	; 0x12
    1b44:	89 8b       	std	Y+17, r24	; 0x11
    1b46:	89 89       	ldd	r24, Y+17	; 0x11
    1b48:	9a 89       	ldd	r25, Y+18	; 0x12
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <LCD_vidLatch+0x68e>
    1b4e:	9a 8b       	std	Y+18, r25	; 0x12
    1b50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b52:	8b 89       	ldd	r24, Y+19	; 0x13
    1b54:	9c 89       	ldd	r25, Y+20	; 0x14
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	9c 8b       	std	Y+20, r25	; 0x14
    1b5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	69 f7       	brne	.-38     	; 0x1b3e <LCD_vidLatch+0x682>
    1b64:	14 c0       	rjmp	.+40     	; 0x1b8e <LCD_vidLatch+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b66:	6d 89       	ldd	r22, Y+21	; 0x15
    1b68:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9c 8b       	std	Y+20, r25	; 0x14
    1b78:	8b 8b       	std	Y+19, r24	; 0x13
    1b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7e:	98 8b       	std	Y+16, r25	; 0x10
    1b80:	8f 87       	std	Y+15, r24	; 0x0f
    1b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b84:	98 89       	ldd	r25, Y+16	; 0x10
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <LCD_vidLatch+0x6ca>
    1b8a:	98 8b       	std	Y+16, r25	; 0x10
    1b8c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	63 e0       	ldi	r22, 0x03	; 3
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	a0 e2       	ldi	r26, 0x20	; 32
    1b9e:	b1 e4       	ldi	r27, 0x41	; 65
    1ba0:	8b 87       	std	Y+11, r24	; 0x0b
    1ba2:	9c 87       	std	Y+12, r25	; 0x0c
    1ba4:	ad 87       	std	Y+13, r26	; 0x0d
    1ba6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1baa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	4a e7       	ldi	r20, 0x7A	; 122
    1bb6:	53 e4       	ldi	r21, 0x43	; 67
    1bb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	8f 83       	std	Y+7, r24	; 0x07
    1bc2:	98 87       	std	Y+8, r25	; 0x08
    1bc4:	a9 87       	std	Y+9, r26	; 0x09
    1bc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bca:	78 85       	ldd	r23, Y+8	; 0x08
    1bcc:	89 85       	ldd	r24, Y+9	; 0x09
    1bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e8       	ldi	r20, 0x80	; 128
    1bd6:	5f e3       	ldi	r21, 0x3F	; 63
    1bd8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bdc:	88 23       	and	r24, r24
    1bde:	2c f4       	brge	.+10     	; 0x1bea <LCD_vidLatch+0x72e>
		__ticks = 1;
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	9e 83       	std	Y+6, r25	; 0x06
    1be6:	8d 83       	std	Y+5, r24	; 0x05
    1be8:	3f c0       	rjmp	.+126    	; 0x1c68 <LCD_vidLatch+0x7ac>
	else if (__tmp > 65535)
    1bea:	6f 81       	ldd	r22, Y+7	; 0x07
    1bec:	78 85       	ldd	r23, Y+8	; 0x08
    1bee:	89 85       	ldd	r24, Y+9	; 0x09
    1bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	3f ef       	ldi	r19, 0xFF	; 255
    1bf6:	4f e7       	ldi	r20, 0x7F	; 127
    1bf8:	57 e4       	ldi	r21, 0x47	; 71
    1bfa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bfe:	18 16       	cp	r1, r24
    1c00:	4c f5       	brge	.+82     	; 0x1c54 <LCD_vidLatch+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e2       	ldi	r20, 0x20	; 32
    1c10:	51 e4       	ldi	r21, 0x41	; 65
    1c12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	9e 83       	std	Y+6, r25	; 0x06
    1c28:	8d 83       	std	Y+5, r24	; 0x05
    1c2a:	0f c0       	rjmp	.+30     	; 0x1c4a <LCD_vidLatch+0x78e>
    1c2c:	89 e1       	ldi	r24, 0x19	; 25
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	9c 83       	std	Y+4, r25	; 0x04
    1c32:	8b 83       	std	Y+3, r24	; 0x03
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <LCD_vidLatch+0x77c>
    1c3c:	9c 83       	std	Y+4, r25	; 0x04
    1c3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c40:	8d 81       	ldd	r24, Y+5	; 0x05
    1c42:	9e 81       	ldd	r25, Y+6	; 0x06
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	9e 83       	std	Y+6, r25	; 0x06
    1c48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	69 f7       	brne	.-38     	; 0x1c2c <LCD_vidLatch+0x770>
    1c52:	14 c0       	rjmp	.+40     	; 0x1c7c <LCD_vidLatch+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c54:	6f 81       	ldd	r22, Y+7	; 0x07
    1c56:	78 85       	ldd	r23, Y+8	; 0x08
    1c58:	89 85       	ldd	r24, Y+9	; 0x09
    1c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6c:	9a 83       	std	Y+2, r25	; 0x02
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	9a 81       	ldd	r25, Y+2	; 0x02
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <LCD_vidLatch+0x7b8>
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    1c7c:	cb 5a       	subi	r28, 0xAB	; 171
    1c7e:	df 4f       	sbci	r29, 0xFF	; 255
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	08 95       	ret

00001c94 <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	ab 97       	sbiw	r28, 0x2b	; 43
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	8b a7       	std	Y+43, r24	; 0x2b
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	61 e0       	ldi	r22, 0x01	; 1
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	62 e0       	ldi	r22, 0x02	; 2
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	63 e0       	ldi	r22, 0x03	; 3
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    1cc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cca:	98 2f       	mov	r25, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	99 27       	eor	r25, r25
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	67 e0       	ldi	r22, 0x07	; 7
    1cd6:	49 2f       	mov	r20, r25
    1cd8:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    1cdc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cde:	82 95       	swap	r24
    1ce0:	86 95       	lsr	r24
    1ce2:	86 95       	lsr	r24
    1ce4:	83 70       	andi	r24, 0x03	; 3
    1ce6:	98 2f       	mov	r25, r24
    1ce8:	91 70       	andi	r25, 0x01	; 1
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	66 e0       	ldi	r22, 0x06	; 6
    1cee:	49 2f       	mov	r20, r25
    1cf0:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    1cf4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cf6:	82 95       	swap	r24
    1cf8:	86 95       	lsr	r24
    1cfa:	87 70       	andi	r24, 0x07	; 7
    1cfc:	98 2f       	mov	r25, r24
    1cfe:	91 70       	andi	r25, 0x01	; 1
    1d00:	82 e0       	ldi	r24, 0x02	; 2
    1d02:	65 e0       	ldi	r22, 0x05	; 5
    1d04:	49 2f       	mov	r20, r25
    1d06:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    1d0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d0c:	82 95       	swap	r24
    1d0e:	8f 70       	andi	r24, 0x0F	; 15
    1d10:	98 2f       	mov	r25, r24
    1d12:	91 70       	andi	r25, 0x01	; 1
    1d14:	82 e0       	ldi	r24, 0x02	; 2
    1d16:	64 e0       	ldi	r22, 0x04	; 4
    1d18:	49 2f       	mov	r20, r25
    1d1a:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));

#elif LCD_MODE == FOUR_BIT

	if(Copy_u8Command == 0x28)
    1d1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d20:	88 32       	cpi	r24, 0x28	; 40
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <LCD_invidSendCommend+0x92>
    1d24:	a7 c0       	rjmp	.+334    	; 0x1e74 <LCD_invidSendCommend+0x1e0>
	{
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	63 e0       	ldi	r22, 0x03	; 3
    1d2a:	41 e0       	ldi	r20, 0x01	; 1
    1d2c:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	a0 e2       	ldi	r26, 0x20	; 32
    1d36:	b1 e4       	ldi	r27, 0x41	; 65
    1d38:	8f a3       	std	Y+39, r24	; 0x27
    1d3a:	98 a7       	std	Y+40, r25	; 0x28
    1d3c:	a9 a7       	std	Y+41, r26	; 0x29
    1d3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d40:	6f a1       	ldd	r22, Y+39	; 0x27
    1d42:	78 a5       	ldd	r23, Y+40	; 0x28
    1d44:	89 a5       	ldd	r24, Y+41	; 0x29
    1d46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	4a e7       	ldi	r20, 0x7A	; 122
    1d4e:	53 e4       	ldi	r21, 0x43	; 67
    1d50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	8b a3       	std	Y+35, r24	; 0x23
    1d5a:	9c a3       	std	Y+36, r25	; 0x24
    1d5c:	ad a3       	std	Y+37, r26	; 0x25
    1d5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d60:	6b a1       	ldd	r22, Y+35	; 0x23
    1d62:	7c a1       	ldd	r23, Y+36	; 0x24
    1d64:	8d a1       	ldd	r24, Y+37	; 0x25
    1d66:	9e a1       	ldd	r25, Y+38	; 0x26
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e8       	ldi	r20, 0x80	; 128
    1d6e:	5f e3       	ldi	r21, 0x3F	; 63
    1d70:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d74:	88 23       	and	r24, r24
    1d76:	2c f4       	brge	.+10     	; 0x1d82 <LCD_invidSendCommend+0xee>
		__ticks = 1;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9a a3       	std	Y+34, r25	; 0x22
    1d7e:	89 a3       	std	Y+33, r24	; 0x21
    1d80:	3f c0       	rjmp	.+126    	; 0x1e00 <LCD_invidSendCommend+0x16c>
	else if (__tmp > 65535)
    1d82:	6b a1       	ldd	r22, Y+35	; 0x23
    1d84:	7c a1       	ldd	r23, Y+36	; 0x24
    1d86:	8d a1       	ldd	r24, Y+37	; 0x25
    1d88:	9e a1       	ldd	r25, Y+38	; 0x26
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	3f ef       	ldi	r19, 0xFF	; 255
    1d8e:	4f e7       	ldi	r20, 0x7F	; 127
    1d90:	57 e4       	ldi	r21, 0x47	; 71
    1d92:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d96:	18 16       	cp	r1, r24
    1d98:	4c f5       	brge	.+82     	; 0x1dec <LCD_invidSendCommend+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1da0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e2       	ldi	r20, 0x20	; 32
    1da8:	51 e4       	ldi	r21, 0x41	; 65
    1daa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	bc 01       	movw	r22, r24
    1db4:	cd 01       	movw	r24, r26
    1db6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9a a3       	std	Y+34, r25	; 0x22
    1dc0:	89 a3       	std	Y+33, r24	; 0x21
    1dc2:	0f c0       	rjmp	.+30     	; 0x1de2 <LCD_invidSendCommend+0x14e>
    1dc4:	89 e1       	ldi	r24, 0x19	; 25
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	98 a3       	std	Y+32, r25	; 0x20
    1dca:	8f 8f       	std	Y+31, r24	; 0x1f
    1dcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dce:	98 a1       	ldd	r25, Y+32	; 0x20
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <LCD_invidSendCommend+0x13c>
    1dd4:	98 a3       	std	Y+32, r25	; 0x20
    1dd6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd8:	89 a1       	ldd	r24, Y+33	; 0x21
    1dda:	9a a1       	ldd	r25, Y+34	; 0x22
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	9a a3       	std	Y+34, r25	; 0x22
    1de0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de2:	89 a1       	ldd	r24, Y+33	; 0x21
    1de4:	9a a1       	ldd	r25, Y+34	; 0x22
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	69 f7       	brne	.-38     	; 0x1dc4 <LCD_invidSendCommend+0x130>
    1dea:	14 c0       	rjmp	.+40     	; 0x1e14 <LCD_invidSendCommend+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dec:	6b a1       	ldd	r22, Y+35	; 0x23
    1dee:	7c a1       	ldd	r23, Y+36	; 0x24
    1df0:	8d a1       	ldd	r24, Y+37	; 0x25
    1df2:	9e a1       	ldd	r25, Y+38	; 0x26
    1df4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	9a a3       	std	Y+34, r25	; 0x22
    1dfe:	89 a3       	std	Y+33, r24	; 0x21
    1e00:	89 a1       	ldd	r24, Y+33	; 0x21
    1e02:	9a a1       	ldd	r25, Y+34	; 0x22
    1e04:	9e 8f       	std	Y+30, r25	; 0x1e
    1e06:	8d 8f       	std	Y+29, r24	; 0x1d
    1e08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <LCD_invidSendCommend+0x178>
    1e10:	9e 8f       	std	Y+30, r25	; 0x1e
    1e12:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	63 e0       	ldi	r22, 0x03	; 3
    1e18:	40 e0       	ldi	r20, 0x00	; 0
    1e1a:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>

		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    1e1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e20:	98 2f       	mov	r25, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	99 27       	eor	r25, r25
    1e26:	99 1f       	adc	r25, r25
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	67 e0       	ldi	r22, 0x07	; 7
    1e2c:	49 2f       	mov	r20, r25
    1e2e:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    1e32:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e34:	82 95       	swap	r24
    1e36:	86 95       	lsr	r24
    1e38:	86 95       	lsr	r24
    1e3a:	83 70       	andi	r24, 0x03	; 3
    1e3c:	98 2f       	mov	r25, r24
    1e3e:	91 70       	andi	r25, 0x01	; 1
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	66 e0       	ldi	r22, 0x06	; 6
    1e44:	49 2f       	mov	r20, r25
    1e46:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    1e4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e4c:	82 95       	swap	r24
    1e4e:	86 95       	lsr	r24
    1e50:	87 70       	andi	r24, 0x07	; 7
    1e52:	98 2f       	mov	r25, r24
    1e54:	91 70       	andi	r25, 0x01	; 1
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	65 e0       	ldi	r22, 0x05	; 5
    1e5a:	49 2f       	mov	r20, r25
    1e5c:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    1e60:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e62:	82 95       	swap	r24
    1e64:	8f 70       	andi	r24, 0x0F	; 15
    1e66:	98 2f       	mov	r25, r24
    1e68:	91 70       	andi	r25, 0x01	; 1
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	64 e0       	ldi	r22, 0x04	; 4
    1e6e:	49 2f       	mov	r20, r25
    1e70:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	}
	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	63 e0       	ldi	r22, 0x03	; 3
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	a0 e2       	ldi	r26, 0x20	; 32
    1e84:	b1 e4       	ldi	r27, 0x41	; 65
    1e86:	89 8f       	std	Y+25, r24	; 0x19
    1e88:	9a 8f       	std	Y+26, r25	; 0x1a
    1e8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	4a e7       	ldi	r20, 0x7A	; 122
    1e9c:	53 e4       	ldi	r21, 0x43	; 67
    1e9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	8d 8b       	std	Y+21, r24	; 0x15
    1ea8:	9e 8b       	std	Y+22, r25	; 0x16
    1eaa:	af 8b       	std	Y+23, r26	; 0x17
    1eac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1eae:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e8       	ldi	r20, 0x80	; 128
    1ebc:	5f e3       	ldi	r21, 0x3F	; 63
    1ebe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ec2:	88 23       	and	r24, r24
    1ec4:	2c f4       	brge	.+10     	; 0x1ed0 <LCD_invidSendCommend+0x23c>
		__ticks = 1;
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	9c 8b       	std	Y+20, r25	; 0x14
    1ecc:	8b 8b       	std	Y+19, r24	; 0x13
    1ece:	3f c0       	rjmp	.+126    	; 0x1f4e <LCD_invidSendCommend+0x2ba>
	else if (__tmp > 65535)
    1ed0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	3f ef       	ldi	r19, 0xFF	; 255
    1edc:	4f e7       	ldi	r20, 0x7F	; 127
    1ede:	57 e4       	ldi	r21, 0x47	; 71
    1ee0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	4c f5       	brge	.+82     	; 0x1f3a <LCD_invidSendCommend+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e2       	ldi	r20, 0x20	; 32
    1ef6:	51 e4       	ldi	r21, 0x41	; 65
    1ef8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	bc 01       	movw	r22, r24
    1f02:	cd 01       	movw	r24, r26
    1f04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	9c 8b       	std	Y+20, r25	; 0x14
    1f0e:	8b 8b       	std	Y+19, r24	; 0x13
    1f10:	0f c0       	rjmp	.+30     	; 0x1f30 <LCD_invidSendCommend+0x29c>
    1f12:	89 e1       	ldi	r24, 0x19	; 25
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	9a 8b       	std	Y+18, r25	; 0x12
    1f18:	89 8b       	std	Y+17, r24	; 0x11
    1f1a:	89 89       	ldd	r24, Y+17	; 0x11
    1f1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <LCD_invidSendCommend+0x28a>
    1f22:	9a 8b       	std	Y+18, r25	; 0x12
    1f24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f26:	8b 89       	ldd	r24, Y+19	; 0x13
    1f28:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	9c 8b       	std	Y+20, r25	; 0x14
    1f2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f30:	8b 89       	ldd	r24, Y+19	; 0x13
    1f32:	9c 89       	ldd	r25, Y+20	; 0x14
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	69 f7       	brne	.-38     	; 0x1f12 <LCD_invidSendCommend+0x27e>
    1f38:	14 c0       	rjmp	.+40     	; 0x1f62 <LCD_invidSendCommend+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f40:	98 8d       	ldd	r25, Y+24	; 0x18
    1f42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	9c 8b       	std	Y+20, r25	; 0x14
    1f4c:	8b 8b       	std	Y+19, r24	; 0x13
    1f4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f50:	9c 89       	ldd	r25, Y+20	; 0x14
    1f52:	98 8b       	std	Y+16, r25	; 0x10
    1f54:	8f 87       	std	Y+15, r24	; 0x0f
    1f56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f58:	98 89       	ldd	r25, Y+16	; 0x10
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <LCD_invidSendCommend+0x2c6>
    1f5e:	98 8b       	std	Y+16, r25	; 0x10
    1f60:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	63 e0       	ldi	r22, 0x03	; 3
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>3)&1));
    1f6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f6e:	86 95       	lsr	r24
    1f70:	86 95       	lsr	r24
    1f72:	86 95       	lsr	r24
    1f74:	98 2f       	mov	r25, r24
    1f76:	91 70       	andi	r25, 0x01	; 1
    1f78:	82 e0       	ldi	r24, 0x02	; 2
    1f7a:	67 e0       	ldi	r22, 0x07	; 7
    1f7c:	49 2f       	mov	r20, r25
    1f7e:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
    1f82:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f84:	86 95       	lsr	r24
    1f86:	86 95       	lsr	r24
    1f88:	98 2f       	mov	r25, r24
    1f8a:	91 70       	andi	r25, 0x01	; 1
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
    1f8e:	66 e0       	ldi	r22, 0x06	; 6
    1f90:	49 2f       	mov	r20, r25
    1f92:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
    1f96:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f98:	86 95       	lsr	r24
    1f9a:	98 2f       	mov	r25, r24
    1f9c:	91 70       	andi	r25, 0x01	; 1
    1f9e:	82 e0       	ldi	r24, 0x02	; 2
    1fa0:	65 e0       	ldi	r22, 0x05	; 5
    1fa2:	49 2f       	mov	r20, r25
    1fa4:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));
    1fa8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1faa:	98 2f       	mov	r25, r24
    1fac:	91 70       	andi	r25, 0x01	; 1
    1fae:	82 e0       	ldi	r24, 0x02	; 2
    1fb0:	64 e0       	ldi	r22, 0x04	; 4
    1fb2:	49 2f       	mov	r20, r25
    1fb4:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	63 e0       	ldi	r22, 0x03	; 3
    1fbc:	41 e0       	ldi	r20, 0x01	; 1
    1fbe:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e2       	ldi	r26, 0x20	; 32
    1fc8:	b1 e4       	ldi	r27, 0x41	; 65
    1fca:	8b 87       	std	Y+11, r24	; 0x0b
    1fcc:	9c 87       	std	Y+12, r25	; 0x0c
    1fce:	ad 87       	std	Y+13, r26	; 0x0d
    1fd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a e7       	ldi	r20, 0x7A	; 122
    1fe0:	53 e4       	ldi	r21, 0x43	; 67
    1fe2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8f 83       	std	Y+7, r24	; 0x07
    1fec:	98 87       	std	Y+8, r25	; 0x08
    1fee:	a9 87       	std	Y+9, r26	; 0x09
    1ff0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff4:	78 85       	ldd	r23, Y+8	; 0x08
    1ff6:	89 85       	ldd	r24, Y+9	; 0x09
    1ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <LCD_invidSendCommend+0x380>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <LCD_invidSendCommend+0x3fe>
	else if (__tmp > 65535)
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <LCD_invidSendCommend+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	6b 85       	ldd	r22, Y+11	; 0x0b
    202e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2030:	8d 85       	ldd	r24, Y+13	; 0x0d
    2032:	9e 85       	ldd	r25, Y+14	; 0x0e
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <LCD_invidSendCommend+0x3e0>
    2056:	89 e1       	ldi	r24, 0x19	; 25
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_invidSendCommend+0x3ce>
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <LCD_invidSendCommend+0x3c2>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <LCD_invidSendCommend+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6f 81       	ldd	r22, Y+7	; 0x07
    2080:	78 85       	ldd	r23, Y+8	; 0x08
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_invidSendCommend+0x40a>
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	63 e0       	ldi	r22, 0x03	; 3
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
}
    20b0:	ab 96       	adiw	r28, 0x2b	; 43
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <LCD_Clear>:
void LCD_Clear(){
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62



		LCD_enuSendCommand(0x01);
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	0e 94 92 09 	call	0x1324	; 0x1324 <LCD_enuSendCommand>
		LCD_enuSendCommand(0x80);
    20d0:	80 e8       	ldi	r24, 0x80	; 128
    20d2:	0e 94 92 09 	call	0x1324	; 0x1324 <LCD_enuSendCommand>





}
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <LCD_GoTo>:
ES_t LCD_GoTo(u8 Copy_u8X , u8 Copy_u8Y){
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <LCD_GoTo+0x6>
    20e2:	0f 92       	push	r0
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	8a 83       	std	Y+2, r24	; 0x02
    20ea:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    20ec:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8X== 0)
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	88 23       	and	r24, r24
    20f2:	31 f4       	brne	.+12     	; 0x2100 <LCD_GoTo+0x24>
		{
			Local_enuErrorState = LCD_enuSendCommand((0x80)+Copy_u8Y);
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	80 58       	subi	r24, 0x80	; 128
    20f8:	0e 94 92 09 	call	0x1324	; 0x1324 <LCD_enuSendCommand>
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	0b c0       	rjmp	.+22     	; 0x2116 <LCD_GoTo+0x3a>
		}
		else if(Copy_u8X== 1)
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	31 f4       	brne	.+12     	; 0x2112 <LCD_GoTo+0x36>
		{
			Local_enuErrorState = LCD_enuSendCommand((0xC0)+Copy_u8Y);
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	80 54       	subi	r24, 0x40	; 64
    210a:	0e 94 92 09 	call	0x1324	; 0x1324 <LCD_enuSendCommand>
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <LCD_GoTo+0x3a>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    2112:	83 e0       	ldi	r24, 0x03	; 3
    2114:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorState;
    2116:	89 81       	ldd	r24, Y+1	; 0x01





}
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <LCD_enuSendString>:


ES_t LCD_enuSendString(char* Copy_pcString)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <LCD_enuSendString+0x6>
    212a:	00 d0       	rcall	.+0      	; 0x212c <LCD_enuSendString+0x8>
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	9c 83       	std	Y+4, r25	; 0x04
    2132:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2134:	1a 82       	std	Y+2, r1	; 0x02
if(Copy_pcString != NULL)
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	e9 f0       	breq	.+58     	; 0x2178 <LCD_enuSendString+0x54>
{
	u8 Local_u8Iterator=0;
    213e:	19 82       	std	Y+1, r1	; 0x01
    2140:	0f c0       	rjmp	.+30     	; 0x2160 <LCD_enuSendString+0x3c>
	while(Copy_pcString[Local_u8Iterator]!='\0')
	{
		Local_enuErrorState = LCD_enuDisplayChar(Copy_pcString[Local_u8Iterator]);
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	fc 01       	movw	r30, r24
    214e:	e2 0f       	add	r30, r18
    2150:	f3 1f       	adc	r31, r19
    2152:	80 81       	ld	r24, Z
    2154:	0e 94 7d 09 	call	0x12fa	; 0x12fa <LCD_enuDisplayChar>
    2158:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Iterator ++;
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	8f 5f       	subi	r24, 0xFF	; 255
    215e:	89 83       	std	Y+1, r24	; 0x01
{
	ES_t Local_enuErrorState = ES_NOK;
if(Copy_pcString != NULL)
{
	u8 Local_u8Iterator=0;
	while(Copy_pcString[Local_u8Iterator]!='\0')
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	9c 81       	ldd	r25, Y+4	; 0x04
    216a:	fc 01       	movw	r30, r24
    216c:	e2 0f       	add	r30, r18
    216e:	f3 1f       	adc	r31, r19
    2170:	80 81       	ld	r24, Z
    2172:	88 23       	and	r24, r24
    2174:	31 f7       	brne	.-52     	; 0x2142 <LCD_enuSendString+0x1e>
    2176:	02 c0       	rjmp	.+4      	; 0x217c <LCD_enuSendString+0x58>
	}

}
else
{
	Local_enuErrorState=ES_NULL_POINTER;
    2178:	82 e0       	ldi	r24, 0x02	; 2
    217a:	8a 83       	std	Y+2, r24	; 0x02
}

	return Local_enuErrorState;
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	0f 92       	push	r0
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    2196:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    2198:	ea e3       	ldi	r30, 0x3A	; 58
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	8f ef       	ldi	r24, 0xFF	; 255
    219e:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    21a0:	e7 e3       	ldi	r30, 0x37	; 55
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	8f ef       	ldi	r24, 0xFF	; 255
    21a6:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    21a8:	e4 e3       	ldi	r30, 0x34	; 52
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	86 e9       	ldi	r24, 0x96	; 150
    21ae:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    21b0:	e1 e3       	ldi	r30, 0x31	; 49
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	82 e9       	ldi	r24, 0x92	; 146
    21b6:	80 83       	st	Z, r24

	PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    21b8:	eb e3       	ldi	r30, 0x3B	; 59
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	10 82       	st	Z, r1

	Local_enuErrorstate = ES_OK;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c4:	0f 90       	pop	r0
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <DIO_enuSetPortDirection+0x6>
    21d2:	00 d0       	rcall	.+0      	; 0x21d4 <DIO_enuSetPortDirection+0x8>
    21d4:	0f 92       	push	r0
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	8a 83       	std	Y+2, r24	; 0x02
    21dc:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    21de:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	84 30       	cpi	r24, 0x04	; 4
    21e4:	a8 f5       	brcc	.+106    	; 0x2250 <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	3d 83       	std	Y+5, r19	; 0x05
    21ee:	2c 83       	std	Y+4, r18	; 0x04
    21f0:	8c 81       	ldd	r24, Y+4	; 0x04
    21f2:	9d 81       	ldd	r25, Y+5	; 0x05
    21f4:	81 30       	cpi	r24, 0x01	; 1
    21f6:	91 05       	cpc	r25, r1
    21f8:	d1 f0       	breq	.+52     	; 0x222e <DIO_enuSetPortDirection+0x62>
    21fa:	2c 81       	ldd	r18, Y+4	; 0x04
    21fc:	3d 81       	ldd	r19, Y+5	; 0x05
    21fe:	22 30       	cpi	r18, 0x02	; 2
    2200:	31 05       	cpc	r19, r1
    2202:	2c f4       	brge	.+10     	; 0x220e <DIO_enuSetPortDirection+0x42>
    2204:	8c 81       	ldd	r24, Y+4	; 0x04
    2206:	9d 81       	ldd	r25, Y+5	; 0x05
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	61 f0       	breq	.+24     	; 0x2224 <DIO_enuSetPortDirection+0x58>
    220c:	1e c0       	rjmp	.+60     	; 0x224a <DIO_enuSetPortDirection+0x7e>
    220e:	2c 81       	ldd	r18, Y+4	; 0x04
    2210:	3d 81       	ldd	r19, Y+5	; 0x05
    2212:	22 30       	cpi	r18, 0x02	; 2
    2214:	31 05       	cpc	r19, r1
    2216:	81 f0       	breq	.+32     	; 0x2238 <DIO_enuSetPortDirection+0x6c>
    2218:	8c 81       	ldd	r24, Y+4	; 0x04
    221a:	9d 81       	ldd	r25, Y+5	; 0x05
    221c:	83 30       	cpi	r24, 0x03	; 3
    221e:	91 05       	cpc	r25, r1
    2220:	81 f0       	breq	.+32     	; 0x2242 <DIO_enuSetPortDirection+0x76>
    2222:	13 c0       	rjmp	.+38     	; 0x224a <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    2224:	ea e3       	ldi	r30, 0x3A	; 58
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	80 83       	st	Z, r24
    222c:	0e c0       	rjmp	.+28     	; 0x224a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    222e:	e7 e3       	ldi	r30, 0x37	; 55
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	80 83       	st	Z, r24
    2236:	09 c0       	rjmp	.+18     	; 0x224a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    2238:	e4 e3       	ldi	r30, 0x34	; 52
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	80 83       	st	Z, r24
    2240:	04 c0       	rjmp	.+8      	; 0x224a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    2242:	e1 e3       	ldi	r30, 0x31	; 49
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2250:	83 e0       	ldi	r24, 0x03	; 3
    2252:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2254:	89 81       	ldd	r24, Y+1	; 0x01
}
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	00 d0       	rcall	.+0      	; 0x226c <DIO_enuSetPortValue+0x6>
    226c:	00 d0       	rcall	.+0      	; 0x226e <DIO_enuSetPortValue+0x8>
    226e:	0f 92       	push	r0
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	8a 83       	std	Y+2, r24	; 0x02
    2276:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    2278:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	84 30       	cpi	r24, 0x04	; 4
    227e:	a8 f5       	brcc	.+106    	; 0x22ea <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	3d 83       	std	Y+5, r19	; 0x05
    2288:	2c 83       	std	Y+4, r18	; 0x04
    228a:	8c 81       	ldd	r24, Y+4	; 0x04
    228c:	9d 81       	ldd	r25, Y+5	; 0x05
    228e:	81 30       	cpi	r24, 0x01	; 1
    2290:	91 05       	cpc	r25, r1
    2292:	d1 f0       	breq	.+52     	; 0x22c8 <DIO_enuSetPortValue+0x62>
    2294:	2c 81       	ldd	r18, Y+4	; 0x04
    2296:	3d 81       	ldd	r19, Y+5	; 0x05
    2298:	22 30       	cpi	r18, 0x02	; 2
    229a:	31 05       	cpc	r19, r1
    229c:	2c f4       	brge	.+10     	; 0x22a8 <DIO_enuSetPortValue+0x42>
    229e:	8c 81       	ldd	r24, Y+4	; 0x04
    22a0:	9d 81       	ldd	r25, Y+5	; 0x05
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	61 f0       	breq	.+24     	; 0x22be <DIO_enuSetPortValue+0x58>
    22a6:	1e c0       	rjmp	.+60     	; 0x22e4 <DIO_enuSetPortValue+0x7e>
    22a8:	2c 81       	ldd	r18, Y+4	; 0x04
    22aa:	3d 81       	ldd	r19, Y+5	; 0x05
    22ac:	22 30       	cpi	r18, 0x02	; 2
    22ae:	31 05       	cpc	r19, r1
    22b0:	81 f0       	breq	.+32     	; 0x22d2 <DIO_enuSetPortValue+0x6c>
    22b2:	8c 81       	ldd	r24, Y+4	; 0x04
    22b4:	9d 81       	ldd	r25, Y+5	; 0x05
    22b6:	83 30       	cpi	r24, 0x03	; 3
    22b8:	91 05       	cpc	r25, r1
    22ba:	81 f0       	breq	.+32     	; 0x22dc <DIO_enuSetPortValue+0x76>
    22bc:	13 c0       	rjmp	.+38     	; 0x22e4 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    22be:	eb e3       	ldi	r30, 0x3B	; 59
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	80 83       	st	Z, r24
    22c6:	0e c0       	rjmp	.+28     	; 0x22e4 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    22c8:	e8 e3       	ldi	r30, 0x38	; 56
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	80 83       	st	Z, r24
    22d0:	09 c0       	rjmp	.+18     	; 0x22e4 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    22d2:	e5 e3       	ldi	r30, 0x35	; 53
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	80 83       	st	Z, r24
    22da:	04 c0       	rjmp	.+8      	; 0x22e4 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    22dc:	e2 e3       	ldi	r30, 0x32	; 50
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    22ea:	83 e0       	ldi	r24, 0x03	; 3
    22ec:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	00 d0       	rcall	.+0      	; 0x2306 <DIO_enuTogPortValue+0x6>
    2306:	00 d0       	rcall	.+0      	; 0x2308 <DIO_enuTogPortValue+0x8>
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    230e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	84 30       	cpi	r24, 0x04	; 4
    2314:	08 f0       	brcs	.+2      	; 0x2318 <DIO_enuTogPortValue+0x18>
    2316:	41 c0       	rjmp	.+130    	; 0x239a <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	3c 83       	std	Y+4, r19	; 0x04
    2320:	2b 83       	std	Y+3, r18	; 0x03
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	9c 81       	ldd	r25, Y+4	; 0x04
    2326:	81 30       	cpi	r24, 0x01	; 1
    2328:	91 05       	cpc	r25, r1
    232a:	e9 f0       	breq	.+58     	; 0x2366 <DIO_enuTogPortValue+0x66>
    232c:	2b 81       	ldd	r18, Y+3	; 0x03
    232e:	3c 81       	ldd	r19, Y+4	; 0x04
    2330:	22 30       	cpi	r18, 0x02	; 2
    2332:	31 05       	cpc	r19, r1
    2334:	2c f4       	brge	.+10     	; 0x2340 <DIO_enuTogPortValue+0x40>
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	9c 81       	ldd	r25, Y+4	; 0x04
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	61 f0       	breq	.+24     	; 0x2356 <DIO_enuTogPortValue+0x56>
    233e:	2a c0       	rjmp	.+84     	; 0x2394 <DIO_enuTogPortValue+0x94>
    2340:	2b 81       	ldd	r18, Y+3	; 0x03
    2342:	3c 81       	ldd	r19, Y+4	; 0x04
    2344:	22 30       	cpi	r18, 0x02	; 2
    2346:	31 05       	cpc	r19, r1
    2348:	b1 f0       	breq	.+44     	; 0x2376 <DIO_enuTogPortValue+0x76>
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	83 30       	cpi	r24, 0x03	; 3
    2350:	91 05       	cpc	r25, r1
    2352:	c9 f0       	breq	.+50     	; 0x2386 <DIO_enuTogPortValue+0x86>
    2354:	1f c0       	rjmp	.+62     	; 0x2394 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    2356:	ab e3       	ldi	r26, 0x3B	; 59
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	eb e3       	ldi	r30, 0x3B	; 59
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	80 95       	com	r24
    2362:	8c 93       	st	X, r24
    2364:	17 c0       	rjmp	.+46     	; 0x2394 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    2366:	a8 e3       	ldi	r26, 0x38	; 56
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e8 e3       	ldi	r30, 0x38	; 56
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	80 95       	com	r24
    2372:	8c 93       	st	X, r24
    2374:	0f c0       	rjmp	.+30     	; 0x2394 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    2376:	a5 e3       	ldi	r26, 0x35	; 53
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	e5 e3       	ldi	r30, 0x35	; 53
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	80 95       	com	r24
    2382:	8c 93       	st	X, r24
    2384:	07 c0       	rjmp	.+14     	; 0x2394 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    2386:	a2 e3       	ldi	r26, 0x32	; 50
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e2 e3       	ldi	r30, 0x32	; 50
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	80 95       	com	r24
    2392:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	02 c0       	rjmp	.+4      	; 0x239e <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    239a:	83 e0       	ldi	r24, 0x03	; 3
    239c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    239e:	89 81       	ldd	r24, Y+1	; 0x01
}
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <DIO_enuGetPortValue+0x6>
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <DIO_enuGetPortValue+0x8>
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <DIO_enuGetPortValue+0xa>
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
    23bc:	8a 83       	std	Y+2, r24	; 0x02
    23be:	7c 83       	std	Y+4, r23	; 0x04
    23c0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    23c2:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	9c 81       	ldd	r25, Y+4	; 0x04
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	09 f4       	brne	.+2      	; 0x23ce <DIO_enuGetPortValue+0x20>
    23cc:	43 c0       	rjmp	.+134    	; 0x2454 <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	84 30       	cpi	r24, 0x04	; 4
    23d2:	e8 f5       	brcc	.+122    	; 0x244e <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
    23d4:	8a 81       	ldd	r24, Y+2	; 0x02
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	3e 83       	std	Y+6, r19	; 0x06
    23dc:	2d 83       	std	Y+5, r18	; 0x05
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	81 30       	cpi	r24, 0x01	; 1
    23e4:	91 05       	cpc	r25, r1
    23e6:	e1 f0       	breq	.+56     	; 0x2420 <DIO_enuGetPortValue+0x72>
    23e8:	2d 81       	ldd	r18, Y+5	; 0x05
    23ea:	3e 81       	ldd	r19, Y+6	; 0x06
    23ec:	22 30       	cpi	r18, 0x02	; 2
    23ee:	31 05       	cpc	r19, r1
    23f0:	2c f4       	brge	.+10     	; 0x23fc <DIO_enuGetPortValue+0x4e>
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	61 f0       	breq	.+24     	; 0x2412 <DIO_enuGetPortValue+0x64>
    23fa:	26 c0       	rjmp	.+76     	; 0x2448 <DIO_enuGetPortValue+0x9a>
    23fc:	2d 81       	ldd	r18, Y+5	; 0x05
    23fe:	3e 81       	ldd	r19, Y+6	; 0x06
    2400:	22 30       	cpi	r18, 0x02	; 2
    2402:	31 05       	cpc	r19, r1
    2404:	a1 f0       	breq	.+40     	; 0x242e <DIO_enuGetPortValue+0x80>
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	83 30       	cpi	r24, 0x03	; 3
    240c:	91 05       	cpc	r25, r1
    240e:	b1 f0       	breq	.+44     	; 0x243c <DIO_enuGetPortValue+0x8e>
    2410:	1b c0       	rjmp	.+54     	; 0x2448 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    2412:	e9 e3       	ldi	r30, 0x39	; 57
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	eb 81       	ldd	r30, Y+3	; 0x03
    241a:	fc 81       	ldd	r31, Y+4	; 0x04
    241c:	80 83       	st	Z, r24
    241e:	14 c0       	rjmp	.+40     	; 0x2448 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    2420:	e6 e3       	ldi	r30, 0x36	; 54
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	eb 81       	ldd	r30, Y+3	; 0x03
    2428:	fc 81       	ldd	r31, Y+4	; 0x04
    242a:	80 83       	st	Z, r24
    242c:	0d c0       	rjmp	.+26     	; 0x2448 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    242e:	e3 e3       	ldi	r30, 0x33	; 51
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	eb 81       	ldd	r30, Y+3	; 0x03
    2436:	fc 81       	ldd	r31, Y+4	; 0x04
    2438:	80 83       	st	Z, r24
    243a:	06 c0       	rjmp	.+12     	; 0x2448 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    243c:	e0 e3       	ldi	r30, 0x30	; 48
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	eb 81       	ldd	r30, Y+3	; 0x03
    2444:	fc 81       	ldd	r31, Y+4	; 0x04
    2446:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	89 83       	std	Y+1, r24	; 0x01
    244c:	05 c0       	rjmp	.+10     	; 0x2458 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    244e:	83 e0       	ldi	r24, 0x03	; 3
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    2454:	82 e0       	ldi	r24, 0x02	; 2
    2456:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2458:	89 81       	ldd	r24, Y+1	; 0x01
}
    245a:	26 96       	adiw	r28, 0x06	; 6
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	f8 94       	cli
    2460:	de bf       	out	0x3e, r29	; 62
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	cd bf       	out	0x3d, r28	; 61
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	00 d0       	rcall	.+0      	; 0x2472 <DIO_enuSetPinDirection+0x6>
    2472:	00 d0       	rcall	.+0      	; 0x2474 <DIO_enuSetPinDirection+0x8>
    2474:	00 d0       	rcall	.+0      	; 0x2476 <DIO_enuSetPinDirection+0xa>
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	8a 83       	std	Y+2, r24	; 0x02
    247c:	6b 83       	std	Y+3, r22	; 0x03
    247e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2480:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	84 30       	cpi	r24, 0x04	; 4
    2486:	08 f0       	brcs	.+2      	; 0x248a <DIO_enuSetPinDirection+0x1e>
    2488:	d1 c0       	rjmp	.+418    	; 0x262c <DIO_enuSetPinDirection+0x1c0>
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	88 30       	cpi	r24, 0x08	; 8
    248e:	08 f0       	brcs	.+2      	; 0x2492 <DIO_enuSetPinDirection+0x26>
    2490:	cd c0       	rjmp	.+410    	; 0x262c <DIO_enuSetPinDirection+0x1c0>
    2492:	8c 81       	ldd	r24, Y+4	; 0x04
    2494:	82 30       	cpi	r24, 0x02	; 2
    2496:	08 f0       	brcs	.+2      	; 0x249a <DIO_enuSetPinDirection+0x2e>
    2498:	c9 c0       	rjmp	.+402    	; 0x262c <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    249a:	8a 81       	ldd	r24, Y+2	; 0x02
    249c:	28 2f       	mov	r18, r24
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	3e 83       	std	Y+6, r19	; 0x06
    24a2:	2d 83       	std	Y+5, r18	; 0x05
    24a4:	6d 81       	ldd	r22, Y+5	; 0x05
    24a6:	7e 81       	ldd	r23, Y+6	; 0x06
    24a8:	61 30       	cpi	r22, 0x01	; 1
    24aa:	71 05       	cpc	r23, r1
    24ac:	09 f4       	brne	.+2      	; 0x24b0 <DIO_enuSetPinDirection+0x44>
    24ae:	41 c0       	rjmp	.+130    	; 0x2532 <DIO_enuSetPinDirection+0xc6>
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	82 30       	cpi	r24, 0x02	; 2
    24b6:	91 05       	cpc	r25, r1
    24b8:	34 f4       	brge	.+12     	; 0x24c6 <DIO_enuSetPinDirection+0x5a>
    24ba:	2d 81       	ldd	r18, Y+5	; 0x05
    24bc:	3e 81       	ldd	r19, Y+6	; 0x06
    24be:	21 15       	cp	r18, r1
    24c0:	31 05       	cpc	r19, r1
    24c2:	71 f0       	breq	.+28     	; 0x24e0 <DIO_enuSetPinDirection+0x74>
    24c4:	b0 c0       	rjmp	.+352    	; 0x2626 <DIO_enuSetPinDirection+0x1ba>
    24c6:	6d 81       	ldd	r22, Y+5	; 0x05
    24c8:	7e 81       	ldd	r23, Y+6	; 0x06
    24ca:	62 30       	cpi	r22, 0x02	; 2
    24cc:	71 05       	cpc	r23, r1
    24ce:	09 f4       	brne	.+2      	; 0x24d2 <DIO_enuSetPinDirection+0x66>
    24d0:	59 c0       	rjmp	.+178    	; 0x2584 <DIO_enuSetPinDirection+0x118>
    24d2:	8d 81       	ldd	r24, Y+5	; 0x05
    24d4:	9e 81       	ldd	r25, Y+6	; 0x06
    24d6:	83 30       	cpi	r24, 0x03	; 3
    24d8:	91 05       	cpc	r25, r1
    24da:	09 f4       	brne	.+2      	; 0x24de <DIO_enuSetPinDirection+0x72>
    24dc:	7c c0       	rjmp	.+248    	; 0x25d6 <DIO_enuSetPinDirection+0x16a>
    24de:	a3 c0       	rjmp	.+326    	; 0x2626 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    24e0:	aa e3       	ldi	r26, 0x3A	; 58
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	ea e3       	ldi	r30, 0x3A	; 58
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	80 81       	ld	r24, Z
    24ea:	48 2f       	mov	r20, r24
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	02 c0       	rjmp	.+4      	; 0x24fc <DIO_enuSetPinDirection+0x90>
    24f8:	88 0f       	add	r24, r24
    24fa:	99 1f       	adc	r25, r25
    24fc:	2a 95       	dec	r18
    24fe:	e2 f7       	brpl	.-8      	; 0x24f8 <DIO_enuSetPinDirection+0x8c>
    2500:	80 95       	com	r24
    2502:	84 23       	and	r24, r20
    2504:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    2506:	aa e3       	ldi	r26, 0x3A	; 58
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	ea e3       	ldi	r30, 0x3A	; 58
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	48 2f       	mov	r20, r24
    2512:	8c 81       	ldd	r24, Y+4	; 0x04
    2514:	28 2f       	mov	r18, r24
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	88 2f       	mov	r24, r24
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	b9 01       	movw	r22, r18
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <DIO_enuSetPinDirection+0xba>
    2522:	66 0f       	add	r22, r22
    2524:	77 1f       	adc	r23, r23
    2526:	8a 95       	dec	r24
    2528:	e2 f7       	brpl	.-8      	; 0x2522 <DIO_enuSetPinDirection+0xb6>
    252a:	cb 01       	movw	r24, r22
    252c:	84 2b       	or	r24, r20
    252e:	8c 93       	st	X, r24
    2530:	7a c0       	rjmp	.+244    	; 0x2626 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2532:	a7 e3       	ldi	r26, 0x37	; 55
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e7 e3       	ldi	r30, 0x37	; 55
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	48 2f       	mov	r20, r24
    253e:	8b 81       	ldd	r24, Y+3	; 0x03
    2540:	28 2f       	mov	r18, r24
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	02 c0       	rjmp	.+4      	; 0x254e <DIO_enuSetPinDirection+0xe2>
    254a:	88 0f       	add	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	2a 95       	dec	r18
    2550:	e2 f7       	brpl	.-8      	; 0x254a <DIO_enuSetPinDirection+0xde>
    2552:	80 95       	com	r24
    2554:	84 23       	and	r24, r20
    2556:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    2558:	a7 e3       	ldi	r26, 0x37	; 55
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e7 e3       	ldi	r30, 0x37	; 55
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	48 2f       	mov	r20, r24
    2564:	8c 81       	ldd	r24, Y+4	; 0x04
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	8b 81       	ldd	r24, Y+3	; 0x03
    256c:	88 2f       	mov	r24, r24
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	b9 01       	movw	r22, r18
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <DIO_enuSetPinDirection+0x10c>
    2574:	66 0f       	add	r22, r22
    2576:	77 1f       	adc	r23, r23
    2578:	8a 95       	dec	r24
    257a:	e2 f7       	brpl	.-8      	; 0x2574 <DIO_enuSetPinDirection+0x108>
    257c:	cb 01       	movw	r24, r22
    257e:	84 2b       	or	r24, r20
    2580:	8c 93       	st	X, r24
    2582:	51 c0       	rjmp	.+162    	; 0x2626 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2584:	a4 e3       	ldi	r26, 0x34	; 52
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e4 e3       	ldi	r30, 0x34	; 52
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	48 2f       	mov	r20, r24
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <DIO_enuSetPinDirection+0x134>
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	2a 95       	dec	r18
    25a2:	e2 f7       	brpl	.-8      	; 0x259c <DIO_enuSetPinDirection+0x130>
    25a4:	80 95       	com	r24
    25a6:	84 23       	and	r24, r20
    25a8:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    25aa:	a4 e3       	ldi	r26, 0x34	; 52
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e4 e3       	ldi	r30, 0x34	; 52
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	48 2f       	mov	r20, r24
    25b6:	8c 81       	ldd	r24, Y+4	; 0x04
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
    25be:	88 2f       	mov	r24, r24
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	b9 01       	movw	r22, r18
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <DIO_enuSetPinDirection+0x15e>
    25c6:	66 0f       	add	r22, r22
    25c8:	77 1f       	adc	r23, r23
    25ca:	8a 95       	dec	r24
    25cc:	e2 f7       	brpl	.-8      	; 0x25c6 <DIO_enuSetPinDirection+0x15a>
    25ce:	cb 01       	movw	r24, r22
    25d0:	84 2b       	or	r24, r20
    25d2:	8c 93       	st	X, r24
    25d4:	28 c0       	rjmp	.+80     	; 0x2626 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    25d6:	a1 e3       	ldi	r26, 0x31	; 49
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e1 e3       	ldi	r30, 0x31	; 49
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	48 2f       	mov	r20, r24
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	02 c0       	rjmp	.+4      	; 0x25f2 <DIO_enuSetPinDirection+0x186>
    25ee:	88 0f       	add	r24, r24
    25f0:	99 1f       	adc	r25, r25
    25f2:	2a 95       	dec	r18
    25f4:	e2 f7       	brpl	.-8      	; 0x25ee <DIO_enuSetPinDirection+0x182>
    25f6:	80 95       	com	r24
    25f8:	84 23       	and	r24, r20
    25fa:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    25fc:	a1 e3       	ldi	r26, 0x31	; 49
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e1 e3       	ldi	r30, 0x31	; 49
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	48 2f       	mov	r20, r24
    2608:	8c 81       	ldd	r24, Y+4	; 0x04
    260a:	28 2f       	mov	r18, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	88 2f       	mov	r24, r24
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	b9 01       	movw	r22, r18
    2616:	02 c0       	rjmp	.+4      	; 0x261c <DIO_enuSetPinDirection+0x1b0>
    2618:	66 0f       	add	r22, r22
    261a:	77 1f       	adc	r23, r23
    261c:	8a 95       	dec	r24
    261e:	e2 f7       	brpl	.-8      	; 0x2618 <DIO_enuSetPinDirection+0x1ac>
    2620:	cb 01       	movw	r24, r22
    2622:	84 2b       	or	r24, r20
    2624:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	89 83       	std	Y+1, r24	; 0x01
    262a:	02 c0       	rjmp	.+4      	; 0x2630 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    262c:	83 e0       	ldi	r24, 0x03	; 3
    262e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2630:	89 81       	ldd	r24, Y+1	; 0x01
}
    2632:	26 96       	adiw	r28, 0x06	; 6
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	de bf       	out	0x3e, r29	; 62
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	cd bf       	out	0x3d, r28	; 61
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	00 d0       	rcall	.+0      	; 0x264a <DIO_enuSetPinValue+0x6>
    264a:	00 d0       	rcall	.+0      	; 0x264c <DIO_enuSetPinValue+0x8>
    264c:	00 d0       	rcall	.+0      	; 0x264e <DIO_enuSetPinValue+0xa>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	8a 83       	std	Y+2, r24	; 0x02
    2654:	6b 83       	std	Y+3, r22	; 0x03
    2656:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2658:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    265a:	8a 81       	ldd	r24, Y+2	; 0x02
    265c:	84 30       	cpi	r24, 0x04	; 4
    265e:	08 f0       	brcs	.+2      	; 0x2662 <DIO_enuSetPinValue+0x1e>
    2660:	d1 c0       	rjmp	.+418    	; 0x2804 <DIO_enuSetPinValue+0x1c0>
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	88 30       	cpi	r24, 0x08	; 8
    2666:	08 f0       	brcs	.+2      	; 0x266a <DIO_enuSetPinValue+0x26>
    2668:	cd c0       	rjmp	.+410    	; 0x2804 <DIO_enuSetPinValue+0x1c0>
    266a:	8c 81       	ldd	r24, Y+4	; 0x04
    266c:	82 30       	cpi	r24, 0x02	; 2
    266e:	08 f0       	brcs	.+2      	; 0x2672 <DIO_enuSetPinValue+0x2e>
    2670:	c9 c0       	rjmp	.+402    	; 0x2804 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	3e 83       	std	Y+6, r19	; 0x06
    267a:	2d 83       	std	Y+5, r18	; 0x05
    267c:	6d 81       	ldd	r22, Y+5	; 0x05
    267e:	7e 81       	ldd	r23, Y+6	; 0x06
    2680:	61 30       	cpi	r22, 0x01	; 1
    2682:	71 05       	cpc	r23, r1
    2684:	09 f4       	brne	.+2      	; 0x2688 <DIO_enuSetPinValue+0x44>
    2686:	41 c0       	rjmp	.+130    	; 0x270a <DIO_enuSetPinValue+0xc6>
    2688:	8d 81       	ldd	r24, Y+5	; 0x05
    268a:	9e 81       	ldd	r25, Y+6	; 0x06
    268c:	82 30       	cpi	r24, 0x02	; 2
    268e:	91 05       	cpc	r25, r1
    2690:	34 f4       	brge	.+12     	; 0x269e <DIO_enuSetPinValue+0x5a>
    2692:	2d 81       	ldd	r18, Y+5	; 0x05
    2694:	3e 81       	ldd	r19, Y+6	; 0x06
    2696:	21 15       	cp	r18, r1
    2698:	31 05       	cpc	r19, r1
    269a:	71 f0       	breq	.+28     	; 0x26b8 <DIO_enuSetPinValue+0x74>
    269c:	b0 c0       	rjmp	.+352    	; 0x27fe <DIO_enuSetPinValue+0x1ba>
    269e:	6d 81       	ldd	r22, Y+5	; 0x05
    26a0:	7e 81       	ldd	r23, Y+6	; 0x06
    26a2:	62 30       	cpi	r22, 0x02	; 2
    26a4:	71 05       	cpc	r23, r1
    26a6:	09 f4       	brne	.+2      	; 0x26aa <DIO_enuSetPinValue+0x66>
    26a8:	59 c0       	rjmp	.+178    	; 0x275c <DIO_enuSetPinValue+0x118>
    26aa:	8d 81       	ldd	r24, Y+5	; 0x05
    26ac:	9e 81       	ldd	r25, Y+6	; 0x06
    26ae:	83 30       	cpi	r24, 0x03	; 3
    26b0:	91 05       	cpc	r25, r1
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <DIO_enuSetPinValue+0x72>
    26b4:	7c c0       	rjmp	.+248    	; 0x27ae <DIO_enuSetPinValue+0x16a>
    26b6:	a3 c0       	rjmp	.+326    	; 0x27fe <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    26b8:	ab e3       	ldi	r26, 0x3B	; 59
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	eb e3       	ldi	r30, 0x3B	; 59
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	48 2f       	mov	r20, r24
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <DIO_enuSetPinValue+0x90>
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	2a 95       	dec	r18
    26d6:	e2 f7       	brpl	.-8      	; 0x26d0 <DIO_enuSetPinValue+0x8c>
    26d8:	80 95       	com	r24
    26da:	84 23       	and	r24, r20
    26dc:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    26de:	ab e3       	ldi	r26, 0x3B	; 59
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	eb e3       	ldi	r30, 0x3B	; 59
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	48 2f       	mov	r20, r24
    26ea:	8c 81       	ldd	r24, Y+4	; 0x04
    26ec:	28 2f       	mov	r18, r24
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	8b 81       	ldd	r24, Y+3	; 0x03
    26f2:	88 2f       	mov	r24, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	b9 01       	movw	r22, r18
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <DIO_enuSetPinValue+0xba>
    26fa:	66 0f       	add	r22, r22
    26fc:	77 1f       	adc	r23, r23
    26fe:	8a 95       	dec	r24
    2700:	e2 f7       	brpl	.-8      	; 0x26fa <DIO_enuSetPinValue+0xb6>
    2702:	cb 01       	movw	r24, r22
    2704:	84 2b       	or	r24, r20
    2706:	8c 93       	st	X, r24
    2708:	7a c0       	rjmp	.+244    	; 0x27fe <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    270a:	a8 e3       	ldi	r26, 0x38	; 56
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e8 e3       	ldi	r30, 0x38	; 56
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	48 2f       	mov	r20, r24
    2716:	8b 81       	ldd	r24, Y+3	; 0x03
    2718:	28 2f       	mov	r18, r24
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	02 c0       	rjmp	.+4      	; 0x2726 <DIO_enuSetPinValue+0xe2>
    2722:	88 0f       	add	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	2a 95       	dec	r18
    2728:	e2 f7       	brpl	.-8      	; 0x2722 <DIO_enuSetPinValue+0xde>
    272a:	80 95       	com	r24
    272c:	84 23       	and	r24, r20
    272e:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    2730:	a8 e3       	ldi	r26, 0x38	; 56
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e8 e3       	ldi	r30, 0x38	; 56
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	48 2f       	mov	r20, r24
    273c:	8c 81       	ldd	r24, Y+4	; 0x04
    273e:	28 2f       	mov	r18, r24
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	88 2f       	mov	r24, r24
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	b9 01       	movw	r22, r18
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <DIO_enuSetPinValue+0x10c>
    274c:	66 0f       	add	r22, r22
    274e:	77 1f       	adc	r23, r23
    2750:	8a 95       	dec	r24
    2752:	e2 f7       	brpl	.-8      	; 0x274c <DIO_enuSetPinValue+0x108>
    2754:	cb 01       	movw	r24, r22
    2756:	84 2b       	or	r24, r20
    2758:	8c 93       	st	X, r24
    275a:	51 c0       	rjmp	.+162    	; 0x27fe <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    275c:	a5 e3       	ldi	r26, 0x35	; 53
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e5 e3       	ldi	r30, 0x35	; 53
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	48 2f       	mov	r20, r24
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	28 2f       	mov	r18, r24
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	02 c0       	rjmp	.+4      	; 0x2778 <DIO_enuSetPinValue+0x134>
    2774:	88 0f       	add	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	2a 95       	dec	r18
    277a:	e2 f7       	brpl	.-8      	; 0x2774 <DIO_enuSetPinValue+0x130>
    277c:	80 95       	com	r24
    277e:	84 23       	and	r24, r20
    2780:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    2782:	a5 e3       	ldi	r26, 0x35	; 53
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e5 e3       	ldi	r30, 0x35	; 53
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	48 2f       	mov	r20, r24
    278e:	8c 81       	ldd	r24, Y+4	; 0x04
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	88 2f       	mov	r24, r24
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	b9 01       	movw	r22, r18
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <DIO_enuSetPinValue+0x15e>
    279e:	66 0f       	add	r22, r22
    27a0:	77 1f       	adc	r23, r23
    27a2:	8a 95       	dec	r24
    27a4:	e2 f7       	brpl	.-8      	; 0x279e <DIO_enuSetPinValue+0x15a>
    27a6:	cb 01       	movw	r24, r22
    27a8:	84 2b       	or	r24, r20
    27aa:	8c 93       	st	X, r24
    27ac:	28 c0       	rjmp	.+80     	; 0x27fe <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    27ae:	a2 e3       	ldi	r26, 0x32	; 50
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e2 e3       	ldi	r30, 0x32	; 50
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	48 2f       	mov	r20, r24
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	28 2f       	mov	r18, r24
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	02 c0       	rjmp	.+4      	; 0x27ca <DIO_enuSetPinValue+0x186>
    27c6:	88 0f       	add	r24, r24
    27c8:	99 1f       	adc	r25, r25
    27ca:	2a 95       	dec	r18
    27cc:	e2 f7       	brpl	.-8      	; 0x27c6 <DIO_enuSetPinValue+0x182>
    27ce:	80 95       	com	r24
    27d0:	84 23       	and	r24, r20
    27d2:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    27d4:	a2 e3       	ldi	r26, 0x32	; 50
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e2 e3       	ldi	r30, 0x32	; 50
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	48 2f       	mov	r20, r24
    27e0:	8c 81       	ldd	r24, Y+4	; 0x04
    27e2:	28 2f       	mov	r18, r24
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	8b 81       	ldd	r24, Y+3	; 0x03
    27e8:	88 2f       	mov	r24, r24
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	b9 01       	movw	r22, r18
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <DIO_enuSetPinValue+0x1b0>
    27f0:	66 0f       	add	r22, r22
    27f2:	77 1f       	adc	r23, r23
    27f4:	8a 95       	dec	r24
    27f6:	e2 f7       	brpl	.-8      	; 0x27f0 <DIO_enuSetPinValue+0x1ac>
    27f8:	cb 01       	movw	r24, r22
    27fa:	84 2b       	or	r24, r20
    27fc:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2804:	83 e0       	ldi	r24, 0x03	; 3
    2806:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2808:	89 81       	ldd	r24, Y+1	; 0x01
}
    280a:	26 96       	adiw	r28, 0x06	; 6
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	00 d0       	rcall	.+0      	; 0x2822 <DIO_enuTogPin+0x6>
    2822:	00 d0       	rcall	.+0      	; 0x2824 <DIO_enuTogPin+0x8>
    2824:	0f 92       	push	r0
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	8a 83       	std	Y+2, r24	; 0x02
    282c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    282e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	84 30       	cpi	r24, 0x04	; 4
    2834:	08 f0       	brcs	.+2      	; 0x2838 <DIO_enuTogPin+0x1c>
    2836:	75 c0       	rjmp	.+234    	; 0x2922 <DIO_enuTogPin+0x106>
    2838:	8b 81       	ldd	r24, Y+3	; 0x03
    283a:	88 30       	cpi	r24, 0x08	; 8
    283c:	08 f0       	brcs	.+2      	; 0x2840 <DIO_enuTogPin+0x24>
    283e:	71 c0       	rjmp	.+226    	; 0x2922 <DIO_enuTogPin+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    2840:	8a 81       	ldd	r24, Y+2	; 0x02
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	3d 83       	std	Y+5, r19	; 0x05
    2848:	2c 83       	std	Y+4, r18	; 0x04
    284a:	8c 81       	ldd	r24, Y+4	; 0x04
    284c:	9d 81       	ldd	r25, Y+5	; 0x05
    284e:	81 30       	cpi	r24, 0x01	; 1
    2850:	91 05       	cpc	r25, r1
    2852:	49 f1       	breq	.+82     	; 0x28a6 <DIO_enuTogPin+0x8a>
    2854:	2c 81       	ldd	r18, Y+4	; 0x04
    2856:	3d 81       	ldd	r19, Y+5	; 0x05
    2858:	22 30       	cpi	r18, 0x02	; 2
    285a:	31 05       	cpc	r19, r1
    285c:	2c f4       	brge	.+10     	; 0x2868 <DIO_enuTogPin+0x4c>
    285e:	8c 81       	ldd	r24, Y+4	; 0x04
    2860:	9d 81       	ldd	r25, Y+5	; 0x05
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	61 f0       	breq	.+24     	; 0x287e <DIO_enuTogPin+0x62>
    2866:	5a c0       	rjmp	.+180    	; 0x291c <DIO_enuTogPin+0x100>
    2868:	2c 81       	ldd	r18, Y+4	; 0x04
    286a:	3d 81       	ldd	r19, Y+5	; 0x05
    286c:	22 30       	cpi	r18, 0x02	; 2
    286e:	31 05       	cpc	r19, r1
    2870:	71 f1       	breq	.+92     	; 0x28ce <DIO_enuTogPin+0xb2>
    2872:	8c 81       	ldd	r24, Y+4	; 0x04
    2874:	9d 81       	ldd	r25, Y+5	; 0x05
    2876:	83 30       	cpi	r24, 0x03	; 3
    2878:	91 05       	cpc	r25, r1
    287a:	e9 f1       	breq	.+122    	; 0x28f6 <DIO_enuTogPin+0xda>
    287c:	4f c0       	rjmp	.+158    	; 0x291c <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    287e:	ab e3       	ldi	r26, 0x3B	; 59
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	eb e3       	ldi	r30, 0x3B	; 59
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	48 2f       	mov	r20, r24
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	02 2e       	mov	r0, r18
    2896:	02 c0       	rjmp	.+4      	; 0x289c <DIO_enuTogPin+0x80>
    2898:	88 0f       	add	r24, r24
    289a:	99 1f       	adc	r25, r25
    289c:	0a 94       	dec	r0
    289e:	e2 f7       	brpl	.-8      	; 0x2898 <DIO_enuTogPin+0x7c>
    28a0:	84 27       	eor	r24, r20
    28a2:	8c 93       	st	X, r24
    28a4:	3b c0       	rjmp	.+118    	; 0x291c <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    28a6:	a8 e3       	ldi	r26, 0x38	; 56
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e8 e3       	ldi	r30, 0x38	; 56
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	48 2f       	mov	r20, r24
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	02 2e       	mov	r0, r18
    28be:	02 c0       	rjmp	.+4      	; 0x28c4 <DIO_enuTogPin+0xa8>
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	0a 94       	dec	r0
    28c6:	e2 f7       	brpl	.-8      	; 0x28c0 <DIO_enuTogPin+0xa4>
    28c8:	84 27       	eor	r24, r20
    28ca:	8c 93       	st	X, r24
    28cc:	27 c0       	rjmp	.+78     	; 0x291c <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    28ce:	a5 e3       	ldi	r26, 0x35	; 53
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	e5 e3       	ldi	r30, 0x35	; 53
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	48 2f       	mov	r20, r24
    28da:	8b 81       	ldd	r24, Y+3	; 0x03
    28dc:	28 2f       	mov	r18, r24
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	02 2e       	mov	r0, r18
    28e6:	02 c0       	rjmp	.+4      	; 0x28ec <DIO_enuTogPin+0xd0>
    28e8:	88 0f       	add	r24, r24
    28ea:	99 1f       	adc	r25, r25
    28ec:	0a 94       	dec	r0
    28ee:	e2 f7       	brpl	.-8      	; 0x28e8 <DIO_enuTogPin+0xcc>
    28f0:	84 27       	eor	r24, r20
    28f2:	8c 93       	st	X, r24
    28f4:	13 c0       	rjmp	.+38     	; 0x291c <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    28f6:	a2 e3       	ldi	r26, 0x32	; 50
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	e2 e3       	ldi	r30, 0x32	; 50
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	48 2f       	mov	r20, r24
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	28 2f       	mov	r18, r24
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	02 2e       	mov	r0, r18
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <DIO_enuTogPin+0xf8>
    2910:	88 0f       	add	r24, r24
    2912:	99 1f       	adc	r25, r25
    2914:	0a 94       	dec	r0
    2916:	e2 f7       	brpl	.-8      	; 0x2910 <DIO_enuTogPin+0xf4>
    2918:	84 27       	eor	r24, r20
    291a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	89 83       	std	Y+1, r24	; 0x01
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2922:	83 e0       	ldi	r24, 0x03	; 3
    2924:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2926:	89 81       	ldd	r24, Y+1	; 0x01
}
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	08 95       	ret

00002938 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	27 97       	sbiw	r28, 0x07	; 7
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	de bf       	out	0x3e, r29	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	8a 83       	std	Y+2, r24	; 0x02
    294e:	6b 83       	std	Y+3, r22	; 0x03
    2950:	5d 83       	std	Y+5, r21	; 0x05
    2952:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2954:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    2956:	8c 81       	ldd	r24, Y+4	; 0x04
    2958:	9d 81       	ldd	r25, Y+5	; 0x05
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	09 f4       	brne	.+2      	; 0x2960 <DIO_enuGetPinValue+0x28>
    295e:	7e c0       	rjmp	.+252    	; 0x2a5c <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    2960:	8a 81       	ldd	r24, Y+2	; 0x02
    2962:	84 30       	cpi	r24, 0x04	; 4
    2964:	08 f0       	brcs	.+2      	; 0x2968 <DIO_enuGetPinValue+0x30>
    2966:	77 c0       	rjmp	.+238    	; 0x2a56 <DIO_enuGetPinValue+0x11e>
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	88 30       	cpi	r24, 0x08	; 8
    296c:	08 f0       	brcs	.+2      	; 0x2970 <DIO_enuGetPinValue+0x38>
    296e:	73 c0       	rjmp	.+230    	; 0x2a56 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	28 2f       	mov	r18, r24
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	3f 83       	std	Y+7, r19	; 0x07
    2978:	2e 83       	std	Y+6, r18	; 0x06
    297a:	4e 81       	ldd	r20, Y+6	; 0x06
    297c:	5f 81       	ldd	r21, Y+7	; 0x07
    297e:	41 30       	cpi	r20, 0x01	; 1
    2980:	51 05       	cpc	r21, r1
    2982:	59 f1       	breq	.+86     	; 0x29da <DIO_enuGetPinValue+0xa2>
    2984:	8e 81       	ldd	r24, Y+6	; 0x06
    2986:	9f 81       	ldd	r25, Y+7	; 0x07
    2988:	82 30       	cpi	r24, 0x02	; 2
    298a:	91 05       	cpc	r25, r1
    298c:	34 f4       	brge	.+12     	; 0x299a <DIO_enuGetPinValue+0x62>
    298e:	2e 81       	ldd	r18, Y+6	; 0x06
    2990:	3f 81       	ldd	r19, Y+7	; 0x07
    2992:	21 15       	cp	r18, r1
    2994:	31 05       	cpc	r19, r1
    2996:	69 f0       	breq	.+26     	; 0x29b2 <DIO_enuGetPinValue+0x7a>
    2998:	5b c0       	rjmp	.+182    	; 0x2a50 <DIO_enuGetPinValue+0x118>
    299a:	4e 81       	ldd	r20, Y+6	; 0x06
    299c:	5f 81       	ldd	r21, Y+7	; 0x07
    299e:	42 30       	cpi	r20, 0x02	; 2
    29a0:	51 05       	cpc	r21, r1
    29a2:	79 f1       	breq	.+94     	; 0x2a02 <DIO_enuGetPinValue+0xca>
    29a4:	8e 81       	ldd	r24, Y+6	; 0x06
    29a6:	9f 81       	ldd	r25, Y+7	; 0x07
    29a8:	83 30       	cpi	r24, 0x03	; 3
    29aa:	91 05       	cpc	r25, r1
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <DIO_enuGetPinValue+0x78>
    29ae:	3d c0       	rjmp	.+122    	; 0x2a2a <DIO_enuGetPinValue+0xf2>
    29b0:	4f c0       	rjmp	.+158    	; 0x2a50 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    29b2:	e9 e3       	ldi	r30, 0x39	; 57
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	88 2f       	mov	r24, r24
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	a9 01       	movw	r20, r18
    29c4:	02 c0       	rjmp	.+4      	; 0x29ca <DIO_enuGetPinValue+0x92>
    29c6:	55 95       	asr	r21
    29c8:	47 95       	ror	r20
    29ca:	8a 95       	dec	r24
    29cc:	e2 f7       	brpl	.-8      	; 0x29c6 <DIO_enuGetPinValue+0x8e>
    29ce:	ca 01       	movw	r24, r20
    29d0:	81 70       	andi	r24, 0x01	; 1
    29d2:	ec 81       	ldd	r30, Y+4	; 0x04
    29d4:	fd 81       	ldd	r31, Y+5	; 0x05
    29d6:	80 83       	st	Z, r24
    29d8:	3b c0       	rjmp	.+118    	; 0x2a50 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    29da:	e6 e3       	ldi	r30, 0x36	; 54
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	88 2f       	mov	r24, r24
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	a9 01       	movw	r20, r18
    29ec:	02 c0       	rjmp	.+4      	; 0x29f2 <DIO_enuGetPinValue+0xba>
    29ee:	55 95       	asr	r21
    29f0:	47 95       	ror	r20
    29f2:	8a 95       	dec	r24
    29f4:	e2 f7       	brpl	.-8      	; 0x29ee <DIO_enuGetPinValue+0xb6>
    29f6:	ca 01       	movw	r24, r20
    29f8:	81 70       	andi	r24, 0x01	; 1
    29fa:	ec 81       	ldd	r30, Y+4	; 0x04
    29fc:	fd 81       	ldd	r31, Y+5	; 0x05
    29fe:	80 83       	st	Z, r24
    2a00:	27 c0       	rjmp	.+78     	; 0x2a50 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    2a02:	e3 e3       	ldi	r30, 0x33	; 51
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	28 2f       	mov	r18, r24
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	88 2f       	mov	r24, r24
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	a9 01       	movw	r20, r18
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <DIO_enuGetPinValue+0xe2>
    2a16:	55 95       	asr	r21
    2a18:	47 95       	ror	r20
    2a1a:	8a 95       	dec	r24
    2a1c:	e2 f7       	brpl	.-8      	; 0x2a16 <DIO_enuGetPinValue+0xde>
    2a1e:	ca 01       	movw	r24, r20
    2a20:	81 70       	andi	r24, 0x01	; 1
    2a22:	ec 81       	ldd	r30, Y+4	; 0x04
    2a24:	fd 81       	ldd	r31, Y+5	; 0x05
    2a26:	80 83       	st	Z, r24
    2a28:	13 c0       	rjmp	.+38     	; 0x2a50 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    2a2a:	e0 e3       	ldi	r30, 0x30	; 48
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	88 2f       	mov	r24, r24
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	a9 01       	movw	r20, r18
    2a3c:	02 c0       	rjmp	.+4      	; 0x2a42 <DIO_enuGetPinValue+0x10a>
    2a3e:	55 95       	asr	r21
    2a40:	47 95       	ror	r20
    2a42:	8a 95       	dec	r24
    2a44:	e2 f7       	brpl	.-8      	; 0x2a3e <DIO_enuGetPinValue+0x106>
    2a46:	ca 01       	movw	r24, r20
    2a48:	81 70       	andi	r24, 0x01	; 1
    2a4a:	ec 81       	ldd	r30, Y+4	; 0x04
    2a4c:	fd 81       	ldd	r31, Y+5	; 0x05
    2a4e:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	05 c0       	rjmp	.+10     	; 0x2a60 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    2a56:	83 e0       	ldi	r24, 0x03	; 3
    2a58:	89 83       	std	Y+1, r24	; 0x01
    2a5a:	02 c0       	rjmp	.+4      	; 0x2a60 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    2a5c:	82 e0       	ldi	r24, 0x02	; 2
    2a5e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a62:	27 96       	adiw	r28, 0x07	; 7
    2a64:	0f b6       	in	r0, 0x3f	; 63
    2a66:	f8 94       	cli
    2a68:	de bf       	out	0x3e, r29	; 62
    2a6a:	0f be       	out	0x3f, r0	; 63
    2a6c:	cd bf       	out	0x3d, r28	; 61
    2a6e:	cf 91       	pop	r28
    2a70:	df 91       	pop	r29
    2a72:	08 95       	ret

00002a74 <main>:

#include "DIO/DIO_int.h"
#include "_ADC_/ADC_int.h"
#include "LCD/LCD_int.h"
#include <util/delay.h>
int main(){
    2a74:	df 93       	push	r29
    2a76:	cf 93       	push	r28
    2a78:	00 d0       	rcall	.+0      	; 0x2a7a <main+0x6>
    2a7a:	00 d0       	rcall	.+0      	; 0x2a7c <main+0x8>
    2a7c:	00 d0       	rcall	.+0      	; 0x2a7e <main+0xa>
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
DIO_enuInit();
    2a82:	0e 94 c6 10 	call	0x218c	; 0x218c <DIO_enuInit>
ADC_enu_Int();
    2a86:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_enu_Int>
LCD_enuInit();
    2a8a:	0e 94 71 07 	call	0xee2	; 0xee2 <LCD_enuInit>

u16 adcread;
DIO_enuSetPinDirection(DIO_u8PORTD,DIO_u8PIN0,DIO_u8OUTPUT);
    2a8e:	83 e0       	ldi	r24, 0x03	; 3
    2a90:	60 e0       	ldi	r22, 0x00	; 0
    2a92:	41 e0       	ldi	r20, 0x01	; 1
    2a94:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_enuSetPinDirection>


		while(1){
			adcread=ADC_u16_Read();
    2a98:	0e 94 3f 07 	call	0xe7e	; 0xe7e <ADC_u16_Read>
    2a9c:	9e 83       	std	Y+6, r25	; 0x06
    2a9e:	8d 83       	std	Y+5, r24	; 0x05

							f32 output=(adcread*5000UL)/1024.0;
    2aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa4:	cc 01       	movw	r24, r24
    2aa6:	a0 e0       	ldi	r26, 0x00	; 0
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	28 e8       	ldi	r18, 0x88	; 136
    2aac:	33 e1       	ldi	r19, 0x13	; 19
    2aae:	40 e0       	ldi	r20, 0x00	; 0
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__mulsi3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	bc 01       	movw	r22, r24
    2ac0:	cd 01       	movw	r24, r26
    2ac2:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	bc 01       	movw	r22, r24
    2acc:	cd 01       	movw	r24, r26
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e8       	ldi	r20, 0x80	; 128
    2ad4:	54 e4       	ldi	r21, 0x44	; 68
    2ad6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	89 83       	std	Y+1, r24	; 0x01
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
    2ae2:	ab 83       	std	Y+3, r26	; 0x03
    2ae4:	bc 83       	std	Y+4, r27	; 0x04
							LCD_enuDisplayIntegerNum((s32)adcread);
    2ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aea:	cc 01       	movw	r24, r24
    2aec:	a0 e0       	ldi	r26, 0x00	; 0
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 a7 09 	call	0x134e	; 0x134e <LCD_enuDisplayIntegerNum>

					if(output>4996){
    2af8:	69 81       	ldd	r22, Y+1	; 0x01
    2afa:	7a 81       	ldd	r23, Y+2	; 0x02
    2afc:	8b 81       	ldd	r24, Y+3	; 0x03
    2afe:	9c 81       	ldd	r25, Y+4	; 0x04
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e2       	ldi	r19, 0x20	; 32
    2b04:	4c e9       	ldi	r20, 0x9C	; 156
    2b06:	55 e4       	ldi	r21, 0x45	; 69
    2b08:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b0c:	18 16       	cp	r1, r24
    2b0e:	34 f4       	brge	.+12     	; 0x2b1c <main+0xa8>
						DIO_enuSetPinValue(DIO_u8PORTD,DIO_u8PIN0,DIO_u8HIGH);
    2b10:	83 e0       	ldi	r24, 0x03	; 3
    2b12:	60 e0       	ldi	r22, 0x00	; 0
    2b14:	41 e0       	ldi	r20, 0x01	; 1
    2b16:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
    2b1a:	be cf       	rjmp	.-132    	; 0x2a98 <main+0x24>
					}
					else{
							DIO_enuSetPinValue(DIO_u8PORTD,DIO_u8PIN0,DIO_u8LOW);
    2b1c:	83 e0       	ldi	r24, 0x03	; 3
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	40 e0       	ldi	r20, 0x00	; 0
    2b22:	0e 94 22 13 	call	0x2644	; 0x2644 <DIO_enuSetPinValue>
    2b26:	b8 cf       	rjmp	.-144    	; 0x2a98 <main+0x24>

00002b28 <__mulsi3>:
    2b28:	62 9f       	mul	r22, r18
    2b2a:	d0 01       	movw	r26, r0
    2b2c:	73 9f       	mul	r23, r19
    2b2e:	f0 01       	movw	r30, r0
    2b30:	82 9f       	mul	r24, r18
    2b32:	e0 0d       	add	r30, r0
    2b34:	f1 1d       	adc	r31, r1
    2b36:	64 9f       	mul	r22, r20
    2b38:	e0 0d       	add	r30, r0
    2b3a:	f1 1d       	adc	r31, r1
    2b3c:	92 9f       	mul	r25, r18
    2b3e:	f0 0d       	add	r31, r0
    2b40:	83 9f       	mul	r24, r19
    2b42:	f0 0d       	add	r31, r0
    2b44:	74 9f       	mul	r23, r20
    2b46:	f0 0d       	add	r31, r0
    2b48:	65 9f       	mul	r22, r21
    2b4a:	f0 0d       	add	r31, r0
    2b4c:	99 27       	eor	r25, r25
    2b4e:	72 9f       	mul	r23, r18
    2b50:	b0 0d       	add	r27, r0
    2b52:	e1 1d       	adc	r30, r1
    2b54:	f9 1f       	adc	r31, r25
    2b56:	63 9f       	mul	r22, r19
    2b58:	b0 0d       	add	r27, r0
    2b5a:	e1 1d       	adc	r30, r1
    2b5c:	f9 1f       	adc	r31, r25
    2b5e:	bd 01       	movw	r22, r26
    2b60:	cf 01       	movw	r24, r30
    2b62:	11 24       	eor	r1, r1
    2b64:	08 95       	ret

00002b66 <__divmodsi4>:
    2b66:	97 fb       	bst	r25, 7
    2b68:	09 2e       	mov	r0, r25
    2b6a:	05 26       	eor	r0, r21
    2b6c:	0e d0       	rcall	.+28     	; 0x2b8a <__divmodsi4_neg1>
    2b6e:	57 fd       	sbrc	r21, 7
    2b70:	04 d0       	rcall	.+8      	; 0x2b7a <__divmodsi4_neg2>
    2b72:	14 d0       	rcall	.+40     	; 0x2b9c <__udivmodsi4>
    2b74:	0a d0       	rcall	.+20     	; 0x2b8a <__divmodsi4_neg1>
    2b76:	00 1c       	adc	r0, r0
    2b78:	38 f4       	brcc	.+14     	; 0x2b88 <__divmodsi4_exit>

00002b7a <__divmodsi4_neg2>:
    2b7a:	50 95       	com	r21
    2b7c:	40 95       	com	r20
    2b7e:	30 95       	com	r19
    2b80:	21 95       	neg	r18
    2b82:	3f 4f       	sbci	r19, 0xFF	; 255
    2b84:	4f 4f       	sbci	r20, 0xFF	; 255
    2b86:	5f 4f       	sbci	r21, 0xFF	; 255

00002b88 <__divmodsi4_exit>:
    2b88:	08 95       	ret

00002b8a <__divmodsi4_neg1>:
    2b8a:	f6 f7       	brtc	.-4      	; 0x2b88 <__divmodsi4_exit>
    2b8c:	90 95       	com	r25
    2b8e:	80 95       	com	r24
    2b90:	70 95       	com	r23
    2b92:	61 95       	neg	r22
    2b94:	7f 4f       	sbci	r23, 0xFF	; 255
    2b96:	8f 4f       	sbci	r24, 0xFF	; 255
    2b98:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9a:	08 95       	ret

00002b9c <__udivmodsi4>:
    2b9c:	a1 e2       	ldi	r26, 0x21	; 33
    2b9e:	1a 2e       	mov	r1, r26
    2ba0:	aa 1b       	sub	r26, r26
    2ba2:	bb 1b       	sub	r27, r27
    2ba4:	fd 01       	movw	r30, r26
    2ba6:	0d c0       	rjmp	.+26     	; 0x2bc2 <__udivmodsi4_ep>

00002ba8 <__udivmodsi4_loop>:
    2ba8:	aa 1f       	adc	r26, r26
    2baa:	bb 1f       	adc	r27, r27
    2bac:	ee 1f       	adc	r30, r30
    2bae:	ff 1f       	adc	r31, r31
    2bb0:	a2 17       	cp	r26, r18
    2bb2:	b3 07       	cpc	r27, r19
    2bb4:	e4 07       	cpc	r30, r20
    2bb6:	f5 07       	cpc	r31, r21
    2bb8:	20 f0       	brcs	.+8      	; 0x2bc2 <__udivmodsi4_ep>
    2bba:	a2 1b       	sub	r26, r18
    2bbc:	b3 0b       	sbc	r27, r19
    2bbe:	e4 0b       	sbc	r30, r20
    2bc0:	f5 0b       	sbc	r31, r21

00002bc2 <__udivmodsi4_ep>:
    2bc2:	66 1f       	adc	r22, r22
    2bc4:	77 1f       	adc	r23, r23
    2bc6:	88 1f       	adc	r24, r24
    2bc8:	99 1f       	adc	r25, r25
    2bca:	1a 94       	dec	r1
    2bcc:	69 f7       	brne	.-38     	; 0x2ba8 <__udivmodsi4_loop>
    2bce:	60 95       	com	r22
    2bd0:	70 95       	com	r23
    2bd2:	80 95       	com	r24
    2bd4:	90 95       	com	r25
    2bd6:	9b 01       	movw	r18, r22
    2bd8:	ac 01       	movw	r20, r24
    2bda:	bd 01       	movw	r22, r26
    2bdc:	cf 01       	movw	r24, r30
    2bde:	08 95       	ret

00002be0 <__prologue_saves__>:
    2be0:	2f 92       	push	r2
    2be2:	3f 92       	push	r3
    2be4:	4f 92       	push	r4
    2be6:	5f 92       	push	r5
    2be8:	6f 92       	push	r6
    2bea:	7f 92       	push	r7
    2bec:	8f 92       	push	r8
    2bee:	9f 92       	push	r9
    2bf0:	af 92       	push	r10
    2bf2:	bf 92       	push	r11
    2bf4:	cf 92       	push	r12
    2bf6:	df 92       	push	r13
    2bf8:	ef 92       	push	r14
    2bfa:	ff 92       	push	r15
    2bfc:	0f 93       	push	r16
    2bfe:	1f 93       	push	r17
    2c00:	cf 93       	push	r28
    2c02:	df 93       	push	r29
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	ca 1b       	sub	r28, r26
    2c0a:	db 0b       	sbc	r29, r27
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	f8 94       	cli
    2c10:	de bf       	out	0x3e, r29	; 62
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	cd bf       	out	0x3d, r28	; 61
    2c16:	09 94       	ijmp

00002c18 <__epilogue_restores__>:
    2c18:	2a 88       	ldd	r2, Y+18	; 0x12
    2c1a:	39 88       	ldd	r3, Y+17	; 0x11
    2c1c:	48 88       	ldd	r4, Y+16	; 0x10
    2c1e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c20:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c22:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c24:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c26:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c28:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c2a:	b9 84       	ldd	r11, Y+9	; 0x09
    2c2c:	c8 84       	ldd	r12, Y+8	; 0x08
    2c2e:	df 80       	ldd	r13, Y+7	; 0x07
    2c30:	ee 80       	ldd	r14, Y+6	; 0x06
    2c32:	fd 80       	ldd	r15, Y+5	; 0x05
    2c34:	0c 81       	ldd	r16, Y+4	; 0x04
    2c36:	1b 81       	ldd	r17, Y+3	; 0x03
    2c38:	aa 81       	ldd	r26, Y+2	; 0x02
    2c3a:	b9 81       	ldd	r27, Y+1	; 0x01
    2c3c:	ce 0f       	add	r28, r30
    2c3e:	d1 1d       	adc	r29, r1
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	ed 01       	movw	r28, r26
    2c4c:	08 95       	ret

00002c4e <_exit>:
    2c4e:	f8 94       	cli

00002c50 <__stop_program>:
    2c50:	ff cf       	rjmp	.-2      	; 0x2c50 <__stop_program>
