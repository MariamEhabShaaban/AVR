
TIMERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000231e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  0000231e  000023b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800180  00800180  000024d2  2**0
                  ALLOC
  3 .stab         00001f50  00000000  00000000  000024d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bdc  00000000  00000000  00004424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000051a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005392  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000779d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00008b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00009cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00009ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__vector_1>
       8:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__vector_2>
       c:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f3 09 	jmp	0x13e6	; 0x13e6 <__vector_10>
      2c:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 44 11 	call	0x2288	; 0x2288 <main>
      8a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7a 11 	jmp	0x22f4	; 0x22f4 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 7a 11 	jmp	0x22f4	; 0x22f4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Timer_enu_init>:
static void* (*Global_p_Fun)(void*) = NULL;
static void *Gparameter = NULL;
static u8 counts = 0;
u32 Int_Num_OVF;
u8 preload;
ES_t Timer_enu_init() {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
	u8 Local_error_state = ES_NOK;
     e38:	19 82       	std	Y+1, r1	; 0x01
#if Timer0_State==Enable
	TCCR0 = 0;
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	10 82       	st	Z, r1
	SREG |= (1 << 7);
     e40:	af e5       	ldi	r26, 0x5F	; 95
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	ef e5       	ldi	r30, 0x5F	; 95
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	80 68       	ori	r24, 0x80	; 128
     e4c:	8c 93       	st	X, r24
	Local_error_state = ES_OK;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 |= (1 << 3);
	TCCR0 |= (1 << 6);

	Local_error_state = ES_OK;
#elif Timer0_Mode==PC_PWM
	TCCR0 &= ~(1 << 3);
     e52:	a3 e5       	ldi	r26, 0x53	; 83
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e3 e5       	ldi	r30, 0x53	; 83
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	87 7f       	andi	r24, 0xF7	; 247
     e5e:	8c 93       	st	X, r24
	TCCR0 |= (1 << 6);
     e60:	a3 e5       	ldi	r26, 0x53	; 83
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e3 e5       	ldi	r30, 0x53	; 83
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 64       	ori	r24, 0x40	; 64
     e6c:	8c 93       	st	X, r24
	Local_error_state = ES_OK;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	89 83       	std	Y+1, r24	; 0x01
#endif
#if Prescslar == pre_64
	TCCR0 |= (3 << 0);
     e72:	a3 e5       	ldi	r26, 0x53	; 83
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e3 e5       	ldi	r30, 0x53	; 83
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	83 60       	ori	r24, 0x03	; 3
     e7e:	8c 93       	st	X, r24
	Local_error_state = ES_OK;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 |= (5 << 0);
	Local_error_state = ES_OK;
#endif
#endif

	return Local_error_state;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
}
     e86:	0f 90       	pop	r0
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <Timer_enu_Asyn_Delay>:
ES_t Timer_enu_Asyn_Delay(u32 Time, void* (*CpFun)(void*), void * parameter) {
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	61 97       	sbiw	r28, 0x11	; 17
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	6a 87       	std	Y+10, r22	; 0x0a
     ea8:	7b 87       	std	Y+11, r23	; 0x0b
     eaa:	8c 87       	std	Y+12, r24	; 0x0c
     eac:	9d 87       	std	Y+13, r25	; 0x0d
     eae:	5f 87       	std	Y+15, r21	; 0x0f
     eb0:	4e 87       	std	Y+14, r20	; 0x0e
     eb2:	39 8b       	std	Y+17, r19	; 0x11
     eb4:	28 8b       	std	Y+16, r18	; 0x10
	u8 Local_error_state = ES_NOK;
     eb6:	19 86       	std	Y+9, r1	; 0x09

	if (CpFun != NULL) {
     eb8:	8e 85       	ldd	r24, Y+14	; 0x0e
     eba:	9f 85       	ldd	r25, Y+15	; 0x0f
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	09 f4       	brne	.+2      	; 0xec2 <Timer_enu_Asyn_Delay+0x34>
     ec0:	08 c1       	rjmp	.+528    	; 0x10d2 <Timer_enu_Asyn_Delay+0x244>
		Global_p_Fun = CpFun;
     ec2:	8e 85       	ldd	r24, Y+14	; 0x0e
     ec4:	9f 85       	ldd	r25, Y+15	; 0x0f
     ec6:	90 93 81 01 	sts	0x0181, r25
     eca:	80 93 80 01 	sts	0x0180, r24
		Gparameter = parameter;
     ece:	88 89       	ldd	r24, Y+16	; 0x10
     ed0:	99 89       	ldd	r25, Y+17	; 0x11
     ed2:	90 93 83 01 	sts	0x0183, r25
     ed6:	80 93 82 01 	sts	0x0182, r24
		f32 OVF_time = 256 * ((f32) Prescslar / F_CPU);
     eda:	8f e6       	ldi	r24, 0x6F	; 111
     edc:	92 e1       	ldi	r25, 0x12	; 18
     ede:	a3 e8       	ldi	r26, 0x83	; 131
     ee0:	b1 e4       	ldi	r27, 0x41	; 65
     ee2:	8d 83       	std	Y+5, r24	; 0x05
     ee4:	9e 83       	std	Y+6, r25	; 0x06
     ee6:	af 83       	std	Y+7, r26	; 0x07
     ee8:	b8 87       	std	Y+8, r27	; 0x08

		if (Time > OVF_time) {
     eea:	6a 85       	ldd	r22, Y+10	; 0x0a
     eec:	7b 85       	ldd	r23, Y+11	; 0x0b
     eee:	8c 85       	ldd	r24, Y+12	; 0x0c
     ef0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ef2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	bc 01       	movw	r22, r24
     efc:	cd 01       	movw	r24, r26
     efe:	2d 81       	ldd	r18, Y+5	; 0x05
     f00:	3e 81       	ldd	r19, Y+6	; 0x06
     f02:	4f 81       	ldd	r20, Y+7	; 0x07
     f04:	58 85       	ldd	r21, Y+8	; 0x08
     f06:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
     f0a:	18 16       	cp	r1, r24
     f0c:	0c f0       	brlt	.+2      	; 0xf10 <Timer_enu_Asyn_Delay+0x82>
     f0e:	b3 c0       	rjmp	.+358    	; 0x1076 <Timer_enu_Asyn_Delay+0x1e8>
			f32 Num_OVF = Time / OVF_time; //19.073
     f10:	6a 85       	ldd	r22, Y+10	; 0x0a
     f12:	7b 85       	ldd	r23, Y+11	; 0x0b
     f14:	8c 85       	ldd	r24, Y+12	; 0x0c
     f16:	9d 85       	ldd	r25, Y+13	; 0x0d
     f18:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	bc 01       	movw	r22, r24
     f22:	cd 01       	movw	r24, r26
     f24:	2d 81       	ldd	r18, Y+5	; 0x05
     f26:	3e 81       	ldd	r19, Y+6	; 0x06
     f28:	4f 81       	ldd	r20, Y+7	; 0x07
     f2a:	58 85       	ldd	r21, Y+8	; 0x08
     f2c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	9a 83       	std	Y+2, r25	; 0x02
     f38:	ab 83       	std	Y+3, r26	; 0x03
     f3a:	bc 83       	std	Y+4, r27	; 0x04
			if (Num_OVF - (u32) Num_OVF != 0.0) {
     f3c:	69 81       	ldd	r22, Y+1	; 0x01
     f3e:	7a 81       	ldd	r23, Y+2	; 0x02
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	bc 01       	movw	r22, r24
     f4e:	cd 01       	movw	r24, r26
     f50:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f54:	9b 01       	movw	r18, r22
     f56:	ac 01       	movw	r20, r24
     f58:	69 81       	ldd	r22, Y+1	; 0x01
     f5a:	7a 81       	ldd	r23, Y+2	; 0x02
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	bc 01       	movw	r22, r24
     f6a:	cd 01       	movw	r24, r26
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
     f78:	88 23       	and	r24, r24
     f7a:	09 f4       	brne	.+2      	; 0xf7e <Timer_enu_Asyn_Delay+0xf0>
     f7c:	50 c0       	rjmp	.+160    	; 0x101e <Timer_enu_Asyn_Delay+0x190>
				Int_Num_OVF = (u32) Num_OVF + 1; //20
     f7e:	69 81       	ldd	r22, Y+1	; 0x01
     f80:	7a 81       	ldd	r23, Y+2	; 0x02
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	9c 81       	ldd	r25, Y+4	; 0x04
     f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	a1 1d       	adc	r26, r1
     f92:	b1 1d       	adc	r27, r1
     f94:	80 93 8c 01 	sts	0x018C, r24
     f98:	90 93 8d 01 	sts	0x018D, r25
     f9c:	a0 93 8e 01 	sts	0x018E, r26
     fa0:	b0 93 8f 01 	sts	0x018F, r27
				Num_OVF = Num_OVF - (u32) Num_OVF; //.073
     fa4:	69 81       	ldd	r22, Y+1	; 0x01
     fa6:	7a 81       	ldd	r23, Y+2	; 0x02
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	9c 81       	ldd	r25, Y+4	; 0x04
     fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	bc 01       	movw	r22, r24
     fb6:	cd 01       	movw	r24, r26
     fb8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     fbc:	9b 01       	movw	r18, r22
     fbe:	ac 01       	movw	r20, r24
     fc0:	69 81       	ldd	r22, Y+1	; 0x01
     fc2:	7a 81       	ldd	r23, Y+2	; 0x02
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	9c 81       	ldd	r25, Y+4	; 0x04
     fc8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	ab 83       	std	Y+3, r26	; 0x03
     fd6:	bc 83       	std	Y+4, r27	; 0x04
				preload = 256 - (Num_OVF * 256);
     fd8:	69 81       	ldd	r22, Y+1	; 0x01
     fda:	7a 81       	ldd	r23, Y+2	; 0x02
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	9c 81       	ldd	r25, Y+4	; 0x04
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e8       	ldi	r20, 0x80	; 128
     fe6:	53 ec       	ldi	r21, 0xC3	; 195
     fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e8       	ldi	r20, 0x80	; 128
     ffa:	53 e4       	ldi	r21, 0x43	; 67
     ffc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	bc 01       	movw	r22, r24
    1006:	cd 01       	movw	r24, r26
    1008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	80 93 8b 01 	sts	0x018B, r24
				TCNT0 = preload;
    1014:	e2 e0       	ldi	r30, 0x02	; 2
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 91 8b 01 	lds	r24, 0x018B
    101c:	80 83       	st	Z, r24
			}
			TIMSK |= (1 << 0);
    101e:	a9 e5       	ldi	r26, 0x59	; 89
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e9 e5       	ldi	r30, 0x59	; 89
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	81 60       	ori	r24, 0x01	; 1
    102a:	8c 93       	st	X, r24
			if (counts == Int_Num_OVF) {
    102c:	80 91 84 01 	lds	r24, 0x0184
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	80 91 8c 01 	lds	r24, 0x018C
    103c:	90 91 8d 01 	lds	r25, 0x018D
    1040:	a0 91 8e 01 	lds	r26, 0x018E
    1044:	b0 91 8f 01 	lds	r27, 0x018F
    1048:	28 17       	cp	r18, r24
    104a:	39 07       	cpc	r19, r25
    104c:	4a 07       	cpc	r20, r26
    104e:	5b 07       	cpc	r21, r27
    1050:	09 f0       	breq	.+2      	; 0x1054 <Timer_enu_Asyn_Delay+0x1c6>
    1052:	41 c0       	rjmp	.+130    	; 0x10d6 <Timer_enu_Asyn_Delay+0x248>
				TCNT0 = preload;
    1054:	e2 e0       	ldi	r30, 0x02	; 2
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 91 8b 01 	lds	r24, 0x018B
    105c:	80 83       	st	Z, r24
				Global_p_Fun(Gparameter);
    105e:	e0 91 80 01 	lds	r30, 0x0180
    1062:	f0 91 81 01 	lds	r31, 0x0181
    1066:	80 91 82 01 	lds	r24, 0x0182
    106a:	90 91 83 01 	lds	r25, 0x0183
    106e:	09 95       	icall
				counts = 0;
    1070:	10 92 84 01 	sts	0x0184, r1
    1074:	30 c0       	rjmp	.+96     	; 0x10d6 <Timer_enu_Asyn_Delay+0x248>
			}

		} else {
			OCR0 = (Time / OVF_time) * 256;
    1076:	0c e5       	ldi	r16, 0x5C	; 92
    1078:	10 e0       	ldi	r17, 0x00	; 0
    107a:	6a 85       	ldd	r22, Y+10	; 0x0a
    107c:	7b 85       	ldd	r23, Y+11	; 0x0b
    107e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1080:	9d 85       	ldd	r25, Y+13	; 0x0d
    1082:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	bc 01       	movw	r22, r24
    108c:	cd 01       	movw	r24, r26
    108e:	2d 81       	ldd	r18, Y+5	; 0x05
    1090:	3e 81       	ldd	r19, Y+6	; 0x06
    1092:	4f 81       	ldd	r20, Y+7	; 0x07
    1094:	58 85       	ldd	r21, Y+8	; 0x08
    1096:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	bc 01       	movw	r22, r24
    10a0:	cd 01       	movw	r24, r26
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e8       	ldi	r20, 0x80	; 128
    10a8:	53 e4       	ldi	r21, 0x43	; 67
    10aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	bc 01       	movw	r22, r24
    10b4:	cd 01       	movw	r24, r26
    10b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	f8 01       	movw	r30, r16
    10c0:	80 83       	st	Z, r24
			TIMSK |= (1 << 1);
    10c2:	a9 e5       	ldi	r26, 0x59	; 89
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e9 e5       	ldi	r30, 0x59	; 89
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	82 60       	ori	r24, 0x02	; 2
    10ce:	8c 93       	st	X, r24
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <Timer_enu_Asyn_Delay+0x248>

		}
	} else
		Local_error_state = ES_NULL_POINTER;
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	89 87       	std	Y+9, r24	; 0x09

	return Local_error_state;
    10d6:	89 85       	ldd	r24, Y+9	; 0x09

}
    10d8:	61 96       	adiw	r28, 0x11	; 17
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	08 95       	ret

000010ee <Timer_enu_syn_Delay>:

ES_t Timer_enu_syn_Delay(u32 Time) {
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	62 97       	sbiw	r28, 0x12	; 18
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	6a 87       	std	Y+10, r22	; 0x0a
    1104:	7b 87       	std	Y+11, r23	; 0x0b
    1106:	8c 87       	std	Y+12, r24	; 0x0c
    1108:	9d 87       	std	Y+13, r25	; 0x0d
	ES_t Local_enuErrorState = ES_NOK;
    110a:	19 86       	std	Y+9, r1	; 0x09
	f32 OVF_time = 256 * ((f32) Prescslar / F_CPU);
    110c:	8f e6       	ldi	r24, 0x6F	; 111
    110e:	92 e1       	ldi	r25, 0x12	; 18
    1110:	a3 e8       	ldi	r26, 0x83	; 131
    1112:	b1 e4       	ldi	r27, 0x41	; 65
    1114:	8d 83       	std	Y+5, r24	; 0x05
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	af 83       	std	Y+7, r26	; 0x07
    111a:	b8 87       	std	Y+8, r27	; 0x08

	if (Time > OVF_time) {
    111c:	6a 85       	ldd	r22, Y+10	; 0x0a
    111e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1120:	8c 85       	ldd	r24, Y+12	; 0x0c
    1122:	9d 85       	ldd	r25, Y+13	; 0x0d
    1124:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	bc 01       	movw	r22, r24
    112e:	cd 01       	movw	r24, r26
    1130:	2d 81       	ldd	r18, Y+5	; 0x05
    1132:	3e 81       	ldd	r19, Y+6	; 0x06
    1134:	4f 81       	ldd	r20, Y+7	; 0x07
    1136:	58 85       	ldd	r21, Y+8	; 0x08
    1138:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    113c:	18 16       	cp	r1, r24
    113e:	0c f0       	brlt	.+2      	; 0x1142 <Timer_enu_syn_Delay+0x54>
    1140:	c2 c0       	rjmp	.+388    	; 0x12c6 <Timer_enu_syn_Delay+0x1d8>
		f32 Num_OVF = Time / OVF_time; //19.073
    1142:	6a 85       	ldd	r22, Y+10	; 0x0a
    1144:	7b 85       	ldd	r23, Y+11	; 0x0b
    1146:	8c 85       	ldd	r24, Y+12	; 0x0c
    1148:	9d 85       	ldd	r25, Y+13	; 0x0d
    114a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	bc 01       	movw	r22, r24
    1154:	cd 01       	movw	r24, r26
    1156:	2d 81       	ldd	r18, Y+5	; 0x05
    1158:	3e 81       	ldd	r19, Y+6	; 0x06
    115a:	4f 81       	ldd	r20, Y+7	; 0x07
    115c:	58 85       	ldd	r21, Y+8	; 0x08
    115e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	ab 83       	std	Y+3, r26	; 0x03
    116c:	bc 83       	std	Y+4, r27	; 0x04
		if (Num_OVF - (u32) Num_OVF != 0.0) {
    116e:	69 81       	ldd	r22, Y+1	; 0x01
    1170:	7a 81       	ldd	r23, Y+2	; 0x02
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1186:	9b 01       	movw	r18, r22
    1188:	ac 01       	movw	r20, r24
    118a:	69 81       	ldd	r22, Y+1	; 0x01
    118c:	7a 81       	ldd	r23, Y+2	; 0x02
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	bc 01       	movw	r22, r24
    119c:	cd 01       	movw	r24, r26
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    11aa:	88 23       	and	r24, r24
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <Timer_enu_syn_Delay+0xc2>
    11ae:	62 c0       	rjmp	.+196    	; 0x1274 <Timer_enu_syn_Delay+0x186>
			Int_Num_OVF = (u32) Num_OVF + 1; //20
    11b0:	69 81       	ldd	r22, Y+1	; 0x01
    11b2:	7a 81       	ldd	r23, Y+2	; 0x02
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	a1 1d       	adc	r26, r1
    11c4:	b1 1d       	adc	r27, r1
    11c6:	80 93 8c 01 	sts	0x018C, r24
    11ca:	90 93 8d 01 	sts	0x018D, r25
    11ce:	a0 93 8e 01 	sts	0x018E, r26
    11d2:	b0 93 8f 01 	sts	0x018F, r27
			Num_OVF = Num_OVF - (u32) Num_OVF; //.073
    11d6:	69 81       	ldd	r22, Y+1	; 0x01
    11d8:	7a 81       	ldd	r23, Y+2	; 0x02
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    11ee:	9b 01       	movw	r18, r22
    11f0:	ac 01       	movw	r20, r24
    11f2:	69 81       	ldd	r22, Y+1	; 0x01
    11f4:	7a 81       	ldd	r23, Y+2	; 0x02
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	9a 83       	std	Y+2, r25	; 0x02
    1206:	ab 83       	std	Y+3, r26	; 0x03
    1208:	bc 83       	std	Y+4, r27	; 0x04
			preload = 256 - (Num_OVF * 256);
    120a:	69 81       	ldd	r22, Y+1	; 0x01
    120c:	7a 81       	ldd	r23, Y+2	; 0x02
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e8       	ldi	r20, 0x80	; 128
    1218:	53 ec       	ldi	r21, 0xC3	; 195
    121a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	bc 01       	movw	r22, r24
    1224:	cd 01       	movw	r24, r26
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	40 e8       	ldi	r20, 0x80	; 128
    122c:	53 e4       	ldi	r21, 0x43	; 67
    122e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	bc 01       	movw	r22, r24
    1238:	cd 01       	movw	r24, r26
    123a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	80 93 8b 01 	sts	0x018B, r24
			TCNT0 = preload;
    1246:	e2 e0       	ldi	r30, 0x02	; 2
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 91 8b 01 	lds	r24, 0x018B
    124e:	80 83       	st	Z, r24
    1250:	11 c0       	rjmp	.+34     	; 0x1274 <Timer_enu_syn_Delay+0x186>
		}
		while (Int_Num_OVF--) {
			while (((TIFR >> 1) & 1) == 0)
    1252:	e8 e5       	ldi	r30, 0x58	; 88
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	86 95       	lsr	r24
    125a:	88 2f       	mov	r24, r24
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	81 70       	andi	r24, 0x01	; 1
    1260:	90 70       	andi	r25, 0x00	; 0
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	b1 f3       	breq	.-20     	; 0x1252 <Timer_enu_syn_Delay+0x164>
				;
			TIFR |= (1 << 1);
    1266:	a8 e5       	ldi	r26, 0x58	; 88
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e8 e5       	ldi	r30, 0x58	; 88
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	82 60       	ori	r24, 0x02	; 2
    1272:	8c 93       	st	X, r24
			Int_Num_OVF = (u32) Num_OVF + 1; //20
			Num_OVF = Num_OVF - (u32) Num_OVF; //.073
			preload = 256 - (Num_OVF * 256);
			TCNT0 = preload;
		}
		while (Int_Num_OVF--) {
    1274:	80 91 8c 01 	lds	r24, 0x018C
    1278:	90 91 8d 01 	lds	r25, 0x018D
    127c:	a0 91 8e 01 	lds	r26, 0x018E
    1280:	b0 91 8f 01 	lds	r27, 0x018F
    1284:	8f 87       	std	Y+15, r24	; 0x0f
    1286:	98 8b       	std	Y+16, r25	; 0x10
    1288:	a9 8b       	std	Y+17, r26	; 0x11
    128a:	ba 8b       	std	Y+18, r27	; 0x12
    128c:	1e 86       	std	Y+14, r1	; 0x0e
    128e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1290:	98 89       	ldd	r25, Y+16	; 0x10
    1292:	a9 89       	ldd	r26, Y+17	; 0x11
    1294:	ba 89       	ldd	r27, Y+18	; 0x12
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	a1 05       	cpc	r26, r1
    129a:	b1 05       	cpc	r27, r1
    129c:	11 f0       	breq	.+4      	; 0x12a2 <Timer_enu_syn_Delay+0x1b4>
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	9e 87       	std	Y+14, r25	; 0x0e
    12a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a4:	98 89       	ldd	r25, Y+16	; 0x10
    12a6:	a9 89       	ldd	r26, Y+17	; 0x11
    12a8:	ba 89       	ldd	r27, Y+18	; 0x12
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	a1 09       	sbc	r26, r1
    12ae:	b1 09       	sbc	r27, r1
    12b0:	80 93 8c 01 	sts	0x018C, r24
    12b4:	90 93 8d 01 	sts	0x018D, r25
    12b8:	a0 93 8e 01 	sts	0x018E, r26
    12bc:	b0 93 8f 01 	sts	0x018F, r27
    12c0:	ae 85       	ldd	r26, Y+14	; 0x0e
    12c2:	aa 23       	and	r26, r26
    12c4:	31 f6       	brne	.-116    	; 0x1252 <Timer_enu_syn_Delay+0x164>
			while (((TIFR >> 1) & 1) == 0)
				;
			TIFR |= (1 << 1);
		}
	}
	Local_enuErrorState = ES_OK;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	89 87       	std	Y+9, r24	; 0x09
	return Local_enuErrorState;
    12ca:	89 85       	ldd	r24, Y+9	; 0x09

}
    12cc:	62 96       	adiw	r28, 0x12	; 18
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <Timer_enu_Generate_PC_PWM>:
#endif

	return Local_error_state;
}
#elif Timer0_Mode==PC_PWM
ES_t Timer_enu_Generate_PC_PWM(f32 Copy_desired_top){
    12de:	ef 92       	push	r14
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	29 97       	sbiw	r28, 0x09	; 9
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	6e 83       	std	Y+6, r22	; 0x06
    12fc:	7f 83       	std	Y+7, r23	; 0x07
    12fe:	88 87       	std	Y+8, r24	; 0x08
    1300:	99 87       	std	Y+9, r25	; 0x09


	u8 Local_error_state = ES_NOK;
    1302:	1d 82       	std	Y+5, r1	; 0x05

		f32 duty = (Copy_desired_top / 5) * (Copy_desired_top / 5);
    1304:	6e 81       	ldd	r22, Y+6	; 0x06
    1306:	7f 81       	ldd	r23, Y+7	; 0x07
    1308:	88 85       	ldd	r24, Y+8	; 0x08
    130a:	99 85       	ldd	r25, Y+9	; 0x09
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 ea       	ldi	r20, 0xA0	; 160
    1312:	50 e4       	ldi	r21, 0x40	; 64
    1314:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	7c 01       	movw	r14, r24
    131e:	8d 01       	movw	r16, r26
    1320:	6e 81       	ldd	r22, Y+6	; 0x06
    1322:	7f 81       	ldd	r23, Y+7	; 0x07
    1324:	88 85       	ldd	r24, Y+8	; 0x08
    1326:	99 85       	ldd	r25, Y+9	; 0x09
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 ea       	ldi	r20, 0xA0	; 160
    132e:	50 e4       	ldi	r21, 0x40	; 64
    1330:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9c 01       	movw	r18, r24
    133a:	ad 01       	movw	r20, r26
    133c:	c8 01       	movw	r24, r16
    133e:	b7 01       	movw	r22, r14
    1340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	9a 83       	std	Y+2, r25	; 0x02
    134c:	ab 83       	std	Y+3, r26	; 0x03
    134e:	bc 83       	std	Y+4, r27	; 0x04
	#if PC_PWM_MODE== CLEAR_UP_SET_DOWN

		TCCR0 &=~ (1 << 4);
    1350:	a3 e5       	ldi	r26, 0x53	; 83
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e3 e5       	ldi	r30, 0x53	; 83
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8f 7e       	andi	r24, 0xEF	; 239
    135c:	8c 93       	st	X, r24
		TCCR0 |= (1 << 5);
    135e:	a3 e5       	ldi	r26, 0x53	; 83
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e3 e5       	ldi	r30, 0x53	; 83
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	80 62       	ori	r24, 0x20	; 32
    136a:	8c 93       	st	X, r24
		OCR0 = (u8) (duty * 255);
    136c:	0c e5       	ldi	r16, 0x5C	; 92
    136e:	10 e0       	ldi	r17, 0x00	; 0
    1370:	69 81       	ldd	r22, Y+1	; 0x01
    1372:	7a 81       	ldd	r23, Y+2	; 0x02
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	4f e7       	ldi	r20, 0x7F	; 127
    137e:	53 e4       	ldi	r21, 0x43	; 67
    1380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	bc 01       	movw	r22, r24
    138a:	cd 01       	movw	r24, r26
    138c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	f8 01       	movw	r30, r16
    1396:	80 83       	st	Z, r24
		Local_error_state = ES_OK;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	8d 83       	std	Y+5, r24	; 0x05
		TCCR0|=(3<<4);
		OCR0=(1-duty)*255;
		Local_error_state = ES_OK;
	#endif

		return Local_error_state;
    139c:	8d 81       	ldd	r24, Y+5	; 0x05

}
    139e:	29 96       	adiw	r28, 0x09	; 9
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	ff 90       	pop	r15
    13b4:	ef 90       	pop	r14
    13b6:	08 95       	ret

000013b8 <__vector_11>:
#endif
ISR(VECT_TIMER0_OVR) {
    13b8:	1f 92       	push	r1
    13ba:	0f 92       	push	r0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	0f 92       	push	r0
    13c0:	11 24       	eor	r1, r1
    13c2:	8f 93       	push	r24
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62

	counts++;
    13cc:	80 91 84 01 	lds	r24, 0x0184
    13d0:	8f 5f       	subi	r24, 0xFF	; 255
    13d2:	80 93 84 01 	sts	0x0184, r24

}
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	8f 91       	pop	r24
    13dc:	0f 90       	pop	r0
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	0f 90       	pop	r0
    13e2:	1f 90       	pop	r1
    13e4:	18 95       	reti

000013e6 <__vector_10>:

ISR(VECT_TIMER0_CTC) {
    13e6:	1f 92       	push	r1
    13e8:	0f 92       	push	r0
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	0f 92       	push	r0
    13ee:	11 24       	eor	r1, r1
    13f0:	2f 93       	push	r18
    13f2:	3f 93       	push	r19
    13f4:	4f 93       	push	r20
    13f6:	5f 93       	push	r21
    13f8:	6f 93       	push	r22
    13fa:	7f 93       	push	r23
    13fc:	8f 93       	push	r24
    13fe:	9f 93       	push	r25
    1400:	af 93       	push	r26
    1402:	bf 93       	push	r27
    1404:	ef 93       	push	r30
    1406:	ff 93       	push	r31
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
	if (Global_p_Fun != NULL)
    1410:	80 91 80 01 	lds	r24, 0x0180
    1414:	90 91 81 01 	lds	r25, 0x0181
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	49 f0       	breq	.+18     	; 0x142e <__vector_10+0x48>
		Global_p_Fun(Gparameter);
    141c:	e0 91 80 01 	lds	r30, 0x0180
    1420:	f0 91 81 01 	lds	r31, 0x0181
    1424:	80 91 82 01 	lds	r24, 0x0182
    1428:	90 91 83 01 	lds	r25, 0x0183
    142c:	09 95       	icall

}
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	ff 91       	pop	r31
    1434:	ef 91       	pop	r30
    1436:	bf 91       	pop	r27
    1438:	af 91       	pop	r26
    143a:	9f 91       	pop	r25
    143c:	8f 91       	pop	r24
    143e:	7f 91       	pop	r23
    1440:	6f 91       	pop	r22
    1442:	5f 91       	pop	r21
    1444:	4f 91       	pop	r20
    1446:	3f 91       	pop	r19
    1448:	2f 91       	pop	r18
    144a:	0f 90       	pop	r0
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	0f 90       	pop	r0
    1450:	1f 90       	pop	r1
    1452:	18 95       	reti

00001454 <GIE_enuEnable>:
 */
#include "../../LIB/stdTypes.h"
#include "../../LIB/errorStates.h"
#include "GIE_priv.h"

ES_t GIE_enuEnable(){
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	0f 92       	push	r0
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    145e:	19 82       	std	Y+1, r1	; 0x01

	SREG|= (1<<7);
    1460:	af e5       	ldi	r26, 0x5F	; 95
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	ef e5       	ldi	r30, 0x5F	; 95
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	80 68       	ori	r24, 0x80	; 128
    146c:	8c 93       	st	X, r24
	Local_enuErrorstate = ES_OK;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	89 83       	std	Y+1, r24	; 0x01

		return Local_enuErrorstate;
    1472:	89 81       	ldd	r24, Y+1	; 0x01

}
    1474:	0f 90       	pop	r0
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <GIE_enuDisable>:
ES_t GIE_enuDisable(){
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	0f 92       	push	r0
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1486:	19 82       	std	Y+1, r1	; 0x01
    SREG&=~(1<<7);
    1488:	af e5       	ldi	r26, 0x5F	; 95
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	ef e5       	ldi	r30, 0x5F	; 95
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8f 77       	andi	r24, 0x7F	; 127
    1494:	8c 93       	st	X, r24
    Local_enuErrorstate = ES_OK;
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	89 83       	std	Y+1, r24	; 0x01
			return Local_enuErrorstate;
    149a:	89 81       	ldd	r24, Y+1	; 0x01
}
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <EXTI_intialiation>:

void (*pfunINTFun0)(void)=NULL;
void (*pfunINTFun1)(void)=NULL;
void (*pfunINTFun2)(void)=NULL;

ES_t EXTI_intialiation(){
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	0f 92       	push	r0
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorstate = ES_NOK;
    14ae:	19 82       	std	Y+1, r1	; 0x01

	MCUCR &=~(15<<0); // CLEAR BIT 0 1 2 3 (INT0 & INT1)
    14b0:	a5 e5       	ldi	r26, 0x55	; 85
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e5 e5       	ldi	r30, 0x55	; 85
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	80 7f       	andi	r24, 0xF0	; 240
    14bc:	8c 93       	st	X, r24
#if INT0_MODE == FALLING_EDGE
	MCUCR|=FALLING_EDGE;
#elif  INT0_MODE == LOW_LEVEL
	MCUCR|=LOW_LEVEL;
#elif  INT0_MODE == RISING_EDGE
	MCUCR|=RISING_EDGE;
    14be:	a5 e5       	ldi	r26, 0x55	; 85
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e5 e5       	ldi	r30, 0x55	; 85
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	83 60       	ori	r24, 0x03	; 3
    14ca:	8c 93       	st	X, r24
#elif  INT1_MODE == LOW_LEVEL
	MCUCR|=(LOW_LEVEL<<2);
#elif  INT1_MODE == RISING_EDGE
	MCUCR|=(RISING_EDGE<<2);
#elif  INT1_MODE == ANY_LOGIC
	MCUCR|=(ANY_LOGIC<<2);
    14cc:	a5 e5       	ldi	r26, 0x55	; 85
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e5 e5       	ldi	r30, 0x55	; 85
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	84 60       	ori	r24, 0x04	; 4
    14d8:	8c 93       	st	X, r24
#endif


#if INT0_STATE == ACTIVE
	GICR |=(1<<6);
    14da:	ab e5       	ldi	r26, 0x5B	; 91
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	eb e5       	ldi	r30, 0x5B	; 91
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	80 64       	ori	r24, 0x40	; 64
    14e6:	8c 93       	st	X, r24
#endif



#if INT1_STATE == ACTIVE
	GICR |=(1<<7);
    14e8:	ab e5       	ldi	r26, 0x5B	; 91
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	eb e5       	ldi	r30, 0x5B	; 91
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	80 68       	ori	r24, 0x80	; 128
    14f4:	8c 93       	st	X, r24
#elif  INT1_STATE == DEACTIVE
	GICR &=~(1<<7);
#endif

#if INT2_STATE == ACTIVE
	GICR |=(1<<5);
    14f6:	ab e5       	ldi	r26, 0x5B	; 91
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	eb e5       	ldi	r30, 0x5B	; 91
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	80 62       	ori	r24, 0x20	; 32
    1502:	8c 93       	st	X, r24
#elif  INT2_STATE == DEACTIVE
	GICR &=~(1<<5);
#endif

	GIFR|=(7<<5);     //CLEAR FLAGS IN BIT 5,6,7
    1504:	aa e5       	ldi	r26, 0x5A	; 90
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	ea e5       	ldi	r30, 0x5A	; 90
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	80 6e       	ori	r24, 0xE0	; 224
    1510:	8c 93       	st	X, r24


		return Local_enuErrorstate;
    1512:	89 81       	ldd	r24, Y+1	; 0x01


}
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <EXTI_Enable_INT>:
ES_t  EXTI_Enable_INT(u8 Copy_u8EXTI_ID){
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <EXTI_Enable_INT+0x6>
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1528:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8EXTI_ID < 4)
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	84 30       	cpi	r24, 0x04	; 4
    152e:	68 f5       	brcc	.+90     	; 0x158a <EXTI_Enable_INT+0x6e>
		{
			if (Copy_u8EXTI_ID ==0)
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	88 23       	and	r24, r24
    1534:	41 f4       	brne	.+16     	; 0x1546 <EXTI_Enable_INT+0x2a>
			{

				GICR |= (1<<6);
    1536:	ab e5       	ldi	r26, 0x5B	; 91
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	eb e5       	ldi	r30, 0x5B	; 91
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 64       	ori	r24, 0x40	; 64
    1542:	8c 93       	st	X, r24
    1544:	20 c0       	rjmp	.+64     	; 0x1586 <EXTI_Enable_INT+0x6a>
			}
			else if (Copy_u8EXTI_ID ==1)
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	41 f4       	brne	.+16     	; 0x155c <EXTI_Enable_INT+0x40>
			{
				GICR |= (1<<7);
    154c:	ab e5       	ldi	r26, 0x5B	; 91
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	eb e5       	ldi	r30, 0x5B	; 91
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	80 68       	ori	r24, 0x80	; 128
    1558:	8c 93       	st	X, r24
    155a:	15 c0       	rjmp	.+42     	; 0x1586 <EXTI_Enable_INT+0x6a>
			}
			else if (Copy_u8EXTI_ID ==2)
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	82 30       	cpi	r24, 0x02	; 2
    1560:	41 f4       	brne	.+16     	; 0x1572 <EXTI_Enable_INT+0x56>
			{
				GICR |= (1<<5);
    1562:	ab e5       	ldi	r26, 0x5B	; 91
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	eb e5       	ldi	r30, 0x5B	; 91
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	80 62       	ori	r24, 0x20	; 32
    156e:	8c 93       	st	X, r24
    1570:	0a c0       	rjmp	.+20     	; 0x1586 <EXTI_Enable_INT+0x6a>
			}
			else if(Copy_u8EXTI_ID==GLOBAL){
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	39 f4       	brne	.+14     	; 0x1586 <EXTI_Enable_INT+0x6a>
			           SREG|= (1<<7);
    1578:	af e5       	ldi	r26, 0x5F	; 95
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	ef e5       	ldi	r30, 0x5F	; 95
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	80 68       	ori	r24, 0x80	; 128
    1584:	8c 93       	st	X, r24

	         }
			 Local_enuErrorstate = ES_OK;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorstate;
    158a:	89 81       	ldd	r24, Y+1	; 0x01
}
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <EXTI_Disable_INT>:
ES_t  EXTI_Disable_INT(u8 Copy_u8EXTI_ID){
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	00 d0       	rcall	.+0      	; 0x159c <EXTI_Disable_INT+0x6>
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    15a2:	19 82       	std	Y+1, r1	; 0x01
		if (Copy_u8EXTI_ID < 4)
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	84 30       	cpi	r24, 0x04	; 4
    15a8:	68 f5       	brcc	.+90     	; 0x1604 <EXTI_Disable_INT+0x6e>
			{
			if (Copy_u8EXTI_ID ==0)
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	88 23       	and	r24, r24
    15ae:	41 f4       	brne	.+16     	; 0x15c0 <EXTI_Disable_INT+0x2a>
							{

								GICR &= ~(1<<6);
    15b0:	ab e5       	ldi	r26, 0x5B	; 91
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	eb e5       	ldi	r30, 0x5B	; 91
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	8f 7b       	andi	r24, 0xBF	; 191
    15bc:	8c 93       	st	X, r24
    15be:	20 c0       	rjmp	.+64     	; 0x1600 <EXTI_Disable_INT+0x6a>
							}
							else if (Copy_u8EXTI_ID ==1)
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	41 f4       	brne	.+16     	; 0x15d6 <EXTI_Disable_INT+0x40>
							{
								GICR &=~(1<<7);
    15c6:	ab e5       	ldi	r26, 0x5B	; 91
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	eb e5       	ldi	r30, 0x5B	; 91
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	8f 77       	andi	r24, 0x7F	; 127
    15d2:	8c 93       	st	X, r24
    15d4:	15 c0       	rjmp	.+42     	; 0x1600 <EXTI_Disable_INT+0x6a>
							}
							else if (Copy_u8EXTI_ID ==2)
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	82 30       	cpi	r24, 0x02	; 2
    15da:	41 f4       	brne	.+16     	; 0x15ec <EXTI_Disable_INT+0x56>
							{
								GICR &=~(1<<5);
    15dc:	ab e5       	ldi	r26, 0x5B	; 91
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	eb e5       	ldi	r30, 0x5B	; 91
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	8f 7d       	andi	r24, 0xDF	; 223
    15e8:	8c 93       	st	X, r24
    15ea:	0a c0       	rjmp	.+20     	; 0x1600 <EXTI_Disable_INT+0x6a>
							}
							else if(Copy_u8EXTI_ID==GLOBAL){
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	39 f4       	brne	.+14     	; 0x1600 <EXTI_Disable_INT+0x6a>
                                    SREG&=~(1<<7);
    15f2:	af e5       	ldi	r26, 0x5F	; 95
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	ef e5       	ldi	r30, 0x5F	; 95
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	8f 77       	andi	r24, 0x7F	; 127
    15fe:	8c 93       	st	X, r24
							}
				 Local_enuErrorstate = ES_OK;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	89 83       	std	Y+1, r24	; 0x01
			}

		return Local_enuErrorstate;
    1604:	89 81       	ldd	r24, Y+1	; 0x01


}
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <EXTI_CallBack>:

ES_t  EXTI_CallBack(void (*Copy_fun_ptr) (void),u8 Copy_u8EXTI_ID ){
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <EXTI_CallBack+0x6>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <EXTI_CallBack+0x8>
    1618:	00 d0       	rcall	.+0      	; 0x161a <EXTI_CallBack+0xa>
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	9b 83       	std	Y+3, r25	; 0x03
    1620:	8a 83       	std	Y+2, r24	; 0x02
    1622:	6c 83       	std	Y+4, r22	; 0x04

	ES_t Local_enuErrorstate = ES_NOK;
    1624:	19 82       	std	Y+1, r1	; 0x01


	if (Copy_fun_ptr != NULL && Copy_u8EXTI_ID <3)
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	9b 81       	ldd	r25, Y+3	; 0x03
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	61 f1       	breq	.+88     	; 0x1686 <EXTI_CallBack+0x76>
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	83 30       	cpi	r24, 0x03	; 3
    1632:	48 f5       	brcc	.+82     	; 0x1686 <EXTI_CallBack+0x76>
		{
		switch(Copy_u8EXTI_ID){
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	3e 83       	std	Y+6, r19	; 0x06
    163c:	2d 83       	std	Y+5, r18	; 0x05
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	91 05       	cpc	r25, r1
    1646:	81 f0       	breq	.+32     	; 0x1668 <EXTI_CallBack+0x58>
    1648:	2d 81       	ldd	r18, Y+5	; 0x05
    164a:	3e 81       	ldd	r19, Y+6	; 0x06
    164c:	22 30       	cpi	r18, 0x02	; 2
    164e:	31 05       	cpc	r19, r1
    1650:	91 f0       	breq	.+36     	; 0x1676 <EXTI_CallBack+0x66>
    1652:	8d 81       	ldd	r24, Y+5	; 0x05
    1654:	9e 81       	ldd	r25, Y+6	; 0x06
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	a1 f4       	brne	.+40     	; 0x1682 <EXTI_CallBack+0x72>
		case INT0:
		      pfunINTFun0=Copy_fun_ptr;
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	9b 81       	ldd	r25, Y+3	; 0x03
    165e:	90 93 86 01 	sts	0x0186, r25
    1662:	80 93 85 01 	sts	0x0185, r24
    1666:	0d c0       	rjmp	.+26     	; 0x1682 <EXTI_CallBack+0x72>
		      break;
		case INT1:
				 pfunINTFun1=Copy_fun_ptr;
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	9b 81       	ldd	r25, Y+3	; 0x03
    166c:	90 93 88 01 	sts	0x0188, r25
    1670:	80 93 87 01 	sts	0x0187, r24
    1674:	06 c0       	rjmp	.+12     	; 0x1682 <EXTI_CallBack+0x72>
				 break;
		case INT2:
			 pfunINTFun2=Copy_fun_ptr;
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	9b 81       	ldd	r25, Y+3	; 0x03
    167a:	90 93 8a 01 	sts	0x018A, r25
    167e:	80 93 89 01 	sts	0x0189, r24
		     break;

		}
		      Local_enuErrorstate = ES_OK;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	89 83       	std	Y+1, r24	; 0x01

		}

			return Local_enuErrorstate;
    1686:	89 81       	ldd	r24, Y+1	; 0x01


}
    1688:	26 96       	adiw	r28, 0x06	; 6
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <__vector_1>:


ISR(VECT_INT0){
    169a:	1f 92       	push	r1
    169c:	0f 92       	push	r0
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	0f 92       	push	r0
    16a2:	11 24       	eor	r1, r1
    16a4:	2f 93       	push	r18
    16a6:	3f 93       	push	r19
    16a8:	4f 93       	push	r20
    16aa:	5f 93       	push	r21
    16ac:	6f 93       	push	r22
    16ae:	7f 93       	push	r23
    16b0:	8f 93       	push	r24
    16b2:	9f 93       	push	r25
    16b4:	af 93       	push	r26
    16b6:	bf 93       	push	r27
    16b8:	ef 93       	push	r30
    16ba:	ff 93       	push	r31
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
	if(pfunINTFun0!=NULL){
    16c4:	80 91 85 01 	lds	r24, 0x0185
    16c8:	90 91 86 01 	lds	r25, 0x0186
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	29 f0       	breq	.+10     	; 0x16da <__vector_1+0x40>
		pfunINTFun0();
    16d0:	e0 91 85 01 	lds	r30, 0x0185
    16d4:	f0 91 86 01 	lds	r31, 0x0186
    16d8:	09 95       	icall
	}

}
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	ff 91       	pop	r31
    16e0:	ef 91       	pop	r30
    16e2:	bf 91       	pop	r27
    16e4:	af 91       	pop	r26
    16e6:	9f 91       	pop	r25
    16e8:	8f 91       	pop	r24
    16ea:	7f 91       	pop	r23
    16ec:	6f 91       	pop	r22
    16ee:	5f 91       	pop	r21
    16f0:	4f 91       	pop	r20
    16f2:	3f 91       	pop	r19
    16f4:	2f 91       	pop	r18
    16f6:	0f 90       	pop	r0
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	0f 90       	pop	r0
    16fc:	1f 90       	pop	r1
    16fe:	18 95       	reti

00001700 <__vector_2>:


ISR(VECT_INT1){
    1700:	1f 92       	push	r1
    1702:	0f 92       	push	r0
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	0f 92       	push	r0
    1708:	11 24       	eor	r1, r1
    170a:	2f 93       	push	r18
    170c:	3f 93       	push	r19
    170e:	4f 93       	push	r20
    1710:	5f 93       	push	r21
    1712:	6f 93       	push	r22
    1714:	7f 93       	push	r23
    1716:	8f 93       	push	r24
    1718:	9f 93       	push	r25
    171a:	af 93       	push	r26
    171c:	bf 93       	push	r27
    171e:	ef 93       	push	r30
    1720:	ff 93       	push	r31
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
	if(pfunINTFun1!=NULL){
    172a:	80 91 87 01 	lds	r24, 0x0187
    172e:	90 91 88 01 	lds	r25, 0x0188
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	29 f0       	breq	.+10     	; 0x1740 <__vector_2+0x40>
		pfunINTFun1();
    1736:	e0 91 87 01 	lds	r30, 0x0187
    173a:	f0 91 88 01 	lds	r31, 0x0188
    173e:	09 95       	icall
	}

}
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	ff 91       	pop	r31
    1746:	ef 91       	pop	r30
    1748:	bf 91       	pop	r27
    174a:	af 91       	pop	r26
    174c:	9f 91       	pop	r25
    174e:	8f 91       	pop	r24
    1750:	7f 91       	pop	r23
    1752:	6f 91       	pop	r22
    1754:	5f 91       	pop	r21
    1756:	4f 91       	pop	r20
    1758:	3f 91       	pop	r19
    175a:	2f 91       	pop	r18
    175c:	0f 90       	pop	r0
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	0f 90       	pop	r0
    1762:	1f 90       	pop	r1
    1764:	18 95       	reti

00001766 <__vector_3>:


ISR(VECT_INT2){
    1766:	1f 92       	push	r1
    1768:	0f 92       	push	r0
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	0f 92       	push	r0
    176e:	11 24       	eor	r1, r1
    1770:	2f 93       	push	r18
    1772:	3f 93       	push	r19
    1774:	4f 93       	push	r20
    1776:	5f 93       	push	r21
    1778:	6f 93       	push	r22
    177a:	7f 93       	push	r23
    177c:	8f 93       	push	r24
    177e:	9f 93       	push	r25
    1780:	af 93       	push	r26
    1782:	bf 93       	push	r27
    1784:	ef 93       	push	r30
    1786:	ff 93       	push	r31
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
	if(pfunINTFun2!=NULL){
    1790:	80 91 89 01 	lds	r24, 0x0189
    1794:	90 91 8a 01 	lds	r25, 0x018A
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	29 f0       	breq	.+10     	; 0x17a6 <__vector_3+0x40>
		pfunINTFun2();
    179c:	e0 91 89 01 	lds	r30, 0x0189
    17a0:	f0 91 8a 01 	lds	r31, 0x018A
    17a4:	09 95       	icall
	}

}
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	ff 91       	pop	r31
    17ac:	ef 91       	pop	r30
    17ae:	bf 91       	pop	r27
    17b0:	af 91       	pop	r26
    17b2:	9f 91       	pop	r25
    17b4:	8f 91       	pop	r24
    17b6:	7f 91       	pop	r23
    17b8:	6f 91       	pop	r22
    17ba:	5f 91       	pop	r21
    17bc:	4f 91       	pop	r20
    17be:	3f 91       	pop	r19
    17c0:	2f 91       	pop	r18
    17c2:	0f 90       	pop	r0
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	0f 90       	pop	r0
    17c8:	1f 90       	pop	r1
    17ca:	18 95       	reti

000017cc <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	0f 92       	push	r0
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    17d6:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    17d8:	ea e3       	ldi	r30, 0x3A	; 58
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	8f ef       	ldi	r24, 0xFF	; 255
    17de:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    17e0:	e7 e3       	ldi	r30, 0x37	; 55
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	8f ef       	ldi	r24, 0xFF	; 255
    17e6:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    17e8:	e4 e3       	ldi	r30, 0x34	; 52
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	86 e9       	ldi	r24, 0x96	; 150
    17ee:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    17f0:	e1 e3       	ldi	r30, 0x31	; 49
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	82 e9       	ldi	r24, 0x92	; 146
    17f6:	80 83       	st	Z, r24

	PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    17f8:	eb e3       	ldi	r30, 0x3B	; 59
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	10 82       	st	Z, r1

	Local_enuErrorstate = ES_OK;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    1802:	89 81       	ldd	r24, Y+1	; 0x01
}
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	00 d0       	rcall	.+0      	; 0x1812 <DIO_enuSetPortDirection+0x6>
    1812:	00 d0       	rcall	.+0      	; 0x1814 <DIO_enuSetPortDirection+0x8>
    1814:	0f 92       	push	r0
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	8a 83       	std	Y+2, r24	; 0x02
    181c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    181e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	84 30       	cpi	r24, 0x04	; 4
    1824:	a8 f5       	brcc	.+106    	; 0x1890 <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3d 83       	std	Y+5, r19	; 0x05
    182e:	2c 83       	std	Y+4, r18	; 0x04
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	9d 81       	ldd	r25, Y+5	; 0x05
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	d1 f0       	breq	.+52     	; 0x186e <DIO_enuSetPortDirection+0x62>
    183a:	2c 81       	ldd	r18, Y+4	; 0x04
    183c:	3d 81       	ldd	r19, Y+5	; 0x05
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	2c f4       	brge	.+10     	; 0x184e <DIO_enuSetPortDirection+0x42>
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	9d 81       	ldd	r25, Y+5	; 0x05
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	61 f0       	breq	.+24     	; 0x1864 <DIO_enuSetPortDirection+0x58>
    184c:	1e c0       	rjmp	.+60     	; 0x188a <DIO_enuSetPortDirection+0x7e>
    184e:	2c 81       	ldd	r18, Y+4	; 0x04
    1850:	3d 81       	ldd	r19, Y+5	; 0x05
    1852:	22 30       	cpi	r18, 0x02	; 2
    1854:	31 05       	cpc	r19, r1
    1856:	81 f0       	breq	.+32     	; 0x1878 <DIO_enuSetPortDirection+0x6c>
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	9d 81       	ldd	r25, Y+5	; 0x05
    185c:	83 30       	cpi	r24, 0x03	; 3
    185e:	91 05       	cpc	r25, r1
    1860:	81 f0       	breq	.+32     	; 0x1882 <DIO_enuSetPortDirection+0x76>
    1862:	13 c0       	rjmp	.+38     	; 0x188a <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    1864:	ea e3       	ldi	r30, 0x3A	; 58
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	80 83       	st	Z, r24
    186c:	0e c0       	rjmp	.+28     	; 0x188a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    186e:	e7 e3       	ldi	r30, 0x37	; 55
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	80 83       	st	Z, r24
    1876:	09 c0       	rjmp	.+18     	; 0x188a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    1878:	e4 e3       	ldi	r30, 0x34	; 52
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	80 83       	st	Z, r24
    1880:	04 c0       	rjmp	.+8      	; 0x188a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    1882:	e1 e3       	ldi	r30, 0x31	; 49
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1894:	89 81       	ldd	r24, Y+1	; 0x01
}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <DIO_enuSetPortValue+0x6>
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <DIO_enuSetPortValue+0x8>
    18ae:	0f 92       	push	r0
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	8a 83       	std	Y+2, r24	; 0x02
    18b6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    18b8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	84 30       	cpi	r24, 0x04	; 4
    18be:	a8 f5       	brcc	.+106    	; 0x192a <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	3d 83       	std	Y+5, r19	; 0x05
    18c8:	2c 83       	std	Y+4, r18	; 0x04
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	9d 81       	ldd	r25, Y+5	; 0x05
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	91 05       	cpc	r25, r1
    18d2:	d1 f0       	breq	.+52     	; 0x1908 <DIO_enuSetPortValue+0x62>
    18d4:	2c 81       	ldd	r18, Y+4	; 0x04
    18d6:	3d 81       	ldd	r19, Y+5	; 0x05
    18d8:	22 30       	cpi	r18, 0x02	; 2
    18da:	31 05       	cpc	r19, r1
    18dc:	2c f4       	brge	.+10     	; 0x18e8 <DIO_enuSetPortValue+0x42>
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	9d 81       	ldd	r25, Y+5	; 0x05
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	61 f0       	breq	.+24     	; 0x18fe <DIO_enuSetPortValue+0x58>
    18e6:	1e c0       	rjmp	.+60     	; 0x1924 <DIO_enuSetPortValue+0x7e>
    18e8:	2c 81       	ldd	r18, Y+4	; 0x04
    18ea:	3d 81       	ldd	r19, Y+5	; 0x05
    18ec:	22 30       	cpi	r18, 0x02	; 2
    18ee:	31 05       	cpc	r19, r1
    18f0:	81 f0       	breq	.+32     	; 0x1912 <DIO_enuSetPortValue+0x6c>
    18f2:	8c 81       	ldd	r24, Y+4	; 0x04
    18f4:	9d 81       	ldd	r25, Y+5	; 0x05
    18f6:	83 30       	cpi	r24, 0x03	; 3
    18f8:	91 05       	cpc	r25, r1
    18fa:	81 f0       	breq	.+32     	; 0x191c <DIO_enuSetPortValue+0x76>
    18fc:	13 c0       	rjmp	.+38     	; 0x1924 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    18fe:	eb e3       	ldi	r30, 0x3B	; 59
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	80 83       	st	Z, r24
    1906:	0e c0       	rjmp	.+28     	; 0x1924 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    1908:	e8 e3       	ldi	r30, 0x38	; 56
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	80 83       	st	Z, r24
    1910:	09 c0       	rjmp	.+18     	; 0x1924 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    1912:	e5 e3       	ldi	r30, 0x35	; 53
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	80 83       	st	Z, r24
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    191c:	e2 e3       	ldi	r30, 0x32	; 50
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	02 c0       	rjmp	.+4      	; 0x192e <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    192a:	83 e0       	ldi	r24, 0x03	; 3
    192c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    192e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <DIO_enuTogPortValue+0x6>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <DIO_enuTogPortValue+0x8>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    194e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	84 30       	cpi	r24, 0x04	; 4
    1954:	08 f0       	brcs	.+2      	; 0x1958 <DIO_enuTogPortValue+0x18>
    1956:	41 c0       	rjmp	.+130    	; 0x19da <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	3c 83       	std	Y+4, r19	; 0x04
    1960:	2b 83       	std	Y+3, r18	; 0x03
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	91 05       	cpc	r25, r1
    196a:	e9 f0       	breq	.+58     	; 0x19a6 <DIO_enuTogPortValue+0x66>
    196c:	2b 81       	ldd	r18, Y+3	; 0x03
    196e:	3c 81       	ldd	r19, Y+4	; 0x04
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	2c f4       	brge	.+10     	; 0x1980 <DIO_enuTogPortValue+0x40>
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	61 f0       	breq	.+24     	; 0x1996 <DIO_enuTogPortValue+0x56>
    197e:	2a c0       	rjmp	.+84     	; 0x19d4 <DIO_enuTogPortValue+0x94>
    1980:	2b 81       	ldd	r18, Y+3	; 0x03
    1982:	3c 81       	ldd	r19, Y+4	; 0x04
    1984:	22 30       	cpi	r18, 0x02	; 2
    1986:	31 05       	cpc	r19, r1
    1988:	b1 f0       	breq	.+44     	; 0x19b6 <DIO_enuTogPortValue+0x76>
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	9c 81       	ldd	r25, Y+4	; 0x04
    198e:	83 30       	cpi	r24, 0x03	; 3
    1990:	91 05       	cpc	r25, r1
    1992:	c9 f0       	breq	.+50     	; 0x19c6 <DIO_enuTogPortValue+0x86>
    1994:	1f c0       	rjmp	.+62     	; 0x19d4 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    1996:	ab e3       	ldi	r26, 0x3B	; 59
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	eb e3       	ldi	r30, 0x3B	; 59
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	80 95       	com	r24
    19a2:	8c 93       	st	X, r24
    19a4:	17 c0       	rjmp	.+46     	; 0x19d4 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    19a6:	a8 e3       	ldi	r26, 0x38	; 56
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e8 e3       	ldi	r30, 0x38	; 56
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	80 95       	com	r24
    19b2:	8c 93       	st	X, r24
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    19b6:	a5 e3       	ldi	r26, 0x35	; 53
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e5 e3       	ldi	r30, 0x35	; 53
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	80 95       	com	r24
    19c2:	8c 93       	st	X, r24
    19c4:	07 c0       	rjmp	.+14     	; 0x19d4 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    19c6:	a2 e3       	ldi	r26, 0x32	; 50
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e2 e3       	ldi	r30, 0x32	; 50
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	80 95       	com	r24
    19d2:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    19de:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <DIO_enuGetPortValue+0x6>
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <DIO_enuGetPortValue+0x8>
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <DIO_enuGetPortValue+0xa>
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	8a 83       	std	Y+2, r24	; 0x02
    19fe:	7c 83       	std	Y+4, r23	; 0x04
    1a00:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1a02:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	9c 81       	ldd	r25, Y+4	; 0x04
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <DIO_enuGetPortValue+0x20>
    1a0c:	43 c0       	rjmp	.+134    	; 0x1a94 <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	84 30       	cpi	r24, 0x04	; 4
    1a12:	e8 f5       	brcc	.+122    	; 0x1a8e <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	3e 83       	std	Y+6, r19	; 0x06
    1a1c:	2d 83       	std	Y+5, r18	; 0x05
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	81 30       	cpi	r24, 0x01	; 1
    1a24:	91 05       	cpc	r25, r1
    1a26:	e1 f0       	breq	.+56     	; 0x1a60 <DIO_enuGetPortValue+0x72>
    1a28:	2d 81       	ldd	r18, Y+5	; 0x05
    1a2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a2c:	22 30       	cpi	r18, 0x02	; 2
    1a2e:	31 05       	cpc	r19, r1
    1a30:	2c f4       	brge	.+10     	; 0x1a3c <DIO_enuGetPortValue+0x4e>
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	61 f0       	breq	.+24     	; 0x1a52 <DIO_enuGetPortValue+0x64>
    1a3a:	26 c0       	rjmp	.+76     	; 0x1a88 <DIO_enuGetPortValue+0x9a>
    1a3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a3e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a40:	22 30       	cpi	r18, 0x02	; 2
    1a42:	31 05       	cpc	r19, r1
    1a44:	a1 f0       	breq	.+40     	; 0x1a6e <DIO_enuGetPortValue+0x80>
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
    1a48:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4a:	83 30       	cpi	r24, 0x03	; 3
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	b1 f0       	breq	.+44     	; 0x1a7c <DIO_enuGetPortValue+0x8e>
    1a50:	1b c0       	rjmp	.+54     	; 0x1a88 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    1a52:	e9 e3       	ldi	r30, 0x39	; 57
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	eb 81       	ldd	r30, Y+3	; 0x03
    1a5a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a5c:	80 83       	st	Z, r24
    1a5e:	14 c0       	rjmp	.+40     	; 0x1a88 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    1a60:	e6 e3       	ldi	r30, 0x36	; 54
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	eb 81       	ldd	r30, Y+3	; 0x03
    1a68:	fc 81       	ldd	r31, Y+4	; 0x04
    1a6a:	80 83       	st	Z, r24
    1a6c:	0d c0       	rjmp	.+26     	; 0x1a88 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    1a6e:	e3 e3       	ldi	r30, 0x33	; 51
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	eb 81       	ldd	r30, Y+3	; 0x03
    1a76:	fc 81       	ldd	r31, Y+4	; 0x04
    1a78:	80 83       	st	Z, r24
    1a7a:	06 c0       	rjmp	.+12     	; 0x1a88 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    1a7c:	e0 e3       	ldi	r30, 0x30	; 48
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	eb 81       	ldd	r30, Y+3	; 0x03
    1a84:	fc 81       	ldd	r31, Y+4	; 0x04
    1a86:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	05 c0       	rjmp	.+10     	; 0x1a98 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    1a8e:	83 e0       	ldi	r24, 0x03	; 3
    1a90:	89 83       	std	Y+1, r24	; 0x01
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9a:	26 96       	adiw	r28, 0x06	; 6
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <DIO_enuSetPinDirection+0x6>
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <DIO_enuSetPinDirection+0x8>
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <DIO_enuSetPinDirection+0xa>
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	8a 83       	std	Y+2, r24	; 0x02
    1abc:	6b 83       	std	Y+3, r22	; 0x03
    1abe:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1ac0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	84 30       	cpi	r24, 0x04	; 4
    1ac6:	08 f0       	brcs	.+2      	; 0x1aca <DIO_enuSetPinDirection+0x1e>
    1ac8:	d1 c0       	rjmp	.+418    	; 0x1c6c <DIO_enuSetPinDirection+0x1c0>
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	88 30       	cpi	r24, 0x08	; 8
    1ace:	08 f0       	brcs	.+2      	; 0x1ad2 <DIO_enuSetPinDirection+0x26>
    1ad0:	cd c0       	rjmp	.+410    	; 0x1c6c <DIO_enuSetPinDirection+0x1c0>
    1ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad4:	82 30       	cpi	r24, 0x02	; 2
    1ad6:	08 f0       	brcs	.+2      	; 0x1ada <DIO_enuSetPinDirection+0x2e>
    1ad8:	c9 c0       	rjmp	.+402    	; 0x1c6c <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	3e 83       	std	Y+6, r19	; 0x06
    1ae2:	2d 83       	std	Y+5, r18	; 0x05
    1ae4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ae6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ae8:	61 30       	cpi	r22, 0x01	; 1
    1aea:	71 05       	cpc	r23, r1
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <DIO_enuSetPinDirection+0x44>
    1aee:	41 c0       	rjmp	.+130    	; 0x1b72 <DIO_enuSetPinDirection+0xc6>
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	9e 81       	ldd	r25, Y+6	; 0x06
    1af4:	82 30       	cpi	r24, 0x02	; 2
    1af6:	91 05       	cpc	r25, r1
    1af8:	34 f4       	brge	.+12     	; 0x1b06 <DIO_enuSetPinDirection+0x5a>
    1afa:	2d 81       	ldd	r18, Y+5	; 0x05
    1afc:	3e 81       	ldd	r19, Y+6	; 0x06
    1afe:	21 15       	cp	r18, r1
    1b00:	31 05       	cpc	r19, r1
    1b02:	71 f0       	breq	.+28     	; 0x1b20 <DIO_enuSetPinDirection+0x74>
    1b04:	b0 c0       	rjmp	.+352    	; 0x1c66 <DIO_enuSetPinDirection+0x1ba>
    1b06:	6d 81       	ldd	r22, Y+5	; 0x05
    1b08:	7e 81       	ldd	r23, Y+6	; 0x06
    1b0a:	62 30       	cpi	r22, 0x02	; 2
    1b0c:	71 05       	cpc	r23, r1
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <DIO_enuSetPinDirection+0x66>
    1b10:	59 c0       	rjmp	.+178    	; 0x1bc4 <DIO_enuSetPinDirection+0x118>
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	83 30       	cpi	r24, 0x03	; 3
    1b18:	91 05       	cpc	r25, r1
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <DIO_enuSetPinDirection+0x72>
    1b1c:	7c c0       	rjmp	.+248    	; 0x1c16 <DIO_enuSetPinDirection+0x16a>
    1b1e:	a3 c0       	rjmp	.+326    	; 0x1c66 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1b20:	aa e3       	ldi	r26, 0x3A	; 58
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	ea e3       	ldi	r30, 0x3A	; 58
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	48 2f       	mov	r20, r24
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <DIO_enuSetPinDirection+0x90>
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	2a 95       	dec	r18
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <DIO_enuSetPinDirection+0x8c>
    1b40:	80 95       	com	r24
    1b42:	84 23       	and	r24, r20
    1b44:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    1b46:	aa e3       	ldi	r26, 0x3A	; 58
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	ea e3       	ldi	r30, 0x3A	; 58
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	48 2f       	mov	r20, r24
    1b52:	8c 81       	ldd	r24, Y+4	; 0x04
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	b9 01       	movw	r22, r18
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <DIO_enuSetPinDirection+0xba>
    1b62:	66 0f       	add	r22, r22
    1b64:	77 1f       	adc	r23, r23
    1b66:	8a 95       	dec	r24
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <DIO_enuSetPinDirection+0xb6>
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	84 2b       	or	r24, r20
    1b6e:	8c 93       	st	X, r24
    1b70:	7a c0       	rjmp	.+244    	; 0x1c66 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1b72:	a7 e3       	ldi	r26, 0x37	; 55
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e7 e3       	ldi	r30, 0x37	; 55
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <DIO_enuSetPinDirection+0xe2>
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	2a 95       	dec	r18
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <DIO_enuSetPinDirection+0xde>
    1b92:	80 95       	com	r24
    1b94:	84 23       	and	r24, r20
    1b96:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    1b98:	a7 e3       	ldi	r26, 0x37	; 55
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e7 e3       	ldi	r30, 0x37	; 55
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	48 2f       	mov	r20, r24
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	b9 01       	movw	r22, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <DIO_enuSetPinDirection+0x10c>
    1bb4:	66 0f       	add	r22, r22
    1bb6:	77 1f       	adc	r23, r23
    1bb8:	8a 95       	dec	r24
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <DIO_enuSetPinDirection+0x108>
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	84 2b       	or	r24, r20
    1bc0:	8c 93       	st	X, r24
    1bc2:	51 c0       	rjmp	.+162    	; 0x1c66 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1bc4:	a4 e3       	ldi	r26, 0x34	; 52
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e4 e3       	ldi	r30, 0x34	; 52
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	48 2f       	mov	r20, r24
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <DIO_enuSetPinDirection+0x134>
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	2a 95       	dec	r18
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <DIO_enuSetPinDirection+0x130>
    1be4:	80 95       	com	r24
    1be6:	84 23       	and	r24, r20
    1be8:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    1bea:	a4 e3       	ldi	r26, 0x34	; 52
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e4 e3       	ldi	r30, 0x34	; 52
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	48 2f       	mov	r20, r24
    1bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	88 2f       	mov	r24, r24
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	b9 01       	movw	r22, r18
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <DIO_enuSetPinDirection+0x15e>
    1c06:	66 0f       	add	r22, r22
    1c08:	77 1f       	adc	r23, r23
    1c0a:	8a 95       	dec	r24
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <DIO_enuSetPinDirection+0x15a>
    1c0e:	cb 01       	movw	r24, r22
    1c10:	84 2b       	or	r24, r20
    1c12:	8c 93       	st	X, r24
    1c14:	28 c0       	rjmp	.+80     	; 0x1c66 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1c16:	a1 e3       	ldi	r26, 0x31	; 49
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e1 e3       	ldi	r30, 0x31	; 49
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <DIO_enuSetPinDirection+0x186>
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	2a 95       	dec	r18
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <DIO_enuSetPinDirection+0x182>
    1c36:	80 95       	com	r24
    1c38:	84 23       	and	r24, r20
    1c3a:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    1c3c:	a1 e3       	ldi	r26, 0x31	; 49
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e1 e3       	ldi	r30, 0x31	; 49
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	88 2f       	mov	r24, r24
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	b9 01       	movw	r22, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <DIO_enuSetPinDirection+0x1b0>
    1c58:	66 0f       	add	r22, r22
    1c5a:	77 1f       	adc	r23, r23
    1c5c:	8a 95       	dec	r24
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <DIO_enuSetPinDirection+0x1ac>
    1c60:	cb 01       	movw	r24, r22
    1c62:	84 2b       	or	r24, r20
    1c64:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1c6c:	83 e0       	ldi	r24, 0x03	; 3
    1c6e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c72:	26 96       	adiw	r28, 0x06	; 6
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <DIO_enuSetPinValue+0x6>
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <DIO_enuSetPinValue+0x8>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <DIO_enuSetPinValue+0xa>
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	8a 83       	std	Y+2, r24	; 0x02
    1c94:	6b 83       	std	Y+3, r22	; 0x03
    1c96:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1c98:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	84 30       	cpi	r24, 0x04	; 4
    1c9e:	08 f0       	brcs	.+2      	; 0x1ca2 <DIO_enuSetPinValue+0x1e>
    1ca0:	d1 c0       	rjmp	.+418    	; 0x1e44 <DIO_enuSetPinValue+0x1c0>
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	88 30       	cpi	r24, 0x08	; 8
    1ca6:	08 f0       	brcs	.+2      	; 0x1caa <DIO_enuSetPinValue+0x26>
    1ca8:	cd c0       	rjmp	.+410    	; 0x1e44 <DIO_enuSetPinValue+0x1c0>
    1caa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cac:	82 30       	cpi	r24, 0x02	; 2
    1cae:	08 f0       	brcs	.+2      	; 0x1cb2 <DIO_enuSetPinValue+0x2e>
    1cb0:	c9 c0       	rjmp	.+402    	; 0x1e44 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	3e 83       	std	Y+6, r19	; 0x06
    1cba:	2d 83       	std	Y+5, r18	; 0x05
    1cbc:	6d 81       	ldd	r22, Y+5	; 0x05
    1cbe:	7e 81       	ldd	r23, Y+6	; 0x06
    1cc0:	61 30       	cpi	r22, 0x01	; 1
    1cc2:	71 05       	cpc	r23, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <DIO_enuSetPinValue+0x44>
    1cc6:	41 c0       	rjmp	.+130    	; 0x1d4a <DIO_enuSetPinValue+0xc6>
    1cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ccc:	82 30       	cpi	r24, 0x02	; 2
    1cce:	91 05       	cpc	r25, r1
    1cd0:	34 f4       	brge	.+12     	; 0x1cde <DIO_enuSetPinValue+0x5a>
    1cd2:	2d 81       	ldd	r18, Y+5	; 0x05
    1cd4:	3e 81       	ldd	r19, Y+6	; 0x06
    1cd6:	21 15       	cp	r18, r1
    1cd8:	31 05       	cpc	r19, r1
    1cda:	71 f0       	breq	.+28     	; 0x1cf8 <DIO_enuSetPinValue+0x74>
    1cdc:	b0 c0       	rjmp	.+352    	; 0x1e3e <DIO_enuSetPinValue+0x1ba>
    1cde:	6d 81       	ldd	r22, Y+5	; 0x05
    1ce0:	7e 81       	ldd	r23, Y+6	; 0x06
    1ce2:	62 30       	cpi	r22, 0x02	; 2
    1ce4:	71 05       	cpc	r23, r1
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <DIO_enuSetPinValue+0x66>
    1ce8:	59 c0       	rjmp	.+178    	; 0x1d9c <DIO_enuSetPinValue+0x118>
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	83 30       	cpi	r24, 0x03	; 3
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <DIO_enuSetPinValue+0x72>
    1cf4:	7c c0       	rjmp	.+248    	; 0x1dee <DIO_enuSetPinValue+0x16a>
    1cf6:	a3 c0       	rjmp	.+326    	; 0x1e3e <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1cf8:	ab e3       	ldi	r26, 0x3B	; 59
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	eb e3       	ldi	r30, 0x3B	; 59
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	48 2f       	mov	r20, r24
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <DIO_enuSetPinValue+0x90>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	2a 95       	dec	r18
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <DIO_enuSetPinValue+0x8c>
    1d18:	80 95       	com	r24
    1d1a:	84 23       	and	r24, r20
    1d1c:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    1d1e:	ab e3       	ldi	r26, 0x3B	; 59
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	eb e3       	ldi	r30, 0x3B	; 59
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	88 2f       	mov	r24, r24
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	b9 01       	movw	r22, r18
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <DIO_enuSetPinValue+0xba>
    1d3a:	66 0f       	add	r22, r22
    1d3c:	77 1f       	adc	r23, r23
    1d3e:	8a 95       	dec	r24
    1d40:	e2 f7       	brpl	.-8      	; 0x1d3a <DIO_enuSetPinValue+0xb6>
    1d42:	cb 01       	movw	r24, r22
    1d44:	84 2b       	or	r24, r20
    1d46:	8c 93       	st	X, r24
    1d48:	7a c0       	rjmp	.+244    	; 0x1e3e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1d4a:	a8 e3       	ldi	r26, 0x38	; 56
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e8 e3       	ldi	r30, 0x38	; 56
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	48 2f       	mov	r20, r24
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <DIO_enuSetPinValue+0xe2>
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	2a 95       	dec	r18
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <DIO_enuSetPinValue+0xde>
    1d6a:	80 95       	com	r24
    1d6c:	84 23       	and	r24, r20
    1d6e:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    1d70:	a8 e3       	ldi	r26, 0x38	; 56
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e8 e3       	ldi	r30, 0x38	; 56
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	48 2f       	mov	r20, r24
    1d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	b9 01       	movw	r22, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <DIO_enuSetPinValue+0x10c>
    1d8c:	66 0f       	add	r22, r22
    1d8e:	77 1f       	adc	r23, r23
    1d90:	8a 95       	dec	r24
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <DIO_enuSetPinValue+0x108>
    1d94:	cb 01       	movw	r24, r22
    1d96:	84 2b       	or	r24, r20
    1d98:	8c 93       	st	X, r24
    1d9a:	51 c0       	rjmp	.+162    	; 0x1e3e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1d9c:	a5 e3       	ldi	r26, 0x35	; 53
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e5 e3       	ldi	r30, 0x35	; 53
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	48 2f       	mov	r20, r24
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <DIO_enuSetPinValue+0x134>
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	2a 95       	dec	r18
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <DIO_enuSetPinValue+0x130>
    1dbc:	80 95       	com	r24
    1dbe:	84 23       	and	r24, r20
    1dc0:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    1dc2:	a5 e3       	ldi	r26, 0x35	; 53
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e5 e3       	ldi	r30, 0x35	; 53
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	48 2f       	mov	r20, r24
    1dce:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	88 2f       	mov	r24, r24
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	b9 01       	movw	r22, r18
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <DIO_enuSetPinValue+0x15e>
    1dde:	66 0f       	add	r22, r22
    1de0:	77 1f       	adc	r23, r23
    1de2:	8a 95       	dec	r24
    1de4:	e2 f7       	brpl	.-8      	; 0x1dde <DIO_enuSetPinValue+0x15a>
    1de6:	cb 01       	movw	r24, r22
    1de8:	84 2b       	or	r24, r20
    1dea:	8c 93       	st	X, r24
    1dec:	28 c0       	rjmp	.+80     	; 0x1e3e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1dee:	a2 e3       	ldi	r26, 0x32	; 50
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e2 e3       	ldi	r30, 0x32	; 50
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	48 2f       	mov	r20, r24
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <DIO_enuSetPinValue+0x186>
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	2a 95       	dec	r18
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <DIO_enuSetPinValue+0x182>
    1e0e:	80 95       	com	r24
    1e10:	84 23       	and	r24, r20
    1e12:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    1e14:	a2 e3       	ldi	r26, 0x32	; 50
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e2 e3       	ldi	r30, 0x32	; 50
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	48 2f       	mov	r20, r24
    1e20:	8c 81       	ldd	r24, Y+4	; 0x04
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	88 2f       	mov	r24, r24
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	b9 01       	movw	r22, r18
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <DIO_enuSetPinValue+0x1b0>
    1e30:	66 0f       	add	r22, r22
    1e32:	77 1f       	adc	r23, r23
    1e34:	8a 95       	dec	r24
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <DIO_enuSetPinValue+0x1ac>
    1e38:	cb 01       	movw	r24, r22
    1e3a:	84 2b       	or	r24, r20
    1e3c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1e44:	83 e0       	ldi	r24, 0x03	; 3
    1e46:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e4a:	26 96       	adiw	r28, 0x06	; 6
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <DIO_enuTogPinValue+0x6>
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <DIO_enuTogPinValue+0x8>
    1e64:	0f 92       	push	r0
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	8a 83       	std	Y+2, r24	; 0x02
    1e6c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1e6e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	84 30       	cpi	r24, 0x04	; 4
    1e74:	08 f0       	brcs	.+2      	; 0x1e78 <DIO_enuTogPinValue+0x1c>
    1e76:	75 c0       	rjmp	.+234    	; 0x1f62 <DIO_enuTogPinValue+0x106>
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	88 30       	cpi	r24, 0x08	; 8
    1e7c:	08 f0       	brcs	.+2      	; 0x1e80 <DIO_enuTogPinValue+0x24>
    1e7e:	71 c0       	rjmp	.+226    	; 0x1f62 <DIO_enuTogPinValue+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	3d 83       	std	Y+5, r19	; 0x05
    1e88:	2c 83       	std	Y+4, r18	; 0x04
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	91 05       	cpc	r25, r1
    1e92:	49 f1       	breq	.+82     	; 0x1ee6 <DIO_enuTogPinValue+0x8a>
    1e94:	2c 81       	ldd	r18, Y+4	; 0x04
    1e96:	3d 81       	ldd	r19, Y+5	; 0x05
    1e98:	22 30       	cpi	r18, 0x02	; 2
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <DIO_enuTogPinValue+0x4c>
    1e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	61 f0       	breq	.+24     	; 0x1ebe <DIO_enuTogPinValue+0x62>
    1ea6:	5a c0       	rjmp	.+180    	; 0x1f5c <DIO_enuTogPinValue+0x100>
    1ea8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eaa:	3d 81       	ldd	r19, Y+5	; 0x05
    1eac:	22 30       	cpi	r18, 0x02	; 2
    1eae:	31 05       	cpc	r19, r1
    1eb0:	71 f1       	breq	.+92     	; 0x1f0e <DIO_enuTogPinValue+0xb2>
    1eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb6:	83 30       	cpi	r24, 0x03	; 3
    1eb8:	91 05       	cpc	r25, r1
    1eba:	e9 f1       	breq	.+122    	; 0x1f36 <DIO_enuTogPinValue+0xda>
    1ebc:	4f c0       	rjmp	.+158    	; 0x1f5c <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1ebe:	ab e3       	ldi	r26, 0x3B	; 59
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	eb e3       	ldi	r30, 0x3B	; 59
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	48 2f       	mov	r20, r24
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	02 2e       	mov	r0, r18
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <DIO_enuTogPinValue+0x80>
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	0a 94       	dec	r0
    1ede:	e2 f7       	brpl	.-8      	; 0x1ed8 <DIO_enuTogPinValue+0x7c>
    1ee0:	84 27       	eor	r24, r20
    1ee2:	8c 93       	st	X, r24
    1ee4:	3b c0       	rjmp	.+118    	; 0x1f5c <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1ee6:	a8 e3       	ldi	r26, 0x38	; 56
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e8 e3       	ldi	r30, 0x38	; 56
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	48 2f       	mov	r20, r24
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	02 2e       	mov	r0, r18
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <DIO_enuTogPinValue+0xa8>
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	0a 94       	dec	r0
    1f06:	e2 f7       	brpl	.-8      	; 0x1f00 <DIO_enuTogPinValue+0xa4>
    1f08:	84 27       	eor	r24, r20
    1f0a:	8c 93       	st	X, r24
    1f0c:	27 c0       	rjmp	.+78     	; 0x1f5c <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1f0e:	a5 e3       	ldi	r26, 0x35	; 53
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e5 e3       	ldi	r30, 0x35	; 53
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	48 2f       	mov	r20, r24
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	02 2e       	mov	r0, r18
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <DIO_enuTogPinValue+0xd0>
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	0a 94       	dec	r0
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <DIO_enuTogPinValue+0xcc>
    1f30:	84 27       	eor	r24, r20
    1f32:	8c 93       	st	X, r24
    1f34:	13 c0       	rjmp	.+38     	; 0x1f5c <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1f36:	a2 e3       	ldi	r26, 0x32	; 50
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e2 e3       	ldi	r30, 0x32	; 50
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	48 2f       	mov	r20, r24
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	02 2e       	mov	r0, r18
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <DIO_enuTogPinValue+0xf8>
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	0a 94       	dec	r0
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <DIO_enuTogPinValue+0xf4>
    1f58:	84 27       	eor	r24, r20
    1f5a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1f62:	83 e0       	ldi	r24, 0x03	; 3
    1f64:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	27 97       	sbiw	r28, 0x07	; 7
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	8a 83       	std	Y+2, r24	; 0x02
    1f8e:	6b 83       	std	Y+3, r22	; 0x03
    1f90:	5d 83       	std	Y+5, r21	; 0x05
    1f92:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1f94:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    1f96:	8c 81       	ldd	r24, Y+4	; 0x04
    1f98:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <DIO_enuGetPinValue+0x28>
    1f9e:	7e c0       	rjmp	.+252    	; 0x209c <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	84 30       	cpi	r24, 0x04	; 4
    1fa4:	08 f0       	brcs	.+2      	; 0x1fa8 <DIO_enuGetPinValue+0x30>
    1fa6:	77 c0       	rjmp	.+238    	; 0x2096 <DIO_enuGetPinValue+0x11e>
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	88 30       	cpi	r24, 0x08	; 8
    1fac:	08 f0       	brcs	.+2      	; 0x1fb0 <DIO_enuGetPinValue+0x38>
    1fae:	73 c0       	rjmp	.+230    	; 0x2096 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	3f 83       	std	Y+7, r19	; 0x07
    1fb8:	2e 83       	std	Y+6, r18	; 0x06
    1fba:	4e 81       	ldd	r20, Y+6	; 0x06
    1fbc:	5f 81       	ldd	r21, Y+7	; 0x07
    1fbe:	41 30       	cpi	r20, 0x01	; 1
    1fc0:	51 05       	cpc	r21, r1
    1fc2:	59 f1       	breq	.+86     	; 0x201a <DIO_enuGetPinValue+0xa2>
    1fc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc8:	82 30       	cpi	r24, 0x02	; 2
    1fca:	91 05       	cpc	r25, r1
    1fcc:	34 f4       	brge	.+12     	; 0x1fda <DIO_enuGetPinValue+0x62>
    1fce:	2e 81       	ldd	r18, Y+6	; 0x06
    1fd0:	3f 81       	ldd	r19, Y+7	; 0x07
    1fd2:	21 15       	cp	r18, r1
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	69 f0       	breq	.+26     	; 0x1ff2 <DIO_enuGetPinValue+0x7a>
    1fd8:	5b c0       	rjmp	.+182    	; 0x2090 <DIO_enuGetPinValue+0x118>
    1fda:	4e 81       	ldd	r20, Y+6	; 0x06
    1fdc:	5f 81       	ldd	r21, Y+7	; 0x07
    1fde:	42 30       	cpi	r20, 0x02	; 2
    1fe0:	51 05       	cpc	r21, r1
    1fe2:	79 f1       	breq	.+94     	; 0x2042 <DIO_enuGetPinValue+0xca>
    1fe4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe8:	83 30       	cpi	r24, 0x03	; 3
    1fea:	91 05       	cpc	r25, r1
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <DIO_enuGetPinValue+0x78>
    1fee:	3d c0       	rjmp	.+122    	; 0x206a <DIO_enuGetPinValue+0xf2>
    1ff0:	4f c0       	rjmp	.+158    	; 0x2090 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    1ff2:	e9 e3       	ldi	r30, 0x39	; 57
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	a9 01       	movw	r20, r18
    2004:	02 c0       	rjmp	.+4      	; 0x200a <DIO_enuGetPinValue+0x92>
    2006:	55 95       	asr	r21
    2008:	47 95       	ror	r20
    200a:	8a 95       	dec	r24
    200c:	e2 f7       	brpl	.-8      	; 0x2006 <DIO_enuGetPinValue+0x8e>
    200e:	ca 01       	movw	r24, r20
    2010:	81 70       	andi	r24, 0x01	; 1
    2012:	ec 81       	ldd	r30, Y+4	; 0x04
    2014:	fd 81       	ldd	r31, Y+5	; 0x05
    2016:	80 83       	st	Z, r24
    2018:	3b c0       	rjmp	.+118    	; 0x2090 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    201a:	e6 e3       	ldi	r30, 0x36	; 54
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	88 2f       	mov	r24, r24
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a9 01       	movw	r20, r18
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <DIO_enuGetPinValue+0xba>
    202e:	55 95       	asr	r21
    2030:	47 95       	ror	r20
    2032:	8a 95       	dec	r24
    2034:	e2 f7       	brpl	.-8      	; 0x202e <DIO_enuGetPinValue+0xb6>
    2036:	ca 01       	movw	r24, r20
    2038:	81 70       	andi	r24, 0x01	; 1
    203a:	ec 81       	ldd	r30, Y+4	; 0x04
    203c:	fd 81       	ldd	r31, Y+5	; 0x05
    203e:	80 83       	st	Z, r24
    2040:	27 c0       	rjmp	.+78     	; 0x2090 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    2042:	e3 e3       	ldi	r30, 0x33	; 51
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a9 01       	movw	r20, r18
    2054:	02 c0       	rjmp	.+4      	; 0x205a <DIO_enuGetPinValue+0xe2>
    2056:	55 95       	asr	r21
    2058:	47 95       	ror	r20
    205a:	8a 95       	dec	r24
    205c:	e2 f7       	brpl	.-8      	; 0x2056 <DIO_enuGetPinValue+0xde>
    205e:	ca 01       	movw	r24, r20
    2060:	81 70       	andi	r24, 0x01	; 1
    2062:	ec 81       	ldd	r30, Y+4	; 0x04
    2064:	fd 81       	ldd	r31, Y+5	; 0x05
    2066:	80 83       	st	Z, r24
    2068:	13 c0       	rjmp	.+38     	; 0x2090 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    206a:	e0 e3       	ldi	r30, 0x30	; 48
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	88 2f       	mov	r24, r24
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a9 01       	movw	r20, r18
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <DIO_enuGetPinValue+0x10a>
    207e:	55 95       	asr	r21
    2080:	47 95       	ror	r20
    2082:	8a 95       	dec	r24
    2084:	e2 f7       	brpl	.-8      	; 0x207e <DIO_enuGetPinValue+0x106>
    2086:	ca 01       	movw	r24, r20
    2088:	81 70       	andi	r24, 0x01	; 1
    208a:	ec 81       	ldd	r30, Y+4	; 0x04
    208c:	fd 81       	ldd	r31, Y+5	; 0x05
    208e:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	05 c0       	rjmp	.+10     	; 0x20a0 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    2096:	83 e0       	ldi	r24, 0x03	; 3
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a2:	27 96       	adiw	r28, 0x07	; 7
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <LED_enuint>:
#include "../../LIB/errorStates.h"
#include "LED_priv.h"
#include "LED_config.h"
#include "../../MCAL/DIO/DIO_int.h"

ES_t LED_enuint(LED_t *SWITCH_CONFIG){
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <LED_enuint+0x6>
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <LED_enuint+0x8>
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	9c 83       	std	Y+4, r25	; 0x04
    20c2:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_error=ES_NOK;
    20c4:	1a 82       	std	Y+2, r1	; 0x02
	if(SWITCH_CONFIG!=NULL){
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <LED_enuint+0x1c>
    20ce:	5c c0       	rjmp	.+184    	; 0x2188 <LED_enuint+0xd4>
		for(u8 Iterator=0;Iterator<LED_NUM;Iterator++){
    20d0:	19 82       	std	Y+1, r1	; 0x01
    20d2:	55 c0       	rjmp	.+170    	; 0x217e <LED_enuint+0xca>
		Local_error=DIO_enuSetPinDirection(SWITCH_CONFIG[Iterator].LED_PortID,SWITCH_CONFIG[Iterator].LED_PinID,DIO_u8OUTPUT);
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	88 2f       	mov	r24, r24
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9c 01       	movw	r18, r24
    20dc:	22 0f       	add	r18, r18
    20de:	33 1f       	adc	r19, r19
    20e0:	22 0f       	add	r18, r18
    20e2:	33 1f       	adc	r19, r19
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	fc 01       	movw	r30, r24
    20ea:	e2 0f       	add	r30, r18
    20ec:	f3 1f       	adc	r31, r19
    20ee:	40 81       	ld	r20, Z
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	88 2f       	mov	r24, r24
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	9c 01       	movw	r18, r24
    20f8:	22 0f       	add	r18, r18
    20fa:	33 1f       	adc	r19, r19
    20fc:	22 0f       	add	r18, r18
    20fe:	33 1f       	adc	r19, r19
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	9c 81       	ldd	r25, Y+4	; 0x04
    2104:	fc 01       	movw	r30, r24
    2106:	e2 0f       	add	r30, r18
    2108:	f3 1f       	adc	r31, r19
    210a:	91 81       	ldd	r25, Z+1	; 0x01
    210c:	84 2f       	mov	r24, r20
    210e:	69 2f       	mov	r22, r25
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	0e 94 56 0d 	call	0x1aac	; 0x1aac <DIO_enuSetPinDirection>
    2116:	8a 83       	std	Y+2, r24	; 0x02
		Local_error=DIO_enuSetPinValue(SWITCH_CONFIG[Iterator].LED_PortID,SWITCH_CONFIG[Iterator].LED_PinID,SWITCH_CONFIG[Iterator].LED_InitState);
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	88 2f       	mov	r24, r24
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9c 01       	movw	r18, r24
    2120:	22 0f       	add	r18, r18
    2122:	33 1f       	adc	r19, r19
    2124:	22 0f       	add	r18, r18
    2126:	33 1f       	adc	r19, r19
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	9c 81       	ldd	r25, Y+4	; 0x04
    212c:	fc 01       	movw	r30, r24
    212e:	e2 0f       	add	r30, r18
    2130:	f3 1f       	adc	r31, r19
    2132:	50 81       	ld	r21, Z
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	88 2f       	mov	r24, r24
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9c 01       	movw	r18, r24
    213c:	22 0f       	add	r18, r18
    213e:	33 1f       	adc	r19, r19
    2140:	22 0f       	add	r18, r18
    2142:	33 1f       	adc	r19, r19
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	fc 01       	movw	r30, r24
    214a:	e2 0f       	add	r30, r18
    214c:	f3 1f       	adc	r31, r19
    214e:	41 81       	ldd	r20, Z+1	; 0x01
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9c 01       	movw	r18, r24
    2158:	22 0f       	add	r18, r18
    215a:	33 1f       	adc	r19, r19
    215c:	22 0f       	add	r18, r18
    215e:	33 1f       	adc	r19, r19
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	9c 81       	ldd	r25, Y+4	; 0x04
    2164:	fc 01       	movw	r30, r24
    2166:	e2 0f       	add	r30, r18
    2168:	f3 1f       	adc	r31, r19
    216a:	93 81       	ldd	r25, Z+3	; 0x03
    216c:	85 2f       	mov	r24, r21
    216e:	64 2f       	mov	r22, r20
    2170:	49 2f       	mov	r20, r25
    2172:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_enuSetPinValue>
    2176:	8a 83       	std	Y+2, r24	; 0x02
#include "../../MCAL/DIO/DIO_int.h"

ES_t LED_enuint(LED_t *SWITCH_CONFIG){
	ES_t Local_error=ES_NOK;
	if(SWITCH_CONFIG!=NULL){
		for(u8 Iterator=0;Iterator<LED_NUM;Iterator++){
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	8f 5f       	subi	r24, 0xFF	; 255
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	86 30       	cpi	r24, 0x06	; 6
    2182:	08 f4       	brcc	.+2      	; 0x2186 <LED_enuint+0xd2>
    2184:	a7 cf       	rjmp	.-178    	; 0x20d4 <LED_enuint+0x20>
    2186:	02 c0       	rjmp	.+4      	; 0x218c <LED_enuint+0xd8>
		Local_error=DIO_enuSetPinDirection(SWITCH_CONFIG[Iterator].LED_PortID,SWITCH_CONFIG[Iterator].LED_PinID,DIO_u8OUTPUT);
		Local_error=DIO_enuSetPinValue(SWITCH_CONFIG[Iterator].LED_PortID,SWITCH_CONFIG[Iterator].LED_PinID,SWITCH_CONFIG[Iterator].LED_InitState);
		}
	}
	else{
		Local_error=ES_NULL_POINTER;
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	8a 83       	std	Y+2, r24	; 0x02
	}



	return Local_error;
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <LED_ON>:
ES_t LED_ON(LED_t *SWITCH_CONFIG){
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <LED_ON+0x6>
    21a2:	0f 92       	push	r0
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	9b 83       	std	Y+3, r25	; 0x03
    21aa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_error=ES_NOK;
    21ac:	19 82       	std	Y+1, r1	; 0x01
		if(SWITCH_CONFIG!=NULL){
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	9b 81       	ldd	r25, Y+3	; 0x03
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	29 f1       	breq	.+74     	; 0x2200 <LED_ON+0x64>
			if(SWITCH_CONFIG->LED_Connection==DIO_SINK){
    21b6:	ea 81       	ldd	r30, Y+2	; 0x02
    21b8:	fb 81       	ldd	r31, Y+3	; 0x03
    21ba:	82 81       	ldd	r24, Z+2	; 0x02
    21bc:	81 30       	cpi	r24, 0x01	; 1
    21be:	61 f4       	brne	.+24     	; 0x21d8 <LED_ON+0x3c>
				Local_error=DIO_enuSetPinValue(SWITCH_CONFIG->LED_PortID,SWITCH_CONFIG->LED_PinID,DIO_u8LOW);
    21c0:	ea 81       	ldd	r30, Y+2	; 0x02
    21c2:	fb 81       	ldd	r31, Y+3	; 0x03
    21c4:	80 81       	ld	r24, Z
    21c6:	ea 81       	ldd	r30, Y+2	; 0x02
    21c8:	fb 81       	ldd	r31, Y+3	; 0x03
    21ca:	91 81       	ldd	r25, Z+1	; 0x01
    21cc:	69 2f       	mov	r22, r25
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_enuSetPinValue>
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	16 c0       	rjmp	.+44     	; 0x2204 <LED_ON+0x68>
		}
			else if(SWITCH_CONFIG->LED_Connection==DIO_SOURCE){
    21d8:	ea 81       	ldd	r30, Y+2	; 0x02
    21da:	fb 81       	ldd	r31, Y+3	; 0x03
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	88 23       	and	r24, r24
    21e0:	61 f4       	brne	.+24     	; 0x21fa <LED_ON+0x5e>

				Local_error=DIO_enuSetPinValue(SWITCH_CONFIG->LED_PortID,SWITCH_CONFIG->LED_PinID,DIO_u8HIGH);
    21e2:	ea 81       	ldd	r30, Y+2	; 0x02
    21e4:	fb 81       	ldd	r31, Y+3	; 0x03
    21e6:	80 81       	ld	r24, Z
    21e8:	ea 81       	ldd	r30, Y+2	; 0x02
    21ea:	fb 81       	ldd	r31, Y+3	; 0x03
    21ec:	91 81       	ldd	r25, Z+1	; 0x01
    21ee:	69 2f       	mov	r22, r25
    21f0:	41 e0       	ldi	r20, 0x01	; 1
    21f2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_enuSetPinValue>
    21f6:	89 83       	std	Y+1, r24	; 0x01
    21f8:	05 c0       	rjmp	.+10     	; 0x2204 <LED_ON+0x68>


			}
			else{
				Local_error=ES_OUT_OF_RANGE;
    21fa:	83 e0       	ldi	r24, 0x03	; 3
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	02 c0       	rjmp	.+4      	; 0x2204 <LED_ON+0x68>
			}
		}

		else{
			Local_error=ES_NULL_POINTER;
    2200:	82 e0       	ldi	r24, 0x02	; 2
    2202:	89 83       	std	Y+1, r24	; 0x01
		}



		return Local_error;
    2204:	89 81       	ldd	r24, Y+1	; 0x01
	}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <LED_OFF>:





ES_t LED_OFF(LED_t *SWITCH_CONFIG){
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <LED_OFF+0x6>
    2218:	0f 92       	push	r0
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	9b 83       	std	Y+3, r25	; 0x03
    2220:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_error=ES_NOK;
    2222:	19 82       	std	Y+1, r1	; 0x01
			if(SWITCH_CONFIG!=NULL){
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	9b 81       	ldd	r25, Y+3	; 0x03
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	29 f1       	breq	.+74     	; 0x2276 <LED_OFF+0x64>
				if(SWITCH_CONFIG->LED_Connection==DIO_SINK){
    222c:	ea 81       	ldd	r30, Y+2	; 0x02
    222e:	fb 81       	ldd	r31, Y+3	; 0x03
    2230:	82 81       	ldd	r24, Z+2	; 0x02
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	61 f4       	brne	.+24     	; 0x224e <LED_OFF+0x3c>
								Local_error=DIO_enuSetPinValue(SWITCH_CONFIG->LED_PortID,SWITCH_CONFIG->LED_PinID,DIO_u8HIGH);
    2236:	ea 81       	ldd	r30, Y+2	; 0x02
    2238:	fb 81       	ldd	r31, Y+3	; 0x03
    223a:	80 81       	ld	r24, Z
    223c:	ea 81       	ldd	r30, Y+2	; 0x02
    223e:	fb 81       	ldd	r31, Y+3	; 0x03
    2240:	91 81       	ldd	r25, Z+1	; 0x01
    2242:	69 2f       	mov	r22, r25
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_enuSetPinValue>
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	16 c0       	rjmp	.+44     	; 0x227a <LED_OFF+0x68>
						}
							else if(SWITCH_CONFIG->LED_Connection==DIO_SOURCE){
    224e:	ea 81       	ldd	r30, Y+2	; 0x02
    2250:	fb 81       	ldd	r31, Y+3	; 0x03
    2252:	82 81       	ldd	r24, Z+2	; 0x02
    2254:	88 23       	and	r24, r24
    2256:	61 f4       	brne	.+24     	; 0x2270 <LED_OFF+0x5e>

								Local_error=DIO_enuSetPinValue(SWITCH_CONFIG->LED_PortID,SWITCH_CONFIG->LED_PinID,DIO_u8LOW);
    2258:	ea 81       	ldd	r30, Y+2	; 0x02
    225a:	fb 81       	ldd	r31, Y+3	; 0x03
    225c:	80 81       	ld	r24, Z
    225e:	ea 81       	ldd	r30, Y+2	; 0x02
    2260:	fb 81       	ldd	r31, Y+3	; 0x03
    2262:	91 81       	ldd	r25, Z+1	; 0x01
    2264:	69 2f       	mov	r22, r25
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_enuSetPinValue>
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	05 c0       	rjmp	.+10     	; 0x227a <LED_OFF+0x68>


							}
							else{
								Local_error=ES_OUT_OF_RANGE;
    2270:	83 e0       	ldi	r24, 0x03	; 3
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	02 c0       	rjmp	.+4      	; 0x227a <LED_OFF+0x68>
							}
						}

			else{
				Local_error=ES_NULL_POINTER;
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	89 83       	std	Y+1, r24	; 0x01
			}



			return Local_error;
    227a:	89 81       	ldd	r24, Y+1	; 0x01
}
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <main>:



#include "../MCAL/Timer/Timer_int.h"
#include "../MCAL/DIO/DIO_int.h"
int main() {
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62


	Timer_enu_init();
    2290:	0e 94 17 07 	call	0xe2e	; 0xe2e <Timer_enu_init>
	DIO_enuSetPinDirection(DIO_u8PORTB,DIO_u8PIN3,DIO_u8OUTPUT);
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	63 e0       	ldi	r22, 0x03	; 3
    2298:	41 e0       	ldi	r20, 0x01	; 1
    229a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <DIO_enuSetPinDirection>

	while (1) {


		Timer_enu_Generate_PC_PWM(0.725);
    229e:	6a e9       	ldi	r22, 0x9A	; 154
    22a0:	79 e9       	ldi	r23, 0x99	; 153
    22a2:	89 e3       	ldi	r24, 0x39	; 57
    22a4:	9f e3       	ldi	r25, 0x3F	; 63
    22a6:	0e 94 6f 09 	call	0x12de	; 0x12de <Timer_enu_Generate_PC_PWM>
    22aa:	f9 cf       	rjmp	.-14     	; 0x229e <main+0x16>

000022ac <__prologue_saves__>:
    22ac:	2f 92       	push	r2
    22ae:	3f 92       	push	r3
    22b0:	4f 92       	push	r4
    22b2:	5f 92       	push	r5
    22b4:	6f 92       	push	r6
    22b6:	7f 92       	push	r7
    22b8:	8f 92       	push	r8
    22ba:	9f 92       	push	r9
    22bc:	af 92       	push	r10
    22be:	bf 92       	push	r11
    22c0:	cf 92       	push	r12
    22c2:	df 92       	push	r13
    22c4:	ef 92       	push	r14
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	ca 1b       	sub	r28, r26
    22d6:	db 0b       	sbc	r29, r27
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	09 94       	ijmp

000022e4 <__epilogue_restores__>:
    22e4:	2a 88       	ldd	r2, Y+18	; 0x12
    22e6:	39 88       	ldd	r3, Y+17	; 0x11
    22e8:	48 88       	ldd	r4, Y+16	; 0x10
    22ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    22ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    22ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    22f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    22f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    22f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    22f6:	b9 84       	ldd	r11, Y+9	; 0x09
    22f8:	c8 84       	ldd	r12, Y+8	; 0x08
    22fa:	df 80       	ldd	r13, Y+7	; 0x07
    22fc:	ee 80       	ldd	r14, Y+6	; 0x06
    22fe:	fd 80       	ldd	r15, Y+5	; 0x05
    2300:	0c 81       	ldd	r16, Y+4	; 0x04
    2302:	1b 81       	ldd	r17, Y+3	; 0x03
    2304:	aa 81       	ldd	r26, Y+2	; 0x02
    2306:	b9 81       	ldd	r27, Y+1	; 0x01
    2308:	ce 0f       	add	r28, r30
    230a:	d1 1d       	adc	r29, r1
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	ed 01       	movw	r28, r26
    2318:	08 95       	ret

0000231a <_exit>:
    231a:	f8 94       	cli

0000231c <__stop_program>:
    231c:	ff cf       	rjmp	.-2      	; 0x231c <__stop_program>
