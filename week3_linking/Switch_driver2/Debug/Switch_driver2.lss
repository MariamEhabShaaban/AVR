
Switch_driver2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b04  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000b04  00000b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000108c  00000000  00000000  00000b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a07  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 5c 05 	call	0xab8	; 0xab8 <main>
  7a:	0c 94 80 05 	jmp	0xb00	; 0xb00 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	19 82       	std	Y+1, r1	; 0x01
  8e:	ea e3       	ldi	r30, 0x3A	; 58
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	80 83       	st	Z, r24
  96:	e7 e3       	ldi	r30, 0x37	; 55
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8c ef       	ldi	r24, 0xFC	; 252
  9c:	80 83       	st	Z, r24
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	86 e9       	ldi	r24, 0x96	; 150
  a4:	80 83       	st	Z, r24
  a6:	e1 e3       	ldi	r30, 0x31	; 49
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	86 e9       	ldi	r24, 0x96	; 150
  ac:	80 83       	st	Z, r24
  ae:	eb e3       	ldi	r30, 0x3B	; 59
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	e8 e3       	ldi	r30, 0x38	; 56
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	80 83       	st	Z, r24
  bc:	e5 e3       	ldi	r30, 0x35	; 53
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	10 82       	st	Z, r1
  c2:	e2 e3       	ldi	r30, 0x32	; 50
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	0f 90       	pop	r0
  d0:	cf 91       	pop	r28
  d2:	df 91       	pop	r29
  d4:	08 95       	ret

000000d6 <DIO_enuSetPortDirection>:

	return Local_enuErrorstate;
}

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
  d6:	df 93       	push	r29
  d8:	cf 93       	push	r28
  da:	00 d0       	rcall	.+0      	; 0xdc <DIO_enuSetPortDirection+0x6>
  dc:	00 d0       	rcall	.+0      	; 0xde <DIO_enuSetPortDirection+0x8>
  de:	0f 92       	push	r0
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	8a 83       	std	Y+2, r24	; 0x02
  e6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
  e8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
  ea:	8a 81       	ldd	r24, Y+2	; 0x02
  ec:	84 30       	cpi	r24, 0x04	; 4
  ee:	a8 f5       	brcc	.+106    	; 0x15a <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
  f0:	8a 81       	ldd	r24, Y+2	; 0x02
  f2:	28 2f       	mov	r18, r24
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	3d 83       	std	Y+5, r19	; 0x05
  f8:	2c 83       	std	Y+4, r18	; 0x04
  fa:	8c 81       	ldd	r24, Y+4	; 0x04
  fc:	9d 81       	ldd	r25, Y+5	; 0x05
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	91 05       	cpc	r25, r1
 102:	d1 f0       	breq	.+52     	; 0x138 <DIO_enuSetPortDirection+0x62>
 104:	2c 81       	ldd	r18, Y+4	; 0x04
 106:	3d 81       	ldd	r19, Y+5	; 0x05
 108:	22 30       	cpi	r18, 0x02	; 2
 10a:	31 05       	cpc	r19, r1
 10c:	2c f4       	brge	.+10     	; 0x118 <DIO_enuSetPortDirection+0x42>
 10e:	8c 81       	ldd	r24, Y+4	; 0x04
 110:	9d 81       	ldd	r25, Y+5	; 0x05
 112:	00 97       	sbiw	r24, 0x00	; 0
 114:	61 f0       	breq	.+24     	; 0x12e <DIO_enuSetPortDirection+0x58>
 116:	1e c0       	rjmp	.+60     	; 0x154 <DIO_enuSetPortDirection+0x7e>
 118:	2c 81       	ldd	r18, Y+4	; 0x04
 11a:	3d 81       	ldd	r19, Y+5	; 0x05
 11c:	22 30       	cpi	r18, 0x02	; 2
 11e:	31 05       	cpc	r19, r1
 120:	81 f0       	breq	.+32     	; 0x142 <DIO_enuSetPortDirection+0x6c>
 122:	8c 81       	ldd	r24, Y+4	; 0x04
 124:	9d 81       	ldd	r25, Y+5	; 0x05
 126:	83 30       	cpi	r24, 0x03	; 3
 128:	91 05       	cpc	r25, r1
 12a:	81 f0       	breq	.+32     	; 0x14c <DIO_enuSetPortDirection+0x76>
 12c:	13 c0       	rjmp	.+38     	; 0x154 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
 12e:	ea e3       	ldi	r30, 0x3A	; 58
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	80 83       	st	Z, r24
 136:	0e c0       	rjmp	.+28     	; 0x154 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
 138:	e7 e3       	ldi	r30, 0x37	; 55
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	80 83       	st	Z, r24
 140:	09 c0       	rjmp	.+18     	; 0x154 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
 142:	e4 e3       	ldi	r30, 0x34	; 52
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	8b 81       	ldd	r24, Y+3	; 0x03
 148:	80 83       	st	Z, r24
 14a:	04 c0       	rjmp	.+8      	; 0x154 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
 14c:	e1 e3       	ldi	r30, 0x31	; 49
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	8b 81       	ldd	r24, Y+3	; 0x03
 152:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	89 83       	std	Y+1, r24	; 0x01
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 15e:	89 81       	ldd	r24, Y+1	; 0x01
}
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	cf 91       	pop	r28
 16c:	df 91       	pop	r29
 16e:	08 95       	ret

00000170 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
 170:	df 93       	push	r29
 172:	cf 93       	push	r28
 174:	00 d0       	rcall	.+0      	; 0x176 <DIO_enuSetPortValue+0x6>
 176:	00 d0       	rcall	.+0      	; 0x178 <DIO_enuSetPortValue+0x8>
 178:	0f 92       	push	r0
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	8a 83       	std	Y+2, r24	; 0x02
 180:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
 182:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	84 30       	cpi	r24, 0x04	; 4
 188:	a8 f5       	brcc	.+106    	; 0x1f4 <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	28 2f       	mov	r18, r24
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	3d 83       	std	Y+5, r19	; 0x05
 192:	2c 83       	std	Y+4, r18	; 0x04
 194:	8c 81       	ldd	r24, Y+4	; 0x04
 196:	9d 81       	ldd	r25, Y+5	; 0x05
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	91 05       	cpc	r25, r1
 19c:	d1 f0       	breq	.+52     	; 0x1d2 <DIO_enuSetPortValue+0x62>
 19e:	2c 81       	ldd	r18, Y+4	; 0x04
 1a0:	3d 81       	ldd	r19, Y+5	; 0x05
 1a2:	22 30       	cpi	r18, 0x02	; 2
 1a4:	31 05       	cpc	r19, r1
 1a6:	2c f4       	brge	.+10     	; 0x1b2 <DIO_enuSetPortValue+0x42>
 1a8:	8c 81       	ldd	r24, Y+4	; 0x04
 1aa:	9d 81       	ldd	r25, Y+5	; 0x05
 1ac:	00 97       	sbiw	r24, 0x00	; 0
 1ae:	61 f0       	breq	.+24     	; 0x1c8 <DIO_enuSetPortValue+0x58>
 1b0:	1e c0       	rjmp	.+60     	; 0x1ee <DIO_enuSetPortValue+0x7e>
 1b2:	2c 81       	ldd	r18, Y+4	; 0x04
 1b4:	3d 81       	ldd	r19, Y+5	; 0x05
 1b6:	22 30       	cpi	r18, 0x02	; 2
 1b8:	31 05       	cpc	r19, r1
 1ba:	81 f0       	breq	.+32     	; 0x1dc <DIO_enuSetPortValue+0x6c>
 1bc:	8c 81       	ldd	r24, Y+4	; 0x04
 1be:	9d 81       	ldd	r25, Y+5	; 0x05
 1c0:	83 30       	cpi	r24, 0x03	; 3
 1c2:	91 05       	cpc	r25, r1
 1c4:	81 f0       	breq	.+32     	; 0x1e6 <DIO_enuSetPortValue+0x76>
 1c6:	13 c0       	rjmp	.+38     	; 0x1ee <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
 1c8:	eb e3       	ldi	r30, 0x3B	; 59
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	8b 81       	ldd	r24, Y+3	; 0x03
 1ce:	80 83       	st	Z, r24
 1d0:	0e c0       	rjmp	.+28     	; 0x1ee <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
 1d2:	e8 e3       	ldi	r30, 0x38	; 56
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	8b 81       	ldd	r24, Y+3	; 0x03
 1d8:	80 83       	st	Z, r24
 1da:	09 c0       	rjmp	.+18     	; 0x1ee <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
 1dc:	e5 e3       	ldi	r30, 0x35	; 53
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	80 83       	st	Z, r24
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
 1e6:	e2 e3       	ldi	r30, 0x32	; 50
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	8b 81       	ldd	r24, Y+3	; 0x03
 1ec:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
}
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	cf 91       	pop	r28
 206:	df 91       	pop	r29
 208:	08 95       	ret

0000020a <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
 20a:	df 93       	push	r29
 20c:	cf 93       	push	r28
 20e:	00 d0       	rcall	.+0      	; 0x210 <DIO_enuTogPortValue+0x6>
 210:	00 d0       	rcall	.+0      	; 0x212 <DIO_enuTogPortValue+0x8>
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
 218:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
 21a:	8a 81       	ldd	r24, Y+2	; 0x02
 21c:	84 30       	cpi	r24, 0x04	; 4
 21e:	08 f0       	brcs	.+2      	; 0x222 <DIO_enuTogPortValue+0x18>
 220:	41 c0       	rjmp	.+130    	; 0x2a4 <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
 222:	8a 81       	ldd	r24, Y+2	; 0x02
 224:	28 2f       	mov	r18, r24
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	3c 83       	std	Y+4, r19	; 0x04
 22a:	2b 83       	std	Y+3, r18	; 0x03
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	9c 81       	ldd	r25, Y+4	; 0x04
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	91 05       	cpc	r25, r1
 234:	e9 f0       	breq	.+58     	; 0x270 <DIO_enuTogPortValue+0x66>
 236:	2b 81       	ldd	r18, Y+3	; 0x03
 238:	3c 81       	ldd	r19, Y+4	; 0x04
 23a:	22 30       	cpi	r18, 0x02	; 2
 23c:	31 05       	cpc	r19, r1
 23e:	2c f4       	brge	.+10     	; 0x24a <DIO_enuTogPortValue+0x40>
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	9c 81       	ldd	r25, Y+4	; 0x04
 244:	00 97       	sbiw	r24, 0x00	; 0
 246:	61 f0       	breq	.+24     	; 0x260 <DIO_enuTogPortValue+0x56>
 248:	2a c0       	rjmp	.+84     	; 0x29e <DIO_enuTogPortValue+0x94>
 24a:	2b 81       	ldd	r18, Y+3	; 0x03
 24c:	3c 81       	ldd	r19, Y+4	; 0x04
 24e:	22 30       	cpi	r18, 0x02	; 2
 250:	31 05       	cpc	r19, r1
 252:	b1 f0       	breq	.+44     	; 0x280 <DIO_enuTogPortValue+0x76>
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	9c 81       	ldd	r25, Y+4	; 0x04
 258:	83 30       	cpi	r24, 0x03	; 3
 25a:	91 05       	cpc	r25, r1
 25c:	c9 f0       	breq	.+50     	; 0x290 <DIO_enuTogPortValue+0x86>
 25e:	1f c0       	rjmp	.+62     	; 0x29e <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
 260:	ab e3       	ldi	r26, 0x3B	; 59
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	eb e3       	ldi	r30, 0x3B	; 59
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	80 95       	com	r24
 26c:	8c 93       	st	X, r24
 26e:	17 c0       	rjmp	.+46     	; 0x29e <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
 270:	a8 e3       	ldi	r26, 0x38	; 56
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	e8 e3       	ldi	r30, 0x38	; 56
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	80 95       	com	r24
 27c:	8c 93       	st	X, r24
 27e:	0f c0       	rjmp	.+30     	; 0x29e <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
 280:	a5 e3       	ldi	r26, 0x35	; 53
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	e5 e3       	ldi	r30, 0x35	; 53
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	80 95       	com	r24
 28c:	8c 93       	st	X, r24
 28e:	07 c0       	rjmp	.+14     	; 0x29e <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
 290:	a2 e3       	ldi	r26, 0x32	; 50
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	e2 e3       	ldi	r30, 0x32	; 50
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	80 95       	com	r24
 29c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	89 83       	std	Y+1, r24	; 0x01
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
}
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	cf 91       	pop	r28
 2b4:	df 91       	pop	r29
 2b6:	08 95       	ret

000002b8 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
 2b8:	df 93       	push	r29
 2ba:	cf 93       	push	r28
 2bc:	00 d0       	rcall	.+0      	; 0x2be <DIO_enuGetPortValue+0x6>
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <DIO_enuGetPortValue+0x8>
 2c0:	00 d0       	rcall	.+0      	; 0x2c2 <DIO_enuGetPortValue+0xa>
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
 2c6:	8a 83       	std	Y+2, r24	; 0x02
 2c8:	7c 83       	std	Y+4, r23	; 0x04
 2ca:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
 2cc:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	9c 81       	ldd	r25, Y+4	; 0x04
 2d2:	00 97       	sbiw	r24, 0x00	; 0
 2d4:	09 f4       	brne	.+2      	; 0x2d8 <DIO_enuGetPortValue+0x20>
 2d6:	43 c0       	rjmp	.+134    	; 0x35e <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	84 30       	cpi	r24, 0x04	; 4
 2dc:	e8 f5       	brcc	.+122    	; 0x358 <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	28 2f       	mov	r18, r24
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	3e 83       	std	Y+6, r19	; 0x06
 2e6:	2d 83       	std	Y+5, r18	; 0x05
 2e8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ea:	9e 81       	ldd	r25, Y+6	; 0x06
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	91 05       	cpc	r25, r1
 2f0:	e1 f0       	breq	.+56     	; 0x32a <DIO_enuGetPortValue+0x72>
 2f2:	2d 81       	ldd	r18, Y+5	; 0x05
 2f4:	3e 81       	ldd	r19, Y+6	; 0x06
 2f6:	22 30       	cpi	r18, 0x02	; 2
 2f8:	31 05       	cpc	r19, r1
 2fa:	2c f4       	brge	.+10     	; 0x306 <DIO_enuGetPortValue+0x4e>
 2fc:	8d 81       	ldd	r24, Y+5	; 0x05
 2fe:	9e 81       	ldd	r25, Y+6	; 0x06
 300:	00 97       	sbiw	r24, 0x00	; 0
 302:	61 f0       	breq	.+24     	; 0x31c <DIO_enuGetPortValue+0x64>
 304:	26 c0       	rjmp	.+76     	; 0x352 <DIO_enuGetPortValue+0x9a>
 306:	2d 81       	ldd	r18, Y+5	; 0x05
 308:	3e 81       	ldd	r19, Y+6	; 0x06
 30a:	22 30       	cpi	r18, 0x02	; 2
 30c:	31 05       	cpc	r19, r1
 30e:	a1 f0       	breq	.+40     	; 0x338 <DIO_enuGetPortValue+0x80>
 310:	8d 81       	ldd	r24, Y+5	; 0x05
 312:	9e 81       	ldd	r25, Y+6	; 0x06
 314:	83 30       	cpi	r24, 0x03	; 3
 316:	91 05       	cpc	r25, r1
 318:	b1 f0       	breq	.+44     	; 0x346 <DIO_enuGetPortValue+0x8e>
 31a:	1b c0       	rjmp	.+54     	; 0x352 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
 31c:	e9 e3       	ldi	r30, 0x39	; 57
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	eb 81       	ldd	r30, Y+3	; 0x03
 324:	fc 81       	ldd	r31, Y+4	; 0x04
 326:	80 83       	st	Z, r24
 328:	14 c0       	rjmp	.+40     	; 0x352 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
 32a:	e6 e3       	ldi	r30, 0x36	; 54
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	eb 81       	ldd	r30, Y+3	; 0x03
 332:	fc 81       	ldd	r31, Y+4	; 0x04
 334:	80 83       	st	Z, r24
 336:	0d c0       	rjmp	.+26     	; 0x352 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
 338:	e3 e3       	ldi	r30, 0x33	; 51
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	eb 81       	ldd	r30, Y+3	; 0x03
 340:	fc 81       	ldd	r31, Y+4	; 0x04
 342:	80 83       	st	Z, r24
 344:	06 c0       	rjmp	.+12     	; 0x352 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
 346:	e0 e3       	ldi	r30, 0x30	; 48
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	eb 81       	ldd	r30, Y+3	; 0x03
 34e:	fc 81       	ldd	r31, Y+4	; 0x04
 350:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	89 83       	std	Y+1, r24	; 0x01
 356:	05 c0       	rjmp	.+10     	; 0x362 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	89 83       	std	Y+1, r24	; 0x01
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 362:	89 81       	ldd	r24, Y+1	; 0x01
}
 364:	26 96       	adiw	r28, 0x06	; 6
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	de bf       	out	0x3e, r29	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	cd bf       	out	0x3d, r28	; 61
 370:	cf 91       	pop	r28
 372:	df 91       	pop	r29
 374:	08 95       	ret

00000376 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
 376:	df 93       	push	r29
 378:	cf 93       	push	r28
 37a:	00 d0       	rcall	.+0      	; 0x37c <DIO_enuSetPinDirection+0x6>
 37c:	00 d0       	rcall	.+0      	; 0x37e <DIO_enuSetPinDirection+0x8>
 37e:	00 d0       	rcall	.+0      	; 0x380 <DIO_enuSetPinDirection+0xa>
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
 384:	8a 83       	std	Y+2, r24	; 0x02
 386:	6b 83       	std	Y+3, r22	; 0x03
 388:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
 38a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
 38c:	8a 81       	ldd	r24, Y+2	; 0x02
 38e:	84 30       	cpi	r24, 0x04	; 4
 390:	08 f0       	brcs	.+2      	; 0x394 <DIO_enuSetPinDirection+0x1e>
 392:	d1 c0       	rjmp	.+418    	; 0x536 <DIO_enuSetPinDirection+0x1c0>
 394:	8b 81       	ldd	r24, Y+3	; 0x03
 396:	88 30       	cpi	r24, 0x08	; 8
 398:	08 f0       	brcs	.+2      	; 0x39c <DIO_enuSetPinDirection+0x26>
 39a:	cd c0       	rjmp	.+410    	; 0x536 <DIO_enuSetPinDirection+0x1c0>
 39c:	8c 81       	ldd	r24, Y+4	; 0x04
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	08 f0       	brcs	.+2      	; 0x3a4 <DIO_enuSetPinDirection+0x2e>
 3a2:	c9 c0       	rjmp	.+402    	; 0x536 <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	3e 83       	std	Y+6, r19	; 0x06
 3ac:	2d 83       	std	Y+5, r18	; 0x05
 3ae:	6d 81       	ldd	r22, Y+5	; 0x05
 3b0:	7e 81       	ldd	r23, Y+6	; 0x06
 3b2:	61 30       	cpi	r22, 0x01	; 1
 3b4:	71 05       	cpc	r23, r1
 3b6:	09 f4       	brne	.+2      	; 0x3ba <DIO_enuSetPinDirection+0x44>
 3b8:	41 c0       	rjmp	.+130    	; 0x43c <DIO_enuSetPinDirection+0xc6>
 3ba:	8d 81       	ldd	r24, Y+5	; 0x05
 3bc:	9e 81       	ldd	r25, Y+6	; 0x06
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	91 05       	cpc	r25, r1
 3c2:	34 f4       	brge	.+12     	; 0x3d0 <DIO_enuSetPinDirection+0x5a>
 3c4:	2d 81       	ldd	r18, Y+5	; 0x05
 3c6:	3e 81       	ldd	r19, Y+6	; 0x06
 3c8:	21 15       	cp	r18, r1
 3ca:	31 05       	cpc	r19, r1
 3cc:	71 f0       	breq	.+28     	; 0x3ea <DIO_enuSetPinDirection+0x74>
 3ce:	b0 c0       	rjmp	.+352    	; 0x530 <DIO_enuSetPinDirection+0x1ba>
 3d0:	6d 81       	ldd	r22, Y+5	; 0x05
 3d2:	7e 81       	ldd	r23, Y+6	; 0x06
 3d4:	62 30       	cpi	r22, 0x02	; 2
 3d6:	71 05       	cpc	r23, r1
 3d8:	09 f4       	brne	.+2      	; 0x3dc <DIO_enuSetPinDirection+0x66>
 3da:	59 c0       	rjmp	.+178    	; 0x48e <DIO_enuSetPinDirection+0x118>
 3dc:	8d 81       	ldd	r24, Y+5	; 0x05
 3de:	9e 81       	ldd	r25, Y+6	; 0x06
 3e0:	83 30       	cpi	r24, 0x03	; 3
 3e2:	91 05       	cpc	r25, r1
 3e4:	09 f4       	brne	.+2      	; 0x3e8 <DIO_enuSetPinDirection+0x72>
 3e6:	7c c0       	rjmp	.+248    	; 0x4e0 <DIO_enuSetPinDirection+0x16a>
 3e8:	a3 c0       	rjmp	.+326    	; 0x530 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 3ea:	aa e3       	ldi	r26, 0x3A	; 58
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	ea e3       	ldi	r30, 0x3A	; 58
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	48 2f       	mov	r20, r24
 3f6:	8b 81       	ldd	r24, Y+3	; 0x03
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <DIO_enuSetPinDirection+0x90>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	2a 95       	dec	r18
 408:	e2 f7       	brpl	.-8      	; 0x402 <DIO_enuSetPinDirection+0x8c>
 40a:	80 95       	com	r24
 40c:	84 23       	and	r24, r20
 40e:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
 410:	aa e3       	ldi	r26, 0x3A	; 58
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	ea e3       	ldi	r30, 0x3A	; 58
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	48 2f       	mov	r20, r24
 41c:	8c 81       	ldd	r24, Y+4	; 0x04
 41e:	28 2f       	mov	r18, r24
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	8b 81       	ldd	r24, Y+3	; 0x03
 424:	88 2f       	mov	r24, r24
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	b9 01       	movw	r22, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_enuSetPinDirection+0xba>
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	8a 95       	dec	r24
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_enuSetPinDirection+0xb6>
 434:	cb 01       	movw	r24, r22
 436:	84 2b       	or	r24, r20
 438:	8c 93       	st	X, r24
 43a:	7a c0       	rjmp	.+244    	; 0x530 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 43c:	a7 e3       	ldi	r26, 0x37	; 55
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	e7 e3       	ldi	r30, 0x37	; 55
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	48 2f       	mov	r20, r24
 448:	8b 81       	ldd	r24, Y+3	; 0x03
 44a:	28 2f       	mov	r18, r24
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	02 c0       	rjmp	.+4      	; 0x458 <DIO_enuSetPinDirection+0xe2>
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	2a 95       	dec	r18
 45a:	e2 f7       	brpl	.-8      	; 0x454 <DIO_enuSetPinDirection+0xde>
 45c:	80 95       	com	r24
 45e:	84 23       	and	r24, r20
 460:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
 462:	a7 e3       	ldi	r26, 0x37	; 55
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	e7 e3       	ldi	r30, 0x37	; 55
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	48 2f       	mov	r20, r24
 46e:	8c 81       	ldd	r24, Y+4	; 0x04
 470:	28 2f       	mov	r18, r24
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	8b 81       	ldd	r24, Y+3	; 0x03
 476:	88 2f       	mov	r24, r24
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	b9 01       	movw	r22, r18
 47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_enuSetPinDirection+0x10c>
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	8a 95       	dec	r24
 484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_enuSetPinDirection+0x108>
 486:	cb 01       	movw	r24, r22
 488:	84 2b       	or	r24, r20
 48a:	8c 93       	st	X, r24
 48c:	51 c0       	rjmp	.+162    	; 0x530 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 48e:	a4 e3       	ldi	r26, 0x34	; 52
 490:	b0 e0       	ldi	r27, 0x00	; 0
 492:	e4 e3       	ldi	r30, 0x34	; 52
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	48 2f       	mov	r20, r24
 49a:	8b 81       	ldd	r24, Y+3	; 0x03
 49c:	28 2f       	mov	r18, r24
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_enuSetPinDirection+0x134>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	2a 95       	dec	r18
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_enuSetPinDirection+0x130>
 4ae:	80 95       	com	r24
 4b0:	84 23       	and	r24, r20
 4b2:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
 4b4:	a4 e3       	ldi	r26, 0x34	; 52
 4b6:	b0 e0       	ldi	r27, 0x00	; 0
 4b8:	e4 e3       	ldi	r30, 0x34	; 52
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	48 2f       	mov	r20, r24
 4c0:	8c 81       	ldd	r24, Y+4	; 0x04
 4c2:	28 2f       	mov	r18, r24
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	8b 81       	ldd	r24, Y+3	; 0x03
 4c8:	88 2f       	mov	r24, r24
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	b9 01       	movw	r22, r18
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <DIO_enuSetPinDirection+0x15e>
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	8a 95       	dec	r24
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <DIO_enuSetPinDirection+0x15a>
 4d8:	cb 01       	movw	r24, r22
 4da:	84 2b       	or	r24, r20
 4dc:	8c 93       	st	X, r24
 4de:	28 c0       	rjmp	.+80     	; 0x530 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 4e0:	a1 e3       	ldi	r26, 0x31	; 49
 4e2:	b0 e0       	ldi	r27, 0x00	; 0
 4e4:	e1 e3       	ldi	r30, 0x31	; 49
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	48 2f       	mov	r20, r24
 4ec:	8b 81       	ldd	r24, Y+3	; 0x03
 4ee:	28 2f       	mov	r18, r24
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_enuSetPinDirection+0x186>
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	2a 95       	dec	r18
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_enuSetPinDirection+0x182>
 500:	80 95       	com	r24
 502:	84 23       	and	r24, r20
 504:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
 506:	a1 e3       	ldi	r26, 0x31	; 49
 508:	b0 e0       	ldi	r27, 0x00	; 0
 50a:	e1 e3       	ldi	r30, 0x31	; 49
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	48 2f       	mov	r20, r24
 512:	8c 81       	ldd	r24, Y+4	; 0x04
 514:	28 2f       	mov	r18, r24
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	8b 81       	ldd	r24, Y+3	; 0x03
 51a:	88 2f       	mov	r24, r24
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	b9 01       	movw	r22, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_enuSetPinDirection+0x1b0>
 522:	66 0f       	add	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	8a 95       	dec	r24
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_enuSetPinDirection+0x1ac>
 52a:	cb 01       	movw	r24, r22
 52c:	84 2b       	or	r24, r20
 52e:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	89 83       	std	Y+1, r24	; 0x01
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
 536:	83 e0       	ldi	r24, 0x03	; 3
 538:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 53a:	89 81       	ldd	r24, Y+1	; 0x01
}
 53c:	26 96       	adiw	r28, 0x06	; 6
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	f8 94       	cli
 542:	de bf       	out	0x3e, r29	; 62
 544:	0f be       	out	0x3f, r0	; 63
 546:	cd bf       	out	0x3d, r28	; 61
 548:	cf 91       	pop	r28
 54a:	df 91       	pop	r29
 54c:	08 95       	ret

0000054e <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
 54e:	df 93       	push	r29
 550:	cf 93       	push	r28
 552:	00 d0       	rcall	.+0      	; 0x554 <DIO_enuSetPinValue+0x6>
 554:	00 d0       	rcall	.+0      	; 0x556 <DIO_enuSetPinValue+0x8>
 556:	00 d0       	rcall	.+0      	; 0x558 <DIO_enuSetPinValue+0xa>
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62
 55c:	8a 83       	std	Y+2, r24	; 0x02
 55e:	6b 83       	std	Y+3, r22	; 0x03
 560:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
 562:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
 564:	8a 81       	ldd	r24, Y+2	; 0x02
 566:	84 30       	cpi	r24, 0x04	; 4
 568:	08 f0       	brcs	.+2      	; 0x56c <DIO_enuSetPinValue+0x1e>
 56a:	d1 c0       	rjmp	.+418    	; 0x70e <DIO_enuSetPinValue+0x1c0>
 56c:	8b 81       	ldd	r24, Y+3	; 0x03
 56e:	88 30       	cpi	r24, 0x08	; 8
 570:	08 f0       	brcs	.+2      	; 0x574 <DIO_enuSetPinValue+0x26>
 572:	cd c0       	rjmp	.+410    	; 0x70e <DIO_enuSetPinValue+0x1c0>
 574:	8c 81       	ldd	r24, Y+4	; 0x04
 576:	82 30       	cpi	r24, 0x02	; 2
 578:	08 f0       	brcs	.+2      	; 0x57c <DIO_enuSetPinValue+0x2e>
 57a:	c9 c0       	rjmp	.+402    	; 0x70e <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
 57c:	8a 81       	ldd	r24, Y+2	; 0x02
 57e:	28 2f       	mov	r18, r24
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	3e 83       	std	Y+6, r19	; 0x06
 584:	2d 83       	std	Y+5, r18	; 0x05
 586:	6d 81       	ldd	r22, Y+5	; 0x05
 588:	7e 81       	ldd	r23, Y+6	; 0x06
 58a:	61 30       	cpi	r22, 0x01	; 1
 58c:	71 05       	cpc	r23, r1
 58e:	09 f4       	brne	.+2      	; 0x592 <DIO_enuSetPinValue+0x44>
 590:	41 c0       	rjmp	.+130    	; 0x614 <DIO_enuSetPinValue+0xc6>
 592:	8d 81       	ldd	r24, Y+5	; 0x05
 594:	9e 81       	ldd	r25, Y+6	; 0x06
 596:	82 30       	cpi	r24, 0x02	; 2
 598:	91 05       	cpc	r25, r1
 59a:	34 f4       	brge	.+12     	; 0x5a8 <DIO_enuSetPinValue+0x5a>
 59c:	2d 81       	ldd	r18, Y+5	; 0x05
 59e:	3e 81       	ldd	r19, Y+6	; 0x06
 5a0:	21 15       	cp	r18, r1
 5a2:	31 05       	cpc	r19, r1
 5a4:	71 f0       	breq	.+28     	; 0x5c2 <DIO_enuSetPinValue+0x74>
 5a6:	b0 c0       	rjmp	.+352    	; 0x708 <DIO_enuSetPinValue+0x1ba>
 5a8:	6d 81       	ldd	r22, Y+5	; 0x05
 5aa:	7e 81       	ldd	r23, Y+6	; 0x06
 5ac:	62 30       	cpi	r22, 0x02	; 2
 5ae:	71 05       	cpc	r23, r1
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <DIO_enuSetPinValue+0x66>
 5b2:	59 c0       	rjmp	.+178    	; 0x666 <DIO_enuSetPinValue+0x118>
 5b4:	8d 81       	ldd	r24, Y+5	; 0x05
 5b6:	9e 81       	ldd	r25, Y+6	; 0x06
 5b8:	83 30       	cpi	r24, 0x03	; 3
 5ba:	91 05       	cpc	r25, r1
 5bc:	09 f4       	brne	.+2      	; 0x5c0 <DIO_enuSetPinValue+0x72>
 5be:	7c c0       	rjmp	.+248    	; 0x6b8 <DIO_enuSetPinValue+0x16a>
 5c0:	a3 c0       	rjmp	.+326    	; 0x708 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 5c2:	ab e3       	ldi	r26, 0x3B	; 59
 5c4:	b0 e0       	ldi	r27, 0x00	; 0
 5c6:	eb e3       	ldi	r30, 0x3B	; 59
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	48 2f       	mov	r20, r24
 5ce:	8b 81       	ldd	r24, Y+3	; 0x03
 5d0:	28 2f       	mov	r18, r24
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_enuSetPinValue+0x90>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	2a 95       	dec	r18
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_enuSetPinValue+0x8c>
 5e2:	80 95       	com	r24
 5e4:	84 23       	and	r24, r20
 5e6:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
 5e8:	ab e3       	ldi	r26, 0x3B	; 59
 5ea:	b0 e0       	ldi	r27, 0x00	; 0
 5ec:	eb e3       	ldi	r30, 0x3B	; 59
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	80 81       	ld	r24, Z
 5f2:	48 2f       	mov	r20, r24
 5f4:	8c 81       	ldd	r24, Y+4	; 0x04
 5f6:	28 2f       	mov	r18, r24
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	8b 81       	ldd	r24, Y+3	; 0x03
 5fc:	88 2f       	mov	r24, r24
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	b9 01       	movw	r22, r18
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_enuSetPinValue+0xba>
 604:	66 0f       	add	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	8a 95       	dec	r24
 60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_enuSetPinValue+0xb6>
 60c:	cb 01       	movw	r24, r22
 60e:	84 2b       	or	r24, r20
 610:	8c 93       	st	X, r24
 612:	7a c0       	rjmp	.+244    	; 0x708 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 614:	a8 e3       	ldi	r26, 0x38	; 56
 616:	b0 e0       	ldi	r27, 0x00	; 0
 618:	e8 e3       	ldi	r30, 0x38	; 56
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	48 2f       	mov	r20, r24
 620:	8b 81       	ldd	r24, Y+3	; 0x03
 622:	28 2f       	mov	r18, r24
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_enuSetPinValue+0xe2>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	2a 95       	dec	r18
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_enuSetPinValue+0xde>
 634:	80 95       	com	r24
 636:	84 23       	and	r24, r20
 638:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
 63a:	a8 e3       	ldi	r26, 0x38	; 56
 63c:	b0 e0       	ldi	r27, 0x00	; 0
 63e:	e8 e3       	ldi	r30, 0x38	; 56
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	80 81       	ld	r24, Z
 644:	48 2f       	mov	r20, r24
 646:	8c 81       	ldd	r24, Y+4	; 0x04
 648:	28 2f       	mov	r18, r24
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	8b 81       	ldd	r24, Y+3	; 0x03
 64e:	88 2f       	mov	r24, r24
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	b9 01       	movw	r22, r18
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_enuSetPinValue+0x10c>
 656:	66 0f       	add	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	8a 95       	dec	r24
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_enuSetPinValue+0x108>
 65e:	cb 01       	movw	r24, r22
 660:	84 2b       	or	r24, r20
 662:	8c 93       	st	X, r24
 664:	51 c0       	rjmp	.+162    	; 0x708 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 666:	a5 e3       	ldi	r26, 0x35	; 53
 668:	b0 e0       	ldi	r27, 0x00	; 0
 66a:	e5 e3       	ldi	r30, 0x35	; 53
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	80 81       	ld	r24, Z
 670:	48 2f       	mov	r20, r24
 672:	8b 81       	ldd	r24, Y+3	; 0x03
 674:	28 2f       	mov	r18, r24
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_enuSetPinValue+0x134>
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	2a 95       	dec	r18
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_enuSetPinValue+0x130>
 686:	80 95       	com	r24
 688:	84 23       	and	r24, r20
 68a:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
 68c:	a5 e3       	ldi	r26, 0x35	; 53
 68e:	b0 e0       	ldi	r27, 0x00	; 0
 690:	e5 e3       	ldi	r30, 0x35	; 53
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	80 81       	ld	r24, Z
 696:	48 2f       	mov	r20, r24
 698:	8c 81       	ldd	r24, Y+4	; 0x04
 69a:	28 2f       	mov	r18, r24
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	8b 81       	ldd	r24, Y+3	; 0x03
 6a0:	88 2f       	mov	r24, r24
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	b9 01       	movw	r22, r18
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DIO_enuSetPinValue+0x15e>
 6a8:	66 0f       	add	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	8a 95       	dec	r24
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <DIO_enuSetPinValue+0x15a>
 6b0:	cb 01       	movw	r24, r22
 6b2:	84 2b       	or	r24, r20
 6b4:	8c 93       	st	X, r24
 6b6:	28 c0       	rjmp	.+80     	; 0x708 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 6b8:	a2 e3       	ldi	r26, 0x32	; 50
 6ba:	b0 e0       	ldi	r27, 0x00	; 0
 6bc:	e2 e3       	ldi	r30, 0x32	; 50
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	48 2f       	mov	r20, r24
 6c4:	8b 81       	ldd	r24, Y+3	; 0x03
 6c6:	28 2f       	mov	r18, r24
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_enuSetPinValue+0x186>
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	2a 95       	dec	r18
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_enuSetPinValue+0x182>
 6d8:	80 95       	com	r24
 6da:	84 23       	and	r24, r20
 6dc:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
 6de:	a2 e3       	ldi	r26, 0x32	; 50
 6e0:	b0 e0       	ldi	r27, 0x00	; 0
 6e2:	e2 e3       	ldi	r30, 0x32	; 50
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	80 81       	ld	r24, Z
 6e8:	48 2f       	mov	r20, r24
 6ea:	8c 81       	ldd	r24, Y+4	; 0x04
 6ec:	28 2f       	mov	r18, r24
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	8b 81       	ldd	r24, Y+3	; 0x03
 6f2:	88 2f       	mov	r24, r24
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	b9 01       	movw	r22, r18
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_enuSetPinValue+0x1b0>
 6fa:	66 0f       	add	r22, r22
 6fc:	77 1f       	adc	r23, r23
 6fe:	8a 95       	dec	r24
 700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_enuSetPinValue+0x1ac>
 702:	cb 01       	movw	r24, r22
 704:	84 2b       	or	r24, r20
 706:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	89 83       	std	Y+1, r24	; 0x01
 70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
 70e:	83 e0       	ldi	r24, 0x03	; 3
 710:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 712:	89 81       	ldd	r24, Y+1	; 0x01
}
 714:	26 96       	adiw	r28, 0x06	; 6
 716:	0f b6       	in	r0, 0x3f	; 63
 718:	f8 94       	cli
 71a:	de bf       	out	0x3e, r29	; 62
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	cd bf       	out	0x3d, r28	; 61
 720:	cf 91       	pop	r28
 722:	df 91       	pop	r29
 724:	08 95       	ret

00000726 <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
 726:	df 93       	push	r29
 728:	cf 93       	push	r28
 72a:	00 d0       	rcall	.+0      	; 0x72c <DIO_enuTogPin+0x6>
 72c:	00 d0       	rcall	.+0      	; 0x72e <DIO_enuTogPin+0x8>
 72e:	0f 92       	push	r0
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	8a 83       	std	Y+2, r24	; 0x02
 736:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
 738:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
 73a:	8a 81       	ldd	r24, Y+2	; 0x02
 73c:	84 30       	cpi	r24, 0x04	; 4
 73e:	08 f0       	brcs	.+2      	; 0x742 <DIO_enuTogPin+0x1c>
 740:	75 c0       	rjmp	.+234    	; 0x82c <DIO_enuTogPin+0x106>
 742:	8b 81       	ldd	r24, Y+3	; 0x03
 744:	88 30       	cpi	r24, 0x08	; 8
 746:	08 f0       	brcs	.+2      	; 0x74a <DIO_enuTogPin+0x24>
 748:	71 c0       	rjmp	.+226    	; 0x82c <DIO_enuTogPin+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
 74a:	8a 81       	ldd	r24, Y+2	; 0x02
 74c:	28 2f       	mov	r18, r24
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	3d 83       	std	Y+5, r19	; 0x05
 752:	2c 83       	std	Y+4, r18	; 0x04
 754:	8c 81       	ldd	r24, Y+4	; 0x04
 756:	9d 81       	ldd	r25, Y+5	; 0x05
 758:	81 30       	cpi	r24, 0x01	; 1
 75a:	91 05       	cpc	r25, r1
 75c:	49 f1       	breq	.+82     	; 0x7b0 <DIO_enuTogPin+0x8a>
 75e:	2c 81       	ldd	r18, Y+4	; 0x04
 760:	3d 81       	ldd	r19, Y+5	; 0x05
 762:	22 30       	cpi	r18, 0x02	; 2
 764:	31 05       	cpc	r19, r1
 766:	2c f4       	brge	.+10     	; 0x772 <DIO_enuTogPin+0x4c>
 768:	8c 81       	ldd	r24, Y+4	; 0x04
 76a:	9d 81       	ldd	r25, Y+5	; 0x05
 76c:	00 97       	sbiw	r24, 0x00	; 0
 76e:	61 f0       	breq	.+24     	; 0x788 <DIO_enuTogPin+0x62>
 770:	5a c0       	rjmp	.+180    	; 0x826 <DIO_enuTogPin+0x100>
 772:	2c 81       	ldd	r18, Y+4	; 0x04
 774:	3d 81       	ldd	r19, Y+5	; 0x05
 776:	22 30       	cpi	r18, 0x02	; 2
 778:	31 05       	cpc	r19, r1
 77a:	71 f1       	breq	.+92     	; 0x7d8 <DIO_enuTogPin+0xb2>
 77c:	8c 81       	ldd	r24, Y+4	; 0x04
 77e:	9d 81       	ldd	r25, Y+5	; 0x05
 780:	83 30       	cpi	r24, 0x03	; 3
 782:	91 05       	cpc	r25, r1
 784:	e9 f1       	breq	.+122    	; 0x800 <DIO_enuTogPin+0xda>
 786:	4f c0       	rjmp	.+158    	; 0x826 <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
 788:	ab e3       	ldi	r26, 0x3B	; 59
 78a:	b0 e0       	ldi	r27, 0x00	; 0
 78c:	eb e3       	ldi	r30, 0x3B	; 59
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	48 2f       	mov	r20, r24
 794:	8b 81       	ldd	r24, Y+3	; 0x03
 796:	28 2f       	mov	r18, r24
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	02 2e       	mov	r0, r18
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <DIO_enuTogPin+0x80>
 7a2:	88 0f       	add	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	0a 94       	dec	r0
 7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <DIO_enuTogPin+0x7c>
 7aa:	84 27       	eor	r24, r20
 7ac:	8c 93       	st	X, r24
 7ae:	3b c0       	rjmp	.+118    	; 0x826 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
 7b0:	a8 e3       	ldi	r26, 0x38	; 56
 7b2:	b0 e0       	ldi	r27, 0x00	; 0
 7b4:	e8 e3       	ldi	r30, 0x38	; 56
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	80 81       	ld	r24, Z
 7ba:	48 2f       	mov	r20, r24
 7bc:	8b 81       	ldd	r24, Y+3	; 0x03
 7be:	28 2f       	mov	r18, r24
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	02 2e       	mov	r0, r18
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <DIO_enuTogPin+0xa8>
 7ca:	88 0f       	add	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	0a 94       	dec	r0
 7d0:	e2 f7       	brpl	.-8      	; 0x7ca <DIO_enuTogPin+0xa4>
 7d2:	84 27       	eor	r24, r20
 7d4:	8c 93       	st	X, r24
 7d6:	27 c0       	rjmp	.+78     	; 0x826 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
 7d8:	a5 e3       	ldi	r26, 0x35	; 53
 7da:	b0 e0       	ldi	r27, 0x00	; 0
 7dc:	e5 e3       	ldi	r30, 0x35	; 53
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	80 81       	ld	r24, Z
 7e2:	48 2f       	mov	r20, r24
 7e4:	8b 81       	ldd	r24, Y+3	; 0x03
 7e6:	28 2f       	mov	r18, r24
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	02 2e       	mov	r0, r18
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_enuTogPin+0xd0>
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	0a 94       	dec	r0
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_enuTogPin+0xcc>
 7fa:	84 27       	eor	r24, r20
 7fc:	8c 93       	st	X, r24
 7fe:	13 c0       	rjmp	.+38     	; 0x826 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
 800:	a2 e3       	ldi	r26, 0x32	; 50
 802:	b0 e0       	ldi	r27, 0x00	; 0
 804:	e2 e3       	ldi	r30, 0x32	; 50
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	80 81       	ld	r24, Z
 80a:	48 2f       	mov	r20, r24
 80c:	8b 81       	ldd	r24, Y+3	; 0x03
 80e:	28 2f       	mov	r18, r24
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	02 2e       	mov	r0, r18
 818:	02 c0       	rjmp	.+4      	; 0x81e <DIO_enuTogPin+0xf8>
 81a:	88 0f       	add	r24, r24
 81c:	99 1f       	adc	r25, r25
 81e:	0a 94       	dec	r0
 820:	e2 f7       	brpl	.-8      	; 0x81a <DIO_enuTogPin+0xf4>
 822:	84 27       	eor	r24, r20
 824:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	89 83       	std	Y+1, r24	; 0x01
 82a:	02 c0       	rjmp	.+4      	; 0x830 <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
 82c:	83 e0       	ldi	r24, 0x03	; 3
 82e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 830:	89 81       	ldd	r24, Y+1	; 0x01
}
 832:	0f 90       	pop	r0
 834:	0f 90       	pop	r0
 836:	0f 90       	pop	r0
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	cf 91       	pop	r28
 83e:	df 91       	pop	r29
 840:	08 95       	ret

00000842 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
 842:	df 93       	push	r29
 844:	cf 93       	push	r28
 846:	cd b7       	in	r28, 0x3d	; 61
 848:	de b7       	in	r29, 0x3e	; 62
 84a:	27 97       	sbiw	r28, 0x07	; 7
 84c:	0f b6       	in	r0, 0x3f	; 63
 84e:	f8 94       	cli
 850:	de bf       	out	0x3e, r29	; 62
 852:	0f be       	out	0x3f, r0	; 63
 854:	cd bf       	out	0x3d, r28	; 61
 856:	8a 83       	std	Y+2, r24	; 0x02
 858:	6b 83       	std	Y+3, r22	; 0x03
 85a:	5d 83       	std	Y+5, r21	; 0x05
 85c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
 85e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
 860:	8c 81       	ldd	r24, Y+4	; 0x04
 862:	9d 81       	ldd	r25, Y+5	; 0x05
 864:	00 97       	sbiw	r24, 0x00	; 0
 866:	09 f4       	brne	.+2      	; 0x86a <__stack+0xb>
 868:	7e c0       	rjmp	.+252    	; 0x966 <__stack+0x107>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
 86a:	8a 81       	ldd	r24, Y+2	; 0x02
 86c:	84 30       	cpi	r24, 0x04	; 4
 86e:	08 f0       	brcs	.+2      	; 0x872 <__stack+0x13>
 870:	77 c0       	rjmp	.+238    	; 0x960 <__stack+0x101>
 872:	8b 81       	ldd	r24, Y+3	; 0x03
 874:	88 30       	cpi	r24, 0x08	; 8
 876:	08 f0       	brcs	.+2      	; 0x87a <__stack+0x1b>
 878:	73 c0       	rjmp	.+230    	; 0x960 <__stack+0x101>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
 87a:	8a 81       	ldd	r24, Y+2	; 0x02
 87c:	28 2f       	mov	r18, r24
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	3f 83       	std	Y+7, r19	; 0x07
 882:	2e 83       	std	Y+6, r18	; 0x06
 884:	4e 81       	ldd	r20, Y+6	; 0x06
 886:	5f 81       	ldd	r21, Y+7	; 0x07
 888:	41 30       	cpi	r20, 0x01	; 1
 88a:	51 05       	cpc	r21, r1
 88c:	59 f1       	breq	.+86     	; 0x8e4 <__stack+0x85>
 88e:	8e 81       	ldd	r24, Y+6	; 0x06
 890:	9f 81       	ldd	r25, Y+7	; 0x07
 892:	82 30       	cpi	r24, 0x02	; 2
 894:	91 05       	cpc	r25, r1
 896:	34 f4       	brge	.+12     	; 0x8a4 <__stack+0x45>
 898:	2e 81       	ldd	r18, Y+6	; 0x06
 89a:	3f 81       	ldd	r19, Y+7	; 0x07
 89c:	21 15       	cp	r18, r1
 89e:	31 05       	cpc	r19, r1
 8a0:	69 f0       	breq	.+26     	; 0x8bc <__stack+0x5d>
 8a2:	5b c0       	rjmp	.+182    	; 0x95a <__stack+0xfb>
 8a4:	4e 81       	ldd	r20, Y+6	; 0x06
 8a6:	5f 81       	ldd	r21, Y+7	; 0x07
 8a8:	42 30       	cpi	r20, 0x02	; 2
 8aa:	51 05       	cpc	r21, r1
 8ac:	79 f1       	breq	.+94     	; 0x90c <__stack+0xad>
 8ae:	8e 81       	ldd	r24, Y+6	; 0x06
 8b0:	9f 81       	ldd	r25, Y+7	; 0x07
 8b2:	83 30       	cpi	r24, 0x03	; 3
 8b4:	91 05       	cpc	r25, r1
 8b6:	09 f4       	brne	.+2      	; 0x8ba <__stack+0x5b>
 8b8:	3d c0       	rjmp	.+122    	; 0x934 <__stack+0xd5>
 8ba:	4f c0       	rjmp	.+158    	; 0x95a <__stack+0xfb>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
 8bc:	e9 e3       	ldi	r30, 0x39	; 57
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	80 81       	ld	r24, Z
 8c2:	28 2f       	mov	r18, r24
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	8b 81       	ldd	r24, Y+3	; 0x03
 8c8:	88 2f       	mov	r24, r24
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	a9 01       	movw	r20, r18
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
 8d0:	55 95       	asr	r21
 8d2:	47 95       	ror	r20
 8d4:	8a 95       	dec	r24
 8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
 8d8:	ca 01       	movw	r24, r20
 8da:	81 70       	andi	r24, 0x01	; 1
 8dc:	ec 81       	ldd	r30, Y+4	; 0x04
 8de:	fd 81       	ldd	r31, Y+5	; 0x05
 8e0:	80 83       	st	Z, r24
 8e2:	3b c0       	rjmp	.+118    	; 0x95a <__stack+0xfb>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
 8e4:	e6 e3       	ldi	r30, 0x36	; 54
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	80 81       	ld	r24, Z
 8ea:	28 2f       	mov	r18, r24
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	8b 81       	ldd	r24, Y+3	; 0x03
 8f0:	88 2f       	mov	r24, r24
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	a9 01       	movw	r20, r18
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <__stack+0x9d>
 8f8:	55 95       	asr	r21
 8fa:	47 95       	ror	r20
 8fc:	8a 95       	dec	r24
 8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <__stack+0x99>
 900:	ca 01       	movw	r24, r20
 902:	81 70       	andi	r24, 0x01	; 1
 904:	ec 81       	ldd	r30, Y+4	; 0x04
 906:	fd 81       	ldd	r31, Y+5	; 0x05
 908:	80 83       	st	Z, r24
 90a:	27 c0       	rjmp	.+78     	; 0x95a <__stack+0xfb>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
 90c:	e3 e3       	ldi	r30, 0x33	; 51
 90e:	f0 e0       	ldi	r31, 0x00	; 0
 910:	80 81       	ld	r24, Z
 912:	28 2f       	mov	r18, r24
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	8b 81       	ldd	r24, Y+3	; 0x03
 918:	88 2f       	mov	r24, r24
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	a9 01       	movw	r20, r18
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0xc5>
 920:	55 95       	asr	r21
 922:	47 95       	ror	r20
 924:	8a 95       	dec	r24
 926:	e2 f7       	brpl	.-8      	; 0x920 <__stack+0xc1>
 928:	ca 01       	movw	r24, r20
 92a:	81 70       	andi	r24, 0x01	; 1
 92c:	ec 81       	ldd	r30, Y+4	; 0x04
 92e:	fd 81       	ldd	r31, Y+5	; 0x05
 930:	80 83       	st	Z, r24
 932:	13 c0       	rjmp	.+38     	; 0x95a <__stack+0xfb>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
 934:	e0 e3       	ldi	r30, 0x30	; 48
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	28 2f       	mov	r18, r24
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	8b 81       	ldd	r24, Y+3	; 0x03
 940:	88 2f       	mov	r24, r24
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	a9 01       	movw	r20, r18
 946:	02 c0       	rjmp	.+4      	; 0x94c <__stack+0xed>
 948:	55 95       	asr	r21
 94a:	47 95       	ror	r20
 94c:	8a 95       	dec	r24
 94e:	e2 f7       	brpl	.-8      	; 0x948 <__stack+0xe9>
 950:	ca 01       	movw	r24, r20
 952:	81 70       	andi	r24, 0x01	; 1
 954:	ec 81       	ldd	r30, Y+4	; 0x04
 956:	fd 81       	ldd	r31, Y+5	; 0x05
 958:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	89 83       	std	Y+1, r24	; 0x01
 95e:	05 c0       	rjmp	.+10     	; 0x96a <__stack+0x10b>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
 960:	83 e0       	ldi	r24, 0x03	; 3
 962:	89 83       	std	Y+1, r24	; 0x01
 964:	02 c0       	rjmp	.+4      	; 0x96a <__stack+0x10b>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
 966:	82 e0       	ldi	r24, 0x02	; 2
 968:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 96a:	89 81       	ldd	r24, Y+1	; 0x01
}
 96c:	27 96       	adiw	r28, 0x07	; 7
 96e:	0f b6       	in	r0, 0x3f	; 63
 970:	f8 94       	cli
 972:	de bf       	out	0x3e, r29	; 62
 974:	0f be       	out	0x3f, r0	; 63
 976:	cd bf       	out	0x3d, r28	; 61
 978:	cf 91       	pop	r28
 97a:	df 91       	pop	r29
 97c:	08 95       	ret

0000097e <SWITCH_enuint>:
#include "Switch_priv.h"
#include "Switch_config.h"
#include "DIO_int.h"


ES_t SWITCH_enuint(SW_t *SWITCH_CONFIG){
 97e:	df 93       	push	r29
 980:	cf 93       	push	r28
 982:	00 d0       	rcall	.+0      	; 0x984 <SWITCH_enuint+0x6>
 984:	00 d0       	rcall	.+0      	; 0x986 <SWITCH_enuint+0x8>
 986:	cd b7       	in	r28, 0x3d	; 61
 988:	de b7       	in	r29, 0x3e	; 62
 98a:	9c 83       	std	Y+4, r25	; 0x04
 98c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t local_enuerror=ES_NOK;
 98e:	1a 82       	std	Y+2, r1	; 0x02
	if(SWITCH_CONFIG!=NULL){
 990:	8b 81       	ldd	r24, Y+3	; 0x03
 992:	9c 81       	ldd	r25, Y+4	; 0x04
 994:	00 97       	sbiw	r24, 0x00	; 0
 996:	09 f4       	brne	.+2      	; 0x99a <SWITCH_enuint+0x1c>
 998:	5c c0       	rjmp	.+184    	; 0xa52 <SWITCH_enuint+0xd4>
		for(u8 Iterator=0;Iterator<SW_NUM;Iterator++){
 99a:	19 82       	std	Y+1, r1	; 0x01
 99c:	55 c0       	rjmp	.+170    	; 0xa48 <SWITCH_enuint+0xca>
		local_enuerror=DIO_enuSetPinDirection(SWITCH_CONFIG[Iterator].PORT_ID,SWITCH_CONFIG[Iterator].PIN_ID,INPUT);
 99e:	89 81       	ldd	r24, Y+1	; 0x01
 9a0:	28 2f       	mov	r18, r24
 9a2:	30 e0       	ldi	r19, 0x00	; 0
 9a4:	c9 01       	movw	r24, r18
 9a6:	88 0f       	add	r24, r24
 9a8:	99 1f       	adc	r25, r25
 9aa:	28 0f       	add	r18, r24
 9ac:	39 1f       	adc	r19, r25
 9ae:	8b 81       	ldd	r24, Y+3	; 0x03
 9b0:	9c 81       	ldd	r25, Y+4	; 0x04
 9b2:	fc 01       	movw	r30, r24
 9b4:	e2 0f       	add	r30, r18
 9b6:	f3 1f       	adc	r31, r19
 9b8:	40 81       	ld	r20, Z
 9ba:	89 81       	ldd	r24, Y+1	; 0x01
 9bc:	28 2f       	mov	r18, r24
 9be:	30 e0       	ldi	r19, 0x00	; 0
 9c0:	c9 01       	movw	r24, r18
 9c2:	88 0f       	add	r24, r24
 9c4:	99 1f       	adc	r25, r25
 9c6:	28 0f       	add	r18, r24
 9c8:	39 1f       	adc	r19, r25
 9ca:	8b 81       	ldd	r24, Y+3	; 0x03
 9cc:	9c 81       	ldd	r25, Y+4	; 0x04
 9ce:	fc 01       	movw	r30, r24
 9d0:	e2 0f       	add	r30, r18
 9d2:	f3 1f       	adc	r31, r19
 9d4:	91 81       	ldd	r25, Z+1	; 0x01
 9d6:	84 2f       	mov	r24, r20
 9d8:	69 2f       	mov	r22, r25
 9da:	40 e0       	ldi	r20, 0x00	; 0
 9dc:	0e 94 bb 01 	call	0x376	; 0x376 <DIO_enuSetPinDirection>
 9e0:	8a 83       	std	Y+2, r24	; 0x02
		local_enuerror=DIO_enuSetPinValue(SWITCH_CONFIG[Iterator].PORT_ID,SWITCH_CONFIG[Iterator].PIN_ID,SWITCH_CONFIG[Iterator].SWITCH_STAT);
 9e2:	89 81       	ldd	r24, Y+1	; 0x01
 9e4:	28 2f       	mov	r18, r24
 9e6:	30 e0       	ldi	r19, 0x00	; 0
 9e8:	c9 01       	movw	r24, r18
 9ea:	88 0f       	add	r24, r24
 9ec:	99 1f       	adc	r25, r25
 9ee:	28 0f       	add	r18, r24
 9f0:	39 1f       	adc	r19, r25
 9f2:	8b 81       	ldd	r24, Y+3	; 0x03
 9f4:	9c 81       	ldd	r25, Y+4	; 0x04
 9f6:	fc 01       	movw	r30, r24
 9f8:	e2 0f       	add	r30, r18
 9fa:	f3 1f       	adc	r31, r19
 9fc:	50 81       	ld	r21, Z
 9fe:	89 81       	ldd	r24, Y+1	; 0x01
 a00:	28 2f       	mov	r18, r24
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	c9 01       	movw	r24, r18
 a06:	88 0f       	add	r24, r24
 a08:	99 1f       	adc	r25, r25
 a0a:	28 0f       	add	r18, r24
 a0c:	39 1f       	adc	r19, r25
 a0e:	8b 81       	ldd	r24, Y+3	; 0x03
 a10:	9c 81       	ldd	r25, Y+4	; 0x04
 a12:	fc 01       	movw	r30, r24
 a14:	e2 0f       	add	r30, r18
 a16:	f3 1f       	adc	r31, r19
 a18:	41 81       	ldd	r20, Z+1	; 0x01
 a1a:	89 81       	ldd	r24, Y+1	; 0x01
 a1c:	28 2f       	mov	r18, r24
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	c9 01       	movw	r24, r18
 a22:	88 0f       	add	r24, r24
 a24:	99 1f       	adc	r25, r25
 a26:	28 0f       	add	r18, r24
 a28:	39 1f       	adc	r19, r25
 a2a:	8b 81       	ldd	r24, Y+3	; 0x03
 a2c:	9c 81       	ldd	r25, Y+4	; 0x04
 a2e:	fc 01       	movw	r30, r24
 a30:	e2 0f       	add	r30, r18
 a32:	f3 1f       	adc	r31, r19
 a34:	92 81       	ldd	r25, Z+2	; 0x02
 a36:	85 2f       	mov	r24, r21
 a38:	64 2f       	mov	r22, r20
 a3a:	49 2f       	mov	r20, r25
 a3c:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_enuSetPinValue>
 a40:	8a 83       	std	Y+2, r24	; 0x02


ES_t SWITCH_enuint(SW_t *SWITCH_CONFIG){
	ES_t local_enuerror=ES_NOK;
	if(SWITCH_CONFIG!=NULL){
		for(u8 Iterator=0;Iterator<SW_NUM;Iterator++){
 a42:	89 81       	ldd	r24, Y+1	; 0x01
 a44:	8f 5f       	subi	r24, 0xFF	; 255
 a46:	89 83       	std	Y+1, r24	; 0x01
 a48:	89 81       	ldd	r24, Y+1	; 0x01
 a4a:	82 30       	cpi	r24, 0x02	; 2
 a4c:	08 f4       	brcc	.+2      	; 0xa50 <SWITCH_enuint+0xd2>
 a4e:	a7 cf       	rjmp	.-178    	; 0x99e <SWITCH_enuint+0x20>
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <SWITCH_enuint+0xd8>
		}


	}
	else
		local_enuerror=ES_NULL_POINTER;
 a52:	82 e0       	ldi	r24, 0x02	; 2
 a54:	8a 83       	std	Y+2, r24	; 0x02

	return local_enuerror;
 a56:	8a 81       	ldd	r24, Y+2	; 0x02
}
 a58:	0f 90       	pop	r0
 a5a:	0f 90       	pop	r0
 a5c:	0f 90       	pop	r0
 a5e:	0f 90       	pop	r0
 a60:	cf 91       	pop	r28
 a62:	df 91       	pop	r29
 a64:	08 95       	ret

00000a66 <SWITCH_STATUS>:


ES_t SWITCH_STATUS(SW_t *SWITCH_CONFIG, u8* Switch_status ){
 a66:	df 93       	push	r29
 a68:	cf 93       	push	r28
 a6a:	00 d0       	rcall	.+0      	; 0xa6c <SWITCH_STATUS+0x6>
 a6c:	00 d0       	rcall	.+0      	; 0xa6e <SWITCH_STATUS+0x8>
 a6e:	0f 92       	push	r0
 a70:	cd b7       	in	r28, 0x3d	; 61
 a72:	de b7       	in	r29, 0x3e	; 62
 a74:	9b 83       	std	Y+3, r25	; 0x03
 a76:	8a 83       	std	Y+2, r24	; 0x02
 a78:	7d 83       	std	Y+5, r23	; 0x05
 a7a:	6c 83       	std	Y+4, r22	; 0x04

	ES_t local_enuerror=ES_NOK;
 a7c:	19 82       	std	Y+1, r1	; 0x01

	if(SWITCH_CONFIG!=NULL){
 a7e:	8a 81       	ldd	r24, Y+2	; 0x02
 a80:	9b 81       	ldd	r25, Y+3	; 0x03
 a82:	00 97       	sbiw	r24, 0x00	; 0
 a84:	71 f0       	breq	.+28     	; 0xaa2 <SWITCH_STATUS+0x3c>


			local_enuerror=DIO_enuGetPinValue(SWITCH_CONFIG->PORT_ID,SWITCH_CONFIG->PIN_ID,Switch_status);
 a86:	ea 81       	ldd	r30, Y+2	; 0x02
 a88:	fb 81       	ldd	r31, Y+3	; 0x03
 a8a:	80 81       	ld	r24, Z
 a8c:	ea 81       	ldd	r30, Y+2	; 0x02
 a8e:	fb 81       	ldd	r31, Y+3	; 0x03
 a90:	91 81       	ldd	r25, Z+1	; 0x01
 a92:	2c 81       	ldd	r18, Y+4	; 0x04
 a94:	3d 81       	ldd	r19, Y+5	; 0x05
 a96:	69 2f       	mov	r22, r25
 a98:	a9 01       	movw	r20, r18
 a9a:	0e 94 21 04 	call	0x842	; 0x842 <DIO_enuGetPinValue>
 a9e:	89 83       	std	Y+1, r24	; 0x01
 aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <SWITCH_STATUS+0x40>



		}
		else
			local_enuerror=ES_NULL_POINTER;
 aa2:	82 e0       	ldi	r24, 0x02	; 2
 aa4:	89 83       	std	Y+1, r24	; 0x01

		return local_enuerror;
 aa6:	89 81       	ldd	r24, Y+1	; 0x01


}
 aa8:	0f 90       	pop	r0
 aaa:	0f 90       	pop	r0
 aac:	0f 90       	pop	r0
 aae:	0f 90       	pop	r0
 ab0:	0f 90       	pop	r0
 ab2:	cf 91       	pop	r28
 ab4:	df 91       	pop	r29
 ab6:	08 95       	ret

00000ab8 <main>:
#include "Switch_int.h"
#include "DIO_int.h"
#include <util/delay.h>
extern  SW_t SWITCH_CONFIG[SW_NUM];
int main(void)
{
 ab8:	df 93       	push	r29
 aba:	cf 93       	push	r28
 abc:	0f 92       	push	r0
 abe:	cd b7       	in	r28, 0x3d	; 61
 ac0:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
 ac2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>
	SWITCH_enuint(SWITCH_CONFIG);
 ac6:	80 e6       	ldi	r24, 0x60	; 96
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	0e 94 bf 04 	call	0x97e	; 0x97e <SWITCH_enuint>
	u8 sw_stat;
	while(1){
		if(SWITCH_STATUS(&SWITCH_CONFIG[1],&sw_stat)==ES_OK){
 ace:	83 e6       	ldi	r24, 0x63	; 99
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	9e 01       	movw	r18, r28
 ad4:	2f 5f       	subi	r18, 0xFF	; 255
 ad6:	3f 4f       	sbci	r19, 0xFF	; 255
 ad8:	b9 01       	movw	r22, r18
 ada:	0e 94 33 05 	call	0xa66	; 0xa66 <SWITCH_STATUS>
 ade:	81 30       	cpi	r24, 0x01	; 1
 ae0:	b1 f7       	brne	.-20     	; 0xace <main+0x16>
			if(sw_stat==0)
 ae2:	89 81       	ldd	r24, Y+1	; 0x01
 ae4:	88 23       	and	r24, r24
 ae6:	31 f4       	brne	.+12     	; 0xaf4 <main+0x3c>
			 DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN1, DIO_u8HIGH);
 ae8:	80 e0       	ldi	r24, 0x00	; 0
 aea:	61 e0       	ldi	r22, 0x01	; 1
 aec:	41 e0       	ldi	r20, 0x01	; 1
 aee:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_enuSetPinValue>
 af2:	ed cf       	rjmp	.-38     	; 0xace <main+0x16>
			else
			 DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN1, DIO_u8LOW);
 af4:	80 e0       	ldi	r24, 0x00	; 0
 af6:	61 e0       	ldi	r22, 0x01	; 1
 af8:	40 e0       	ldi	r20, 0x00	; 0
 afa:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_enuSetPinValue>
 afe:	e7 cf       	rjmp	.-50     	; 0xace <main+0x16>

00000b00 <_exit>:
 b00:	f8 94       	cli

00000b02 <__stop_program>:
 b02:	ff cf       	rjmp	.-2      	; 0xb02 <__stop_program>
